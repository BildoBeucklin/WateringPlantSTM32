
e-paper-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003674  08003674  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003674  08003674  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003674  08003674  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00013674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800367c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  080036ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080036ec  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa1f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b55  00000000  00000000  0002aab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196ff  00000000  00000000  0002d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc8e  00000000  00000000  00046ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cff5  00000000  00000000  00052b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfb5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002640  00000000  00000000  000dfbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003588 	.word	0x08003588

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003588 	.word	0x08003588

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 800022c:	23fa      	movs	r3, #250	; 0xfa
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	1df9      	adds	r1, r7, #7
 8000232:	4804      	ldr	r0, [pc, #16]	; (8000244 <DEV_SPI_WriteByte+0x24>)
 8000234:	2201      	movs	r2, #1
 8000236:	f001 fd97 	bl	8001d68 <HAL_SPI_Transmit>
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	2000008c 	.word	0x2000008c

08000248 <EPD_1IN54B_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54B_V2_Reset(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800024c:	2390      	movs	r3, #144	; 0x90
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	2201      	movs	r2, #1
 8000252:	2102      	movs	r1, #2
 8000254:	0018      	movs	r0, r3
 8000256:	f000 feb6 	bl	8000fc6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800025a:	2064      	movs	r0, #100	; 0x64
 800025c:	f000 fc56 	bl	8000b0c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 feac 	bl	8000fc6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 fc4c 	bl	8000b0c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000274:	2390      	movs	r3, #144	; 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2201      	movs	r2, #1
 800027a:	2102      	movs	r1, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fea2 	bl	8000fc6 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8000282:	2064      	movs	r0, #100	; 0x64
 8000284:	f000 fc42 	bl	8000b0c <HAL_Delay>
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <EPD_1IN54B_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54B_V2_SendCommand(UBYTE Reg)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	0002      	movs	r2, r0
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800029a:	2390      	movs	r3, #144	; 0x90
 800029c:	05db      	lsls	r3, r3, #23
 800029e:	2200      	movs	r2, #0
 80002a0:	2104      	movs	r1, #4
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fe8f 	bl	8000fc6 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80002a8:	2390      	movs	r3, #144	; 0x90
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	2200      	movs	r2, #0
 80002ae:	2110      	movs	r1, #16
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fe88 	bl	8000fc6 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	0018      	movs	r0, r3
 80002bc:	f7ff ffb0 	bl	8000220 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2201      	movs	r2, #1
 80002c6:	2110      	movs	r1, #16
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fe7c 	bl	8000fc6 <HAL_GPIO_WritePin>
}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b002      	add	sp, #8
 80002d4:	bd80      	pop	{r7, pc}

080002d6 <EPD_1IN54B_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54B_V2_SendData(UBYTE Data)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	0002      	movs	r2, r0
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80002e2:	2390      	movs	r3, #144	; 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2201      	movs	r2, #1
 80002e8:	2104      	movs	r1, #4
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fe6b 	bl	8000fc6 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80002f0:	2390      	movs	r3, #144	; 0x90
 80002f2:	05db      	lsls	r3, r3, #23
 80002f4:	2200      	movs	r2, #0
 80002f6:	2110      	movs	r1, #16
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fe64 	bl	8000fc6 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	0018      	movs	r0, r3
 8000304:	f7ff ff8c 	bl	8000220 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000308:	2390      	movs	r3, #144	; 0x90
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2201      	movs	r2, #1
 800030e:	2110      	movs	r1, #16
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fe58 	bl	8000fc6 <HAL_GPIO_WritePin>
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <EPD_1IN54B_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54B_V2_ReadBusy(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <EPD_1IN54B_V2_ReadBusy+0x34>)
 8000326:	0018      	movs	r0, r3
 8000328:	f002 fc56 	bl	8002bd8 <puts>
    while(1) {
        if(DEV_Digital_Read(EPD_BUSY_PIN) == 0)
 800032c:	2390      	movs	r3, #144	; 0x90
 800032e:	05db      	lsls	r3, r3, #23
 8000330:	2108      	movs	r1, #8
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fe2a 	bl	8000f8c <HAL_GPIO_ReadPin>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d000      	beq.n	800033e <EPD_1IN54B_V2_ReadBusy+0x1e>
 800033c:	e7f6      	b.n	800032c <EPD_1IN54B_V2_ReadBusy+0xc>
            break;
 800033e:	46c0      	nop			; (mov r8, r8)
    }
    DEV_Delay_ms(200);
 8000340:	20c8      	movs	r0, #200	; 0xc8
 8000342:	f000 fbe3 	bl	8000b0c <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <EPD_1IN54B_V2_ReadBusy+0x38>)
 8000348:	0018      	movs	r0, r3
 800034a:	f002 fc45 	bl	8002bd8 <puts>
}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	080035a0 	.word	0x080035a0
 8000358:	080035b8 	.word	0x080035b8

0800035c <EPD_1IN54B_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54B_V2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
    EPD_1IN54B_V2_Reset();
 8000360:	f7ff ff72 	bl	8000248 <EPD_1IN54B_V2_Reset>

    EPD_1IN54B_V2_ReadBusy();   
 8000364:	f7ff ffdc 	bl	8000320 <EPD_1IN54B_V2_ReadBusy>
    EPD_1IN54B_V2_SendCommand(0x12);  //SWRESET
 8000368:	2012      	movs	r0, #18
 800036a:	f7ff ff90 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_ReadBusy();   
 800036e:	f7ff ffd7 	bl	8000320 <EPD_1IN54B_V2_ReadBusy>

    EPD_1IN54B_V2_SendCommand(0x01); //Driver output control      
 8000372:	2001      	movs	r0, #1
 8000374:	f7ff ff8b 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0xC7);
 8000378:	20c7      	movs	r0, #199	; 0xc7
 800037a:	f7ff ffac 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendData(0x00);
 800037e:	2000      	movs	r0, #0
 8000380:	f7ff ffa9 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendData(0x01);
 8000384:	2001      	movs	r0, #1
 8000386:	f7ff ffa6 	bl	80002d6 <EPD_1IN54B_V2_SendData>

    EPD_1IN54B_V2_SendCommand(0x11); //data entry mode       
 800038a:	2011      	movs	r0, #17
 800038c:	f7ff ff7f 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0x01);
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ffa0 	bl	80002d6 <EPD_1IN54B_V2_SendData>

    EPD_1IN54B_V2_SendCommand(0x44); //set Ram-X address start/end position   
 8000396:	2044      	movs	r0, #68	; 0x44
 8000398:	f7ff ff79 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0x00);
 800039c:	2000      	movs	r0, #0
 800039e:	f7ff ff9a 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendData(0x18);    //0x18-->(24+1)*8=200
 80003a2:	2018      	movs	r0, #24
 80003a4:	f7ff ff97 	bl	80002d6 <EPD_1IN54B_V2_SendData>

    EPD_1IN54B_V2_SendCommand(0x45); //set Ram-Y address start/end position          
 80003a8:	2045      	movs	r0, #69	; 0x45
 80003aa:	f7ff ff70 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0xC7);    //0xC7-->(199+1)=200
 80003ae:	20c7      	movs	r0, #199	; 0xc7
 80003b0:	f7ff ff91 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendData(0x00);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff8e 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendData(0x00);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff ff8b 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendData(0x00); 
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff ff88 	bl	80002d6 <EPD_1IN54B_V2_SendData>

    EPD_1IN54B_V2_SendCommand(0x3C); //BorderWavefrom
 80003c6:	203c      	movs	r0, #60	; 0x3c
 80003c8:	f7ff ff61 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0x05);
 80003cc:	2005      	movs	r0, #5
 80003ce:	f7ff ff82 	bl	80002d6 <EPD_1IN54B_V2_SendData>

    EPD_1IN54B_V2_SendCommand(0x18); //Read built-in temperature sensor
 80003d2:	2018      	movs	r0, #24
 80003d4:	f7ff ff5b 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0x80);
 80003d8:	2080      	movs	r0, #128	; 0x80
 80003da:	f7ff ff7c 	bl	80002d6 <EPD_1IN54B_V2_SendData>

    EPD_1IN54B_V2_SendCommand(0x4E);   // set RAM x address count to 0;
 80003de:	204e      	movs	r0, #78	; 0x4e
 80003e0:	f7ff ff55 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0x00);
 80003e4:	2000      	movs	r0, #0
 80003e6:	f7ff ff76 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendCommand(0x4F);   // set RAM y address count to 0X199;    
 80003ea:	204f      	movs	r0, #79	; 0x4f
 80003ec:	f7ff ff4f 	bl	800028e <EPD_1IN54B_V2_SendCommand>
    EPD_1IN54B_V2_SendData(0xC7);
 80003f0:	20c7      	movs	r0, #199	; 0xc7
 80003f2:	f7ff ff70 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_SendData(0x00);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f7ff ff6d 	bl	80002d6 <EPD_1IN54B_V2_SendData>
    EPD_1IN54B_V2_ReadBusy();
 80003fc:	f7ff ff90 	bl	8000320 <EPD_1IN54B_V2_ReadBusy>
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fb1a 	bl	8000a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f814 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000414:	f000 f8d8 	bl	80005c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000418:	f000 f868 	bl	80004ec <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800041c:	f000 f8a4 	bl	8000568 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  EPD_1IN54B_V2_Init();
 8000420:	f7ff ff9c 	bl	800035c <EPD_1IN54B_V2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin (LD3_GPIO_Port,LD3_Pin);
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <main+0x30>)
 8000426:	2108      	movs	r1, #8
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fde9 	bl	8001000 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 800042e:	2064      	movs	r0, #100	; 0x64
 8000430:	f000 fb6c 	bl	8000b0c <HAL_Delay>
	  HAL_GPIO_TogglePin (LD3_GPIO_Port,LD3_Pin);
 8000434:	e7f6      	b.n	8000424 <main+0x1c>
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	48000400 	.word	0x48000400

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b099      	sub	sp, #100	; 0x64
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	242c      	movs	r4, #44	; 0x2c
 8000444:	193b      	adds	r3, r7, r4
 8000446:	0018      	movs	r0, r3
 8000448:	2334      	movs	r3, #52	; 0x34
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f002 fb49 	bl	8002ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000452:	231c      	movs	r3, #28
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	0018      	movs	r0, r3
 8000458:	2310      	movs	r3, #16
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f002 fb41 	bl	8002ae4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	0018      	movs	r0, r3
 8000466:	2318      	movs	r3, #24
 8000468:	001a      	movs	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	f002 fb3a 	bl	8002ae4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	0021      	movs	r1, r4
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2202      	movs	r2, #2
 8000476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2201      	movs	r2, #1
 800047c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2210      	movs	r2, #16
 8000482:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	187b      	adds	r3, r7, r1
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fdd3 	bl	8001038 <HAL_RCC_OscConfig>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000496:	f000 f917 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	211c      	movs	r1, #28
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2207      	movs	r2, #7
 80004a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2100      	movs	r1, #0
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 f943 	bl	8001744 <HAL_RCC_ClockConfig>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004c2:	f000 f901 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2201      	movs	r2, #1
 80004ca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 faa1 	bl	8001a1c <HAL_RCCEx_PeriphCLKConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004de:	f000 f8f3 	bl	80006c8 <Error_Handler>
  }
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b019      	add	sp, #100	; 0x64
 80004e8:	bd90      	pop	{r4, r7, pc}
	...

080004ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_SPI1_Init+0x74>)
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <MX_SPI1_Init+0x78>)
 80004f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_SPI1_Init+0x74>)
 80004f8:	2282      	movs	r2, #130	; 0x82
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_SPI1_Init+0x74>)
 8000506:	22c0      	movs	r2, #192	; 0xc0
 8000508:	0092      	lsls	r2, r2, #2
 800050a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_SPI1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_SPI1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_SPI1_Init+0x74>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_SPI1_Init+0x74>)
 8000522:	2228      	movs	r2, #40	; 0x28
 8000524:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_SPI1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_SPI1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_SPI1_Init+0x74>)
 800053a:	2207      	movs	r2, #7
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_SPI1_Init+0x74>)
 8000546:	2208      	movs	r2, #8
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MX_SPI1_Init+0x74>)
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fb53 	bl	8001bf8 <HAL_SPI_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000556:	f000 f8b7 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000008c 	.word	0x2000008c
 8000564:	40013000 	.word	0x40013000

08000568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <MX_USART1_UART_Init+0x5c>)
 8000570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000574:	22e1      	movs	r2, #225	; 0xe1
 8000576:	0252      	lsls	r2, r2, #9
 8000578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MX_USART1_UART_Init+0x58>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 feb1 	bl	8002314 <HAL_UART_Init>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005b6:	f000 f887 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000f0 	.word	0x200000f0
 80005c4:	40013800 	.word	0x40013800

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b089      	sub	sp, #36	; 0x24
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	240c      	movs	r4, #12
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2314      	movs	r3, #20
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f002 fa83 	bl	8002ae4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005de:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <MX_GPIO_Init+0xf8>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b37      	ldr	r3, [pc, #220]	; (80006c0 <MX_GPIO_Init+0xf8>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	03c9      	lsls	r1, r1, #15
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <MX_GPIO_Init+0xf8>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	03db      	lsls	r3, r3, #15
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_GPIO_Init+0xf8>)
 80005fc:	695a      	ldr	r2, [r3, #20]
 80005fe:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_GPIO_Init+0xf8>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0289      	lsls	r1, r1, #10
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <MX_GPIO_Init+0xf8>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	4013      	ands	r3, r2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xf8>)
 8000618:	695a      	ldr	r2, [r3, #20]
 800061a:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <MX_GPIO_Init+0xf8>)
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	02c9      	lsls	r1, r1, #11
 8000620:	430a      	orrs	r2, r1
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <MX_GPIO_Init+0xf8>)
 8000626:	695a      	ldr	r2, [r3, #20]
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	02db      	lsls	r3, r3, #11
 800062c:	4013      	ands	r3, r2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000632:	2390      	movs	r3, #144	; 0x90
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2200      	movs	r2, #0
 8000638:	2116      	movs	r1, #22
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fcc3 	bl	8000fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_GPIO_Init+0xfc>)
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fcbd 	bl	8000fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2216      	movs	r2, #22
 8000650:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2201      	movs	r2, #1
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	193a      	adds	r2, r7, r4
 8000666:	2390      	movs	r3, #144	; 0x90
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fb25 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2208      	movs	r2, #8
 8000676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000684:	193a      	adds	r2, r7, r4
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fb15 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000692:	0021      	movs	r1, r4
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2208      	movs	r2, #8
 8000698:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2203      	movs	r2, #3
 80006aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <MX_GPIO_Init+0xfc>)
 80006b0:	0019      	movs	r1, r3
 80006b2:	0010      	movs	r0, r2
 80006b4:	f000 fb02 	bl	8000cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000400 	.word	0x48000400

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	699a      	ldr	r2, [r3, #24]
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	619a      	str	r2, [r3, #24]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	69da      	ldr	r2, [r3, #28]
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	0549      	lsls	r1, r1, #21
 80006fc:	430a      	orrs	r2, r1
 80006fe:	61da      	str	r2, [r3, #28]
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_MspInit+0x44>)
 8000702:	69da      	ldr	r2, [r3, #28]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	055b      	lsls	r3, r3, #21
 8000708:	4013      	ands	r3, r2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08b      	sub	sp, #44	; 0x2c
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	2414      	movs	r4, #20
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0018      	movs	r0, r3
 800072a:	2314      	movs	r3, #20
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f002 f9d8 	bl	8002ae4 <memset>
  if(hspi->Instance==SPI1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <HAL_SPI_MspInit+0x90>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d132      	bne.n	80007a4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_SPI_MspInit+0x94>)
 8000740:	699a      	ldr	r2, [r3, #24]
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_SPI_MspInit+0x94>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	0149      	lsls	r1, r1, #5
 8000748:	430a      	orrs	r2, r1
 800074a:	619a      	str	r2, [r3, #24]
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_SPI_MspInit+0x94>)
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	015b      	lsls	r3, r3, #5
 8000754:	4013      	ands	r3, r2
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_SPI_MspInit+0x94>)
 800075c:	695a      	ldr	r2, [r3, #20]
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_SPI_MspInit+0x94>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0289      	lsls	r1, r1, #10
 8000764:	430a      	orrs	r2, r1
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_SPI_MspInit+0x94>)
 800076a:	695a      	ldr	r2, [r3, #20]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	029b      	lsls	r3, r3, #10
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000776:	0021      	movs	r1, r4
 8000778:	187b      	adds	r3, r7, r1
 800077a:	22a0      	movs	r2, #160	; 0xa0
 800077c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2202      	movs	r2, #2
 8000782:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2203      	movs	r2, #3
 800078e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	187a      	adds	r2, r7, r1
 8000798:	2390      	movs	r3, #144	; 0x90
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fa8c 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b00b      	add	sp, #44	; 0x2c
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	40013000 	.word	0x40013000
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	2414      	movs	r4, #20
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	0018      	movs	r0, r3
 80007c2:	2314      	movs	r3, #20
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f002 f98c 	bl	8002ae4 <memset>
  if(huart->Instance==USART1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <HAL_UART_MspInit+0x94>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d133      	bne.n	800083e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <HAL_UART_MspInit+0x98>)
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_UART_MspInit+0x98>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	01c9      	lsls	r1, r1, #7
 80007e0:	430a      	orrs	r2, r1
 80007e2:	619a      	str	r2, [r3, #24]
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_UART_MspInit+0x98>)
 80007e6:	699a      	ldr	r2, [r3, #24]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	01db      	lsls	r3, r3, #7
 80007ec:	4013      	ands	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_UART_MspInit+0x98>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_UART_MspInit+0x98>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0289      	lsls	r1, r1, #10
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_UART_MspInit+0x98>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	029b      	lsls	r3, r3, #10
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	22c0      	movs	r2, #192	; 0xc0
 8000812:	00d2      	lsls	r2, r2, #3
 8000814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2202      	movs	r2, #2
 800081c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2203      	movs	r2, #3
 8000828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	187a      	adds	r2, r7, r1
 8000832:	2390      	movs	r3, #144	; 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fa3f 	bl	8000cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	b00b      	add	sp, #44	; 0x2c
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40013800 	.word	0x40013800
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000874:	f000 f92e 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e00a      	b.n	80008a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000890:	e000      	b.n	8000894 <_read+0x16>
 8000892:	bf00      	nop
 8000894:	0001      	movs	r1, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	60ba      	str	r2, [r7, #8]
 800089c:	b2ca      	uxtb	r2, r1
 800089e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbf0      	blt.n	8000890 <_read+0x12>
  }

  return len;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b006      	add	sp, #24
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e009      	b.n	80008de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	60ba      	str	r2, [r7, #8]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	e000      	b.n	80008d8 <_write+0x20>
 80008d6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	3301      	adds	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	dbf1      	blt.n	80008ca <_write+0x12>
  }
  return len;
 80008e6:	687b      	ldr	r3, [r7, #4]
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b006      	add	sp, #24
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_close>:

int _close(int file)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	425b      	negs	r3, r3
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	0192      	lsls	r2, r2, #6
 8000914:	605a      	str	r2, [r3, #4]
  return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <_isatty>:

int _isatty(int file)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000928:	2301      	movs	r3, #1
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}

08000932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b084      	sub	sp, #16
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	b004      	add	sp, #16
 8000946:	bd80      	pop	{r7, pc}

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000978:	f002 f88a 	bl	8002a90 <__errno>
 800097c:	0003      	movs	r3, r0
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000982:	2301      	movs	r3, #1
 8000984:	425b      	negs	r3, r3
 8000986:	e009      	b.n	800099c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	18d2      	adds	r2, r2, r3
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <_sbrk+0x64>)
 8000998:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b006      	add	sp, #24
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20001800 	.word	0x20001800
 80009a8:	00000400 	.word	0x00000400
 80009ac:	20000178 	.word	0x20000178
 80009b0:	20000190 	.word	0x20000190

080009b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c4:	f7ff fff6 	bl	80009b4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <LoopForever+0x6>)
    LDR R1, [R0]
 80009ca:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009cc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <LoopForever+0xa>)
    CMP R1, R2
 80009d0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009d2:	d105      	bne.n	80009e0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009d6:	4912      	ldr	r1, [pc, #72]	; (8000a20 <LoopForever+0x12>)
    STR R1, [R0]
 80009d8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009dc:	4912      	ldr	r1, [pc, #72]	; (8000a28 <LoopForever+0x1a>)
    STR R1, [R0]
 80009de:	6001      	str	r1, [r0, #0]

080009e0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	4812      	ldr	r0, [pc, #72]	; (8000a2c <LoopForever+0x1e>)
  ldr r1, =_edata
 80009e2:	4913      	ldr	r1, [pc, #76]	; (8000a30 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <LoopForever+0x26>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009f8:	4c10      	ldr	r4, [pc, #64]	; (8000a3c <LoopForever+0x2e>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f002 f849 	bl	8002a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff fcfd 	bl	8000408 <main>

08000a0e <LoopForever>:

LoopForever:
    b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a14:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a18:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a1c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a20:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a24:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a28:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a34:	0800367c 	.word	0x0800367c
  ldr r2, =_sbss
 8000a38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a3c:	20000190 	.word	0x20000190

08000a40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_IRQHandler>
	...

08000a44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_Init+0x24>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_Init+0x24>)
 8000a4e:	2110      	movs	r1, #16
 8000a50:	430a      	orrs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f809 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5a:	f7ff fe3b 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	0018      	movs	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_InitTick+0x60>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	23fa      	movs	r3, #250	; 0xfa
 8000a80:	0098      	lsls	r0, r3, #2
 8000a82:	f7ff fb41 	bl	8000108 <__udivsi3>
 8000a86:	0003      	movs	r3, r0
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f7ff fb3c 	bl	8000108 <__udivsi3>
 8000a90:	0003      	movs	r3, r0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f905 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e00f      	b.n	8000ac0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d80b      	bhi.n	8000abe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	425b      	negs	r3, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f8e2 	bl	8000c78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_InitTick+0x64>)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b003      	add	sp, #12
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	001a      	movs	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	18d2      	adds	r2, r2, r3
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000008 	.word	0x20000008
 8000af4:	2000017c 	.word	0x2000017c

08000af8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	2000017c 	.word	0x2000017c

08000b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff0 	bl	8000af8 <HAL_GetTick>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	d005      	beq.n	8000b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_Delay+0x44>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	189b      	adds	r3, r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	f7ff ffe0 	bl	8000af8 <HAL_GetTick>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d8f7      	bhi.n	8000b34 <HAL_Delay+0x28>
  {
  }
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b7f      	cmp	r3, #127	; 0x7f
 8000b68:	d828      	bhi.n	8000bbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <__NVIC_SetPriority+0xd4>)
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	33c0      	adds	r3, #192	; 0xc0
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	589b      	ldr	r3, [r3, r2]
 8000b7a:	1dfa      	adds	r2, r7, #7
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	0011      	movs	r1, r2
 8000b80:	2203      	movs	r2, #3
 8000b82:	400a      	ands	r2, r1
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	21ff      	movs	r1, #255	; 0xff
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	43d2      	mvns	r2, r2
 8000b8e:	401a      	ands	r2, r3
 8000b90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	019b      	lsls	r3, r3, #6
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	401a      	ands	r2, r3
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	4003      	ands	r3, r0
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba8:	481f      	ldr	r0, [pc, #124]	; (8000c28 <__NVIC_SetPriority+0xd4>)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	33c0      	adds	r3, #192	; 0xc0
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bba:	e031      	b.n	8000c20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <__NVIC_SetPriority+0xd8>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	3b08      	subs	r3, #8
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3306      	adds	r3, #6
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	1dfa      	adds	r2, r7, #7
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	0011      	movs	r1, r2
 8000bdc:	2203      	movs	r2, #3
 8000bde:	400a      	ands	r2, r1
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	21ff      	movs	r1, #255	; 0xff
 8000be4:	4091      	lsls	r1, r2
 8000be6:	000a      	movs	r2, r1
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	019b      	lsls	r3, r3, #6
 8000bf2:	22ff      	movs	r2, #255	; 0xff
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	4003      	ands	r3, r0
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <__NVIC_SetPriority+0xd8>)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	001c      	movs	r4, r3
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	4023      	ands	r3, r4
 8000c10:	3b08      	subs	r3, #8
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	430a      	orrs	r2, r1
 8000c16:	3306      	adds	r3, #6
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	18c3      	adds	r3, r0, r3
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b003      	add	sp, #12
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	045b      	lsls	r3, r3, #17
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d301      	bcc.n	8000c48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c44:	2301      	movs	r3, #1
 8000c46:	e010      	b.n	8000c6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <SysTick_Config+0x44>)
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	2103      	movs	r1, #3
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff ff7c 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x44>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x44>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	210f      	movs	r1, #15
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	1c02      	adds	r2, r0, #0
 8000c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b004      	add	sp, #16
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff ffbf 	bl	8000c30 <SysTick_Config>
 8000cb2:	0003      	movs	r3, r0
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e149      	b.n	8000f60 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <HAL_GPIO_Init+0x28>
 8000ce2:	e13a      	b.n	8000f5a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2203      	movs	r2, #3
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	43da      	mvns	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	2201      	movs	r2, #1
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2203      	movs	r2, #3
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2203      	movs	r2, #3
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	58d3      	ldr	r3, [r2, r3]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2207      	movs	r2, #7
 8000db8:	4013      	ands	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	400b      	ands	r3, r1
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	409a      	lsls	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	6939      	ldr	r1, [r7, #16]
 8000dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	23c0      	movs	r3, #192	; 0xc0
 8000e28:	029b      	lsls	r3, r3, #10
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <HAL_GPIO_Init+0x174>
 8000e2e:	e094      	b.n	8000f5a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e32:	699a      	ldr	r2, [r3, #24]
 8000e34:	4b50      	ldr	r3, [pc, #320]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	619a      	str	r2, [r3, #24]
 8000e3c:	4b4e      	ldr	r3, [pc, #312]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4013      	ands	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e48:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	589b      	ldr	r3, [r3, r2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	2390      	movs	r3, #144	; 0x90
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x1d6>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a41      	ldr	r2, [pc, #260]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x1d2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a40      	ldr	r2, [pc, #256]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x1ce>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e004      	b.n	8000e94 <HAL_GPIO_Init+0x1d8>
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_Init+0x1d8>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x1d8>
 8000e92:	2300      	movs	r3, #0
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	2103      	movs	r1, #3
 8000e98:	400a      	ands	r2, r1
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea4:	4935      	ldr	r1, [pc, #212]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb2:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	035b      	lsls	r3, r3, #13
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	039b      	lsls	r3, r3, #14
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	025b      	lsls	r3, r3, #9
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	40da      	lsrs	r2, r3
 8000f68:	1e13      	subs	r3, r2, #0
 8000f6a:	d000      	beq.n	8000f6e <HAL_GPIO_Init+0x2b2>
 8000f6c:	e6ae      	b.n	8000ccc <HAL_GPIO_Init+0x10>
  } 
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b006      	add	sp, #24
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	40010400 	.word	0x40010400

08000f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	000a      	movs	r2, r1
 8000f96:	1cbb      	adds	r3, r7, #2
 8000f98:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	1cba      	adds	r2, r7, #2
 8000fa0:	8812      	ldrh	r2, [r2, #0]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d004      	beq.n	8000fb0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e003      	b.n	8000fb8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	781b      	ldrb	r3, [r3, #0]
  }
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b004      	add	sp, #16
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	0008      	movs	r0, r1
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	1cbb      	adds	r3, r7, #2
 8000fd4:	1c02      	adds	r2, r0, #0
 8000fd6:	801a      	strh	r2, [r3, #0]
 8000fd8:	1c7b      	adds	r3, r7, #1
 8000fda:	1c0a      	adds	r2, r1, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fde:	1c7b      	adds	r3, r7, #1
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fe6:	1cbb      	adds	r3, r7, #2
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fee:	e003      	b.n	8000ff8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff0:	1cbb      	adds	r3, r7, #2
 8000ff2:	881a      	ldrh	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	000a      	movs	r2, r1
 800100a:	1cbb      	adds	r3, r7, #2
 800100c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001014:	1cbb      	adds	r3, r7, #2
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4013      	ands	r3, r2
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	1cb9      	adds	r1, r7, #2
 8001024:	8809      	ldrh	r1, [r1, #0]
 8001026:	400b      	ands	r3, r1
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f000 fb76 	bl	8001738 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4013      	ands	r3, r2
 8001054:	d100      	bne.n	8001058 <HAL_RCC_OscConfig+0x20>
 8001056:	e08e      	b.n	8001176 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001058:	4bc5      	ldr	r3, [pc, #788]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	220c      	movs	r2, #12
 800105e:	4013      	ands	r3, r2
 8001060:	2b04      	cmp	r3, #4
 8001062:	d00e      	beq.n	8001082 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001064:	4bc2      	ldr	r3, [pc, #776]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	220c      	movs	r2, #12
 800106a:	4013      	ands	r3, r2
 800106c:	2b08      	cmp	r3, #8
 800106e:	d117      	bne.n	80010a0 <HAL_RCC_OscConfig+0x68>
 8001070:	4bbf      	ldr	r3, [pc, #764]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	23c0      	movs	r3, #192	; 0xc0
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	401a      	ands	r2, r3
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	429a      	cmp	r2, r3
 8001080:	d10e      	bne.n	80010a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001082:	4bbb      	ldr	r3, [pc, #748]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	029b      	lsls	r3, r3, #10
 800108a:	4013      	ands	r3, r2
 800108c:	d100      	bne.n	8001090 <HAL_RCC_OscConfig+0x58>
 800108e:	e071      	b.n	8001174 <HAL_RCC_OscConfig+0x13c>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d000      	beq.n	800109a <HAL_RCC_OscConfig+0x62>
 8001098:	e06c      	b.n	8001174 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f000 fb4c 	bl	8001738 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d107      	bne.n	80010b8 <HAL_RCC_OscConfig+0x80>
 80010a8:	4bb1      	ldr	r3, [pc, #708]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4bb0      	ldr	r3, [pc, #704]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0249      	lsls	r1, r1, #9
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e02f      	b.n	8001118 <HAL_RCC_OscConfig+0xe0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10c      	bne.n	80010da <HAL_RCC_OscConfig+0xa2>
 80010c0:	4bab      	ldr	r3, [pc, #684]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4baa      	ldr	r3, [pc, #680]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010c6:	49ab      	ldr	r1, [pc, #684]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	4ba8      	ldr	r3, [pc, #672]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4ba7      	ldr	r3, [pc, #668]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010d2:	49a9      	ldr	r1, [pc, #676]	; (8001378 <HAL_RCC_OscConfig+0x340>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e01e      	b.n	8001118 <HAL_RCC_OscConfig+0xe0>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d10e      	bne.n	8001100 <HAL_RCC_OscConfig+0xc8>
 80010e2:	4ba3      	ldr	r3, [pc, #652]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4ba2      	ldr	r3, [pc, #648]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	02c9      	lsls	r1, r1, #11
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	4b9f      	ldr	r3, [pc, #636]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b9e      	ldr	r3, [pc, #632]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	0249      	lsls	r1, r1, #9
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xe0>
 8001100:	4b9b      	ldr	r3, [pc, #620]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b9a      	ldr	r3, [pc, #616]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001106:	499b      	ldr	r1, [pc, #620]	; (8001374 <HAL_RCC_OscConfig+0x33c>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4b98      	ldr	r3, [pc, #608]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b97      	ldr	r3, [pc, #604]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001112:	4999      	ldr	r1, [pc, #612]	; (8001378 <HAL_RCC_OscConfig+0x340>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d014      	beq.n	800114a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fcea 	bl	8000af8 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112a:	f7ff fce5 	bl	8000af8 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b64      	cmp	r3, #100	; 0x64
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e2fd      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113c:	4b8c      	ldr	r3, [pc, #560]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0xf2>
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fcd5 	bl	8000af8 <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcd0 	bl	8000af8 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e2e8      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b82      	ldr	r3, [pc, #520]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	4013      	ands	r3, r2
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x11c>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d100      	bne.n	8001182 <HAL_RCC_OscConfig+0x14a>
 8001180:	e06c      	b.n	800125c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001182:	4b7b      	ldr	r3, [pc, #492]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	220c      	movs	r2, #12
 8001188:	4013      	ands	r3, r2
 800118a:	d00e      	beq.n	80011aa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800118c:	4b78      	ldr	r3, [pc, #480]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	220c      	movs	r2, #12
 8001192:	4013      	ands	r3, r2
 8001194:	2b08      	cmp	r3, #8
 8001196:	d11f      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1a0>
 8001198:	4b75      	ldr	r3, [pc, #468]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	401a      	ands	r2, r3
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b71      	ldr	r3, [pc, #452]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	d005      	beq.n	80011c0 <HAL_RCC_OscConfig+0x188>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e2bb      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c0:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	22f8      	movs	r2, #248	; 0xf8
 80011c6:	4393      	bics	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00da      	lsls	r2, r3, #3
 80011d0:	4b67      	ldr	r3, [pc, #412]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e041      	b.n	800125c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d024      	beq.n	800122a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b63      	ldr	r3, [pc, #396]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	430a      	orrs	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc84 	bl	8000af8 <HAL_GetTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc7f 	bl	8000af8 <HAL_GetTick>
 80011fa:	0002      	movs	r2, r0
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e297      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2202      	movs	r2, #2
 800120e:	4013      	ands	r3, r2
 8001210:	d0f1      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b57      	ldr	r3, [pc, #348]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	22f8      	movs	r2, #248	; 0xf8
 8001218:	4393      	bics	r3, r2
 800121a:	0019      	movs	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	00da      	lsls	r2, r3, #3
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e018      	b.n	800125c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b51      	ldr	r3, [pc, #324]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fc5f 	bl	8000af8 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fc5a 	bl	8000af8 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e272      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d1f1      	bne.n	8001240 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2208      	movs	r2, #8
 8001262:	4013      	ands	r3, r2
 8001264:	d036      	beq.n	80012d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b40      	ldr	r3, [pc, #256]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fc3d 	bl	8000af8 <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fc38 	bl	8000af8 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e250      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	2202      	movs	r2, #2
 800129c:	4013      	ands	r3, r2
 800129e:	d0f1      	beq.n	8001284 <HAL_RCC_OscConfig+0x24c>
 80012a0:	e018      	b.n	80012d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80012a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a6:	4b32      	ldr	r3, [pc, #200]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	438a      	bics	r2, r1
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ae:	f7ff fc23 	bl	8000af8 <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fc1e 	bl	8000af8 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e236      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	2202      	movs	r2, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d1f1      	bne.n	80012b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2204      	movs	r2, #4
 80012da:	4013      	ands	r3, r2
 80012dc:	d100      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2a8>
 80012de:	e0b5      	b.n	800144c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e0:	201f      	movs	r0, #31
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	055b      	lsls	r3, r3, #21
 80012f0:	4013      	ands	r3, r2
 80012f2:	d110      	bne.n	8001316 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0549      	lsls	r1, r1, #21
 80012fe:	430a      	orrs	r2, r1
 8001300:	61da      	str	r2, [r3, #28]
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001304:	69da      	ldr	r2, [r3, #28]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	055b      	lsls	r3, r3, #21
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001310:	183b      	adds	r3, r7, r0
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_OscConfig+0x344>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4013      	ands	r3, r2
 8001320:	d11a      	bne.n	8001358 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_RCC_OscConfig+0x344>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_RCC_OscConfig+0x344>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0049      	lsls	r1, r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001330:	f7ff fbe2 	bl	8000af8 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7ff fbdd 	bl	8000af8 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	; 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e1f5      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x344>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d10f      	bne.n	8001380 <HAL_RCC_OscConfig+0x348>
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001362:	6a1a      	ldr	r2, [r3, #32]
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <HAL_RCC_OscConfig+0x338>)
 8001366:	2101      	movs	r1, #1
 8001368:	430a      	orrs	r2, r1
 800136a:	621a      	str	r2, [r3, #32]
 800136c:	e036      	b.n	80013dc <HAL_RCC_OscConfig+0x3a4>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40021000 	.word	0x40021000
 8001374:	fffeffff 	.word	0xfffeffff
 8001378:	fffbffff 	.word	0xfffbffff
 800137c:	40007000 	.word	0x40007000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x36a>
 8001388:	4bca      	ldr	r3, [pc, #808]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	4bc9      	ldr	r3, [pc, #804]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	621a      	str	r2, [r3, #32]
 8001394:	4bc7      	ldr	r3, [pc, #796]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4bc6      	ldr	r3, [pc, #792]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800139a:	2104      	movs	r1, #4
 800139c:	438a      	bics	r2, r1
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	e01c      	b.n	80013dc <HAL_RCC_OscConfig+0x3a4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x38c>
 80013aa:	4bc2      	ldr	r3, [pc, #776]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013ac:	6a1a      	ldr	r2, [r3, #32]
 80013ae:	4bc1      	ldr	r3, [pc, #772]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	2104      	movs	r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	621a      	str	r2, [r3, #32]
 80013b6:	4bbf      	ldr	r3, [pc, #764]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013b8:	6a1a      	ldr	r2, [r3, #32]
 80013ba:	4bbe      	ldr	r3, [pc, #760]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	621a      	str	r2, [r3, #32]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0x3a4>
 80013c4:	4bbb      	ldr	r3, [pc, #748]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	4bba      	ldr	r3, [pc, #744]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	438a      	bics	r2, r1
 80013ce:	621a      	str	r2, [r3, #32]
 80013d0:	4bb8      	ldr	r3, [pc, #736]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	4bb7      	ldr	r3, [pc, #732]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	2104      	movs	r1, #4
 80013d8:	438a      	bics	r2, r1
 80013da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d014      	beq.n	800140e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fb88 	bl	8000af8 <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	e009      	b.n	8001402 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fb83 	bl	8000af8 <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4aaf      	ldr	r2, [pc, #700]	; (80016b8 <HAL_RCC_OscConfig+0x680>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e19a      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001402:	4bac      	ldr	r3, [pc, #688]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	2202      	movs	r2, #2
 8001408:	4013      	ands	r3, r2
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x3b6>
 800140c:	e013      	b.n	8001436 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fb73 	bl	8000af8 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	e009      	b.n	800142c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f7ff fb6e 	bl	8000af8 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	4aa5      	ldr	r2, [pc, #660]	; (80016b8 <HAL_RCC_OscConfig+0x680>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e185      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	4ba1      	ldr	r3, [pc, #644]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001436:	231f      	movs	r3, #31
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001440:	4b9c      	ldr	r3, [pc, #624]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	4b9b      	ldr	r3, [pc, #620]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001446:	499d      	ldr	r1, [pc, #628]	; (80016bc <HAL_RCC_OscConfig+0x684>)
 8001448:	400a      	ands	r2, r1
 800144a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2210      	movs	r2, #16
 8001452:	4013      	ands	r3, r2
 8001454:	d063      	beq.n	800151e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d12a      	bne.n	80014b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800145e:	4b95      	ldr	r3, [pc, #596]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001462:	4b94      	ldr	r3, [pc, #592]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001464:	2104      	movs	r1, #4
 8001466:	430a      	orrs	r2, r1
 8001468:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800146a:	4b92      	ldr	r3, [pc, #584]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	4b91      	ldr	r3, [pc, #580]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001470:	2101      	movs	r1, #1
 8001472:	430a      	orrs	r2, r1
 8001474:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fb3f 	bl	8000af8 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001480:	f7ff fb3a 	bl	8000af8 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e152      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001492:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d0f1      	beq.n	8001480 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800149c:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	22f8      	movs	r2, #248	; 0xf8
 80014a2:	4393      	bics	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	00da      	lsls	r2, r3, #3
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
 80014b2:	e034      	b.n	800151e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	3305      	adds	r3, #5
 80014ba:	d111      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014bc:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c0:	4b7c      	ldr	r3, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	438a      	bics	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014c8:	4b7a      	ldr	r3, [pc, #488]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	22f8      	movs	r2, #248	; 0xf8
 80014ce:	4393      	bics	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	00da      	lsls	r2, r3, #3
 80014d8:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014da:	430a      	orrs	r2, r1
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
 80014de:	e01e      	b.n	800151e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014e0:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e4:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	2104      	movs	r1, #4
 80014e8:	430a      	orrs	r2, r1
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014ec:	4b71      	ldr	r3, [pc, #452]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f0:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fafe 	bl	8000af8 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001502:	f7ff faf9 	bl	8000af8 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e111      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001514:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d1f1      	bne.n	8001502 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2220      	movs	r2, #32
 8001524:	4013      	ands	r3, r2
 8001526:	d05c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001528:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	220c      	movs	r2, #12
 800152e:	4013      	ands	r3, r2
 8001530:	2b0c      	cmp	r3, #12
 8001532:	d00e      	beq.n	8001552 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001534:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	220c      	movs	r2, #12
 800153a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800153c:	2b08      	cmp	r3, #8
 800153e:	d114      	bne.n	800156a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001540:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	23c0      	movs	r3, #192	; 0xc0
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	401a      	ands	r2, r3
 800154a:	23c0      	movs	r3, #192	; 0xc0
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	429a      	cmp	r2, r3
 8001550:	d10b      	bne.n	800156a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001552:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	029b      	lsls	r3, r3, #10
 800155a:	4013      	ands	r3, r2
 800155c:	d040      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5a8>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d03c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0e6      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01b      	beq.n	80015aa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001572:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001576:	4b4f      	ldr	r3, [pc, #316]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0249      	lsls	r1, r1, #9
 800157c:	430a      	orrs	r2, r1
 800157e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff faba 	bl	8000af8 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158a:	f7ff fab5 	bl	8000af8 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0cd      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	029b      	lsls	r3, r3, #10
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x552>
 80015a8:	e01b      	b.n	80015e2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015aa:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	4943      	ldr	r1, [pc, #268]	; (80016c0 <HAL_RCC_OscConfig+0x688>)
 80015b2:	400a      	ands	r2, r1
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fa9f 	bl	8000af8 <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff fa9a 	bl	8000af8 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0b2      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x588>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015e0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d100      	bne.n	80015ec <HAL_RCC_OscConfig+0x5b4>
 80015ea:	e0a4      	b.n	8001736 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	220c      	movs	r2, #12
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d100      	bne.n	80015fa <HAL_RCC_OscConfig+0x5c2>
 80015f8:	e078      	b.n	80016ec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d14c      	bne.n	800169c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001608:	492e      	ldr	r1, [pc, #184]	; (80016c4 <HAL_RCC_OscConfig+0x68c>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fa73 	bl	8000af8 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa6e 	bl	8000af8 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e086      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	220f      	movs	r2, #15
 800163c:	4393      	bics	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001646:	430a      	orrs	r2, r1
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <HAL_RCC_OscConfig+0x690>)
 8001650:	4013      	ands	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	431a      	orrs	r2, r3
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001660:	430a      	orrs	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	0449      	lsls	r1, r1, #17
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa41 	bl	8000af8 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa3c 	bl	8000af8 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e054      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	049b      	lsls	r3, r3, #18
 8001696:	4013      	ands	r3, r2
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x644>
 800169a:	e04c      	b.n	8001736 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <HAL_RCC_OscConfig+0x68c>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa26 	bl	8000af8 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x6a6>
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000
 80016b8:	00001388 	.word	0x00001388
 80016bc:	efffffff 	.word	0xefffffff
 80016c0:	fffeffff 	.word	0xfffeffff
 80016c4:	feffffff 	.word	0xfeffffff
 80016c8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fa14 	bl	8000af8 <HAL_GetTick>
 80016d0:	0002      	movs	r2, r0
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e02c      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_RCC_OscConfig+0x708>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	049b      	lsls	r3, r3, #18
 80016e6:	4013      	ands	r3, r2
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x694>
 80016ea:	e024      	b.n	8001736 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e01f      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_RCC_OscConfig+0x708>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x708>)
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	23c0      	movs	r3, #192	; 0xc0
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	429a      	cmp	r2, r3
 8001712:	d10e      	bne.n	8001732 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	220f      	movs	r2, #15
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	23f0      	movs	r3, #240	; 0xf0
 8001726:	039b      	lsls	r3, r3, #14
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	b008      	add	sp, #32
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0bf      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d911      	bls.n	800178a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0a6      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d015      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	4013      	ands	r3, r2
 800179c:	d006      	beq.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800179e:	4b51      	ldr	r3, [pc, #324]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017a4:	21e0      	movs	r1, #224	; 0xe0
 80017a6:	00c9      	lsls	r1, r1, #3
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	22f0      	movs	r2, #240	; 0xf0
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d04c      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	029b      	lsls	r3, r3, #10
 80017da:	4013      	ands	r3, r2
 80017dc:	d120      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07a      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	049b      	lsls	r3, r3, #18
 80017f2:	4013      	ands	r3, r2
 80017f4:	d114      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06e      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	4013      	ands	r3, r2
 800180c:	d108      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e062      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e05b      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff f960 	bl	8000af8 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183c:	e009      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7ff f95b 	bl	8000af8 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <HAL_RCC_ClockConfig+0x1a4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e042      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	220c      	movs	r2, #12
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1ec      	bne.n	800183e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d211      	bcs.n	8001896 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4393      	bics	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x19c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e020      	b.n	80018d8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2204      	movs	r2, #4
 800189c:	4013      	ands	r3, r2
 800189e:	d009      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_RCC_ClockConfig+0x1a8>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018b4:	f000 f820 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b8:	0001      	movs	r1, r0
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	220f      	movs	r2, #15
 80018c2:	4013      	ands	r3, r2
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1ac>)
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	000a      	movs	r2, r1
 80018ca:	40da      	lsrs	r2, r3
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1b0>)
 80018ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f7ff f8cb 	bl	8000a6c <HAL_InitTick>
  
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	00001388 	.word	0x00001388
 80018ec:	fffff8ff 	.word	0xfffff8ff
 80018f0:	080035d8 	.word	0x080035d8
 80018f4:	20000000 	.word	0x20000000

080018f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	220c      	movs	r2, #12
 800191c:	4013      	ands	r3, r2
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d046      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001922:	d848      	bhi.n	80019b6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001924:	2b04      	cmp	r3, #4
 8001926:	d002      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x36>
 8001928:	2b08      	cmp	r3, #8
 800192a:	d003      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x3c>
 800192c:	e043      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001930:	613b      	str	r3, [r7, #16]
      break;
 8001932:	e043      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	220f      	movs	r2, #15
 800193a:	4013      	ands	r3, r2
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	220f      	movs	r2, #15
 8001948:	4013      	ands	r3, r2
 800194a:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	025b      	lsls	r3, r3, #9
 8001956:	401a      	ands	r2, r3
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	429a      	cmp	r2, r3
 800195e:	d109      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	481a      	ldr	r0, [pc, #104]	; (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8001964:	f7fe fbd0 	bl	8000108 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4353      	muls	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e01a      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	23c0      	movs	r3, #192	; 0xc0
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	401a      	ands	r2, r3
 800197c:	23c0      	movs	r3, #192	; 0xc0
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	429a      	cmp	r2, r3
 8001982:	d109      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4814      	ldr	r0, [pc, #80]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001988:	f7fe fbbe 	bl	8000108 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4353      	muls	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e008      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 800199c:	f7fe fbb4 	bl	8000108 <__udivsi3>
 80019a0:	0003      	movs	r3, r0
 80019a2:	001a      	movs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4353      	muls	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	613b      	str	r3, [r7, #16]
      break;
 80019ae:	e005      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80019b2:	613b      	str	r3, [r7, #16]
      break;
 80019b4:	e002      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetSysClockFreq+0xd4>)
 80019b8:	613b      	str	r3, [r7, #16]
      break;
 80019ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019bc:	693b      	ldr	r3, [r7, #16]
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b006      	add	sp, #24
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	080035f0 	.word	0x080035f0
 80019d4:	08003600 	.word	0x08003600
 80019d8:	02dc6c00 	.word	0x02dc6c00

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <HAL_RCC_GetHCLKFreq+0x10>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	20000000 	.word	0x20000000

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019f4:	f7ff fff2 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019f8:	0001      	movs	r1, r0
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	2207      	movs	r2, #7
 8001a02:	4013      	ands	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a06:	5cd3      	ldrb	r3, [r2, r3]
 8001a08:	40d9      	lsrs	r1, r3
 8001a0a:	000b      	movs	r3, r1
}    
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000
 8001a18:	080035e8 	.word	0x080035e8

08001a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	025b      	lsls	r3, r3, #9
 8001a34:	4013      	ands	r3, r2
 8001a36:	d100      	bne.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a38:	e08e      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2017      	movs	r0, #23
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a44:	69da      	ldr	r2, [r3, #28]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	055b      	lsls	r3, r3, #21
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d110      	bne.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0549      	lsls	r1, r1, #21
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	61da      	str	r2, [r3, #28]
 8001a5c:	4b60      	ldr	r3, [pc, #384]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a5e:	69da      	ldr	r2, [r3, #28]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d11a      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b58      	ldr	r3, [pc, #352]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	0049      	lsls	r1, r1, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f835 	bl	8000af8 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	e008      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a94:	f7ff f830 	bl	8000af8 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e097      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	23c0      	movs	r3, #192	; 0xc0
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d034      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	23c0      	movs	r3, #192	; 0xc0
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d02c      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001aee:	6a1a      	ldr	r2, [r3, #32]
 8001af0:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001af2:	493e      	ldr	r1, [pc, #248]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7fe fff7 	bl	8000af8 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	e009      	b.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7fe fff2 	bl	8000af8 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e058      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a2d      	ldr	r2, [pc, #180]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b42:	2317      	movs	r3, #23
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b4e:	69da      	ldr	r2, [r3, #28]
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b52:	4928      	ldr	r1, [pc, #160]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d009      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	2203      	movs	r2, #3
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	2210      	movs	r2, #16
 8001b86:	4393      	bics	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	4393      	bics	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b006      	add	sp, #24
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
 8001be8:	fffffcff 	.word	0xfffffcff
 8001bec:	fffeffff 	.word	0xfffeffff
 8001bf0:	00001388 	.word	0x00001388
 8001bf4:	efffffff 	.word	0xefffffff

08001bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0a8      	b.n	8001d5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	2382      	movs	r3, #130	; 0x82
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d009      	beq.n	8001c32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
 8001c24:	e005      	b.n	8001c32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	225d      	movs	r2, #93	; 0x5d
 8001c3c:	5c9b      	ldrb	r3, [r3, r2]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	225c      	movs	r2, #92	; 0x5c
 8001c48:	2100      	movs	r1, #0
 8001c4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7fe fd64 	bl	800071c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	225d      	movs	r2, #93	; 0x5d
 8001c58:	2102      	movs	r1, #2
 8001c5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	438a      	bics	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	23e0      	movs	r3, #224	; 0xe0
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d902      	bls.n	8001c7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e002      	b.n	8001c84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	015b      	lsls	r3, r3, #5
 8001c82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	23f0      	movs	r3, #240	; 0xf0
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d008      	beq.n	8001ca2 <HAL_SPI_Init+0xaa>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	23e0      	movs	r3, #224	; 0xe0
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d002      	beq.n	8001ca2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	2382      	movs	r3, #130	; 0x82
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	401a      	ands	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6899      	ldr	r1, [r3, #8]
 8001cb0:	2384      	movs	r3, #132	; 0x84
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	400b      	ands	r3, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6999      	ldr	r1, [r3, #24]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2138      	movs	r1, #56	; 0x38
 8001cde:	400b      	ands	r3, r1
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	400b      	ands	r3, r1
 8001cea:	431a      	orrs	r2, r3
 8001cec:	0011      	movs	r1, r2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	2204      	movs	r2, #4
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2110      	movs	r1, #16
 8001d10:	400b      	ands	r3, r1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	2108      	movs	r1, #8
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68d9      	ldr	r1, [r3, #12]
 8001d22:	23f0      	movs	r3, #240	; 0xf0
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	400b      	ands	r3, r1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	015b      	lsls	r3, r3, #5
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4907      	ldr	r1, [pc, #28]	; (8001d64 <HAL_SPI_Init+0x16c>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	225d      	movs	r2, #93	; 0x5d
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b004      	add	sp, #16
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	fffff7ff 	.word	0xfffff7ff

08001d68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	1dbb      	adds	r3, r7, #6
 8001d76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d78:	231f      	movs	r3, #31
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	225c      	movs	r2, #92	; 0x5c
 8001d84:	5c9b      	ldrb	r3, [r3, r2]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_SPI_Transmit+0x26>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e147      	b.n	800201e <HAL_SPI_Transmit+0x2b6>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	225c      	movs	r2, #92	; 0x5c
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d96:	f7fe feaf 	bl	8000af8 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d9e:	2316      	movs	r3, #22
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	1dba      	adds	r2, r7, #6
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	225d      	movs	r2, #93	; 0x5d
 8001dac:	5c9b      	ldrb	r3, [r3, r2]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d004      	beq.n	8001dbe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001db4:	231f      	movs	r3, #31
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2202      	movs	r2, #2
 8001dba:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dbc:	e128      	b.n	8002010 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_SPI_Transmit+0x64>
 8001dc4:	1dbb      	adds	r3, r7, #6
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d104      	bne.n	8001dd6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001dcc:	231f      	movs	r3, #31
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dd4:	e11c      	b.n	8002010 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	225d      	movs	r2, #93	; 0x5d
 8001dda:	2103      	movs	r1, #3
 8001ddc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1dba      	adds	r2, r7, #6
 8001dee:	8812      	ldrh	r2, [r2, #0]
 8001df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1dba      	adds	r2, r7, #6
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2244      	movs	r2, #68	; 0x44
 8001e04:	2100      	movs	r1, #0
 8001e06:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2246      	movs	r2, #70	; 0x46
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d110      	bne.n	8001e4a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	01c9      	lsls	r1, r1, #7
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2240      	movs	r2, #64	; 0x40
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d007      	beq.n	8001e68 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	23e0      	movs	r3, #224	; 0xe0
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d952      	bls.n	8001f1a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_SPI_Transmit+0x11e>
 8001e7c:	2316      	movs	r3, #22
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d143      	bne.n	8001f0e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	1c9a      	adds	r2, r3, #2
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001eaa:	e030      	b.n	8001f0e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d112      	bne.n	8001ee0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	1c9a      	adds	r2, r3, #2
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ede:	e016      	b.n	8001f0e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee0:	f7fe fe0a 	bl	8000af8 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d802      	bhi.n	8001ef6 <HAL_SPI_Transmit+0x18e>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_SPI_Transmit+0x194>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d108      	bne.n	8001f0e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001efc:	231f      	movs	r3, #31
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2203      	movs	r2, #3
 8001f02:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	225d      	movs	r2, #93	; 0x5d
 8001f08:	2101      	movs	r1, #1
 8001f0a:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f0c:	e080      	b.n	8002010 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1c9      	bne.n	8001eac <HAL_SPI_Transmit+0x144>
 8001f18:	e053      	b.n	8001fc2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <HAL_SPI_Transmit+0x1c4>
 8001f22:	2316      	movs	r3, #22
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d145      	bne.n	8001fb8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	330c      	adds	r3, #12
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001f52:	e031      	b.n	8001fb8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d113      	bne.n	8001f8a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	330c      	adds	r3, #12
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f88:	e016      	b.n	8001fb8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f8a:	f7fe fdb5 	bl	8000af8 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d802      	bhi.n	8001fa0 <HAL_SPI_Transmit+0x238>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <HAL_SPI_Transmit+0x23e>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001fa6:	231f      	movs	r3, #31
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2203      	movs	r2, #3
 8001fac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	225d      	movs	r2, #93	; 0x5d
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
          goto error;
 8001fb6:	e02b      	b.n	8002010 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1c8      	bne.n	8001f54 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f95d 	bl	8002288 <SPI_EndRxTxTransaction>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001ffe:	231f      	movs	r3, #31
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e003      	b.n	8002010 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	225d      	movs	r2, #93	; 0x5d
 800200c:	2101      	movs	r1, #1
 800200e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	225c      	movs	r2, #92	; 0x5c
 8002014:	2100      	movs	r1, #0
 8002016:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b008      	add	sp, #32
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002038:	f7fe fd5e 	bl	8000af8 <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	18d3      	adds	r3, r2, r3
 8002046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002048:	f7fe fd56 	bl	8000af8 <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002050:	4b3a      	ldr	r3, [pc, #232]	; (800213c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	0d1b      	lsrs	r3, r3, #20
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	4353      	muls	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800205e:	e058      	b.n	8002112 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	d055      	beq.n	8002112 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002066:	f7fe fd47 	bl	8000af8 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	429a      	cmp	r2, r3
 8002074:	d902      	bls.n	800207c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d142      	bne.n	8002102 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	21e0      	movs	r1, #224	; 0xe0
 8002088:	438a      	bics	r2, r1
 800208a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2382      	movs	r3, #130	; 0x82
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	429a      	cmp	r2, r3
 8002096:	d113      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d005      	beq.n	80020b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	438a      	bics	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	019b      	lsls	r3, r3, #6
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d110      	bne.n	80020ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	491a      	ldr	r1, [pc, #104]	; (8002140 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80020d8:	400a      	ands	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	0189      	lsls	r1, r1, #6
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	225d      	movs	r2, #93	; 0x5d
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	225c      	movs	r2, #92	; 0x5c
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e017      	b.n	8002132 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3b01      	subs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	4013      	ands	r3, r2
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	425a      	negs	r2, r3
 8002122:	4153      	adcs	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	001a      	movs	r2, r3
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d197      	bne.n	8002060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b008      	add	sp, #32
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	20000000 	.word	0x20000000
 8002140:	ffffdfff 	.word	0xffffdfff

08002144 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002152:	2317      	movs	r3, #23
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800215a:	f7fe fccd 	bl	8000af8 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	18d3      	adds	r3, r2, r3
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800216a:	f7fe fcc5 	bl	8000af8 <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	0013      	movs	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	189b      	adds	r3, r3, r2
 8002184:	00da      	lsls	r2, r3, #3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	0d1b      	lsrs	r3, r3, #20
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	4353      	muls	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002190:	e068      	b.n	8002264 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	23c0      	movs	r3, #192	; 0xc0
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	429a      	cmp	r2, r3
 800219a:	d10a      	bne.n	80021b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d107      	bne.n	80021b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	2117      	movs	r1, #23
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	d055      	beq.n	8002264 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021b8:	f7fe fc9e 	bl	8000af8 <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d902      	bls.n	80021ce <SPI_WaitFifoStateUntilTimeout+0x8a>
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d142      	bne.n	8002254 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	21e0      	movs	r1, #224	; 0xe0
 80021da:	438a      	bics	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	2382      	movs	r3, #130	; 0x82
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d113      	bne.n	8002212 <SPI_WaitFifoStateUntilTimeout+0xce>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d005      	beq.n	8002202 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	429a      	cmp	r2, r3
 8002200:	d107      	bne.n	8002212 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2140      	movs	r1, #64	; 0x40
 800220e:	438a      	bics	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	429a      	cmp	r2, r3
 800221c:	d110      	bne.n	8002240 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4916      	ldr	r1, [pc, #88]	; (8002284 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800222a:	400a      	ands	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0189      	lsls	r1, r1, #6
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	225d      	movs	r2, #93	; 0x5d
 8002244:	2101      	movs	r1, #1
 8002246:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	225c      	movs	r2, #92	; 0x5c
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e010      	b.n	8002276 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	3b01      	subs	r3, #1
 8002262:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d18e      	bne.n	8002192 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b00a      	add	sp, #40	; 0x28
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	20000000 	.word	0x20000000
 8002284:	ffffdfff 	.word	0xffffdfff

08002288 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	0159      	lsls	r1, r3, #5
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	0013      	movs	r3, r2
 80022a2:	2200      	movs	r2, #0
 80022a4:	f7ff ff4e 	bl	8002144 <SPI_WaitFifoStateUntilTimeout>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d007      	beq.n	80022bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b0:	2220      	movs	r2, #32
 80022b2:	431a      	orrs	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e027      	b.n	800230c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	0013      	movs	r3, r2
 80022c6:	2200      	movs	r2, #0
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	f7ff fead 	bl	8002028 <SPI_WaitFlagStateUntilTimeout>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d007      	beq.n	80022e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	2220      	movs	r2, #32
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e014      	b.n	800230c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	23c0      	movs	r3, #192	; 0xc0
 80022e6:	00d9      	lsls	r1, r3, #3
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	0013      	movs	r3, r2
 80022f0:	2200      	movs	r2, #0
 80022f2:	f7ff ff27 	bl	8002144 <SPI_WaitFifoStateUntilTimeout>
 80022f6:	1e03      	subs	r3, r0, #0
 80022f8:	d007      	beq.n	800230a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fe:	2220      	movs	r2, #32
 8002300:	431a      	orrs	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e000      	b.n	800230c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e044      	b.n	80023b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2278      	movs	r2, #120	; 0x78
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f7fe fa3b 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2101      	movs	r1, #1
 8002350:	438a      	bics	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 f830 	bl	80023bc <UART_SetConfig>
 800235c:	0003      	movs	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e024      	b.n	80023b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f963 	bl	800263c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <HAL_UART_Init+0xa4>)
 8002382:	400a      	ands	r2, r1
 8002384:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	212a      	movs	r1, #42	; 0x2a
 8002392:	438a      	bics	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f9fb 	bl	80027a4 <UART_CheckIdleState>
 80023ae:	0003      	movs	r3, r0
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	ffffb7ff 	.word	0xffffb7ff

080023bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023c4:	231e      	movs	r3, #30
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a8d      	ldr	r2, [pc, #564]	; (8002620 <UART_SetConfig+0x264>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a88      	ldr	r2, [pc, #544]	; (8002624 <UART_SetConfig+0x268>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a7f      	ldr	r2, [pc, #508]	; (8002628 <UART_SetConfig+0x26c>)
 800242a:	4013      	ands	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a7b      	ldr	r2, [pc, #492]	; (800262c <UART_SetConfig+0x270>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d127      	bne.n	8002492 <UART_SetConfig+0xd6>
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <UART_SetConfig+0x274>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	2203      	movs	r2, #3
 8002448:	4013      	ands	r3, r2
 800244a:	2b03      	cmp	r3, #3
 800244c:	d00d      	beq.n	800246a <UART_SetConfig+0xae>
 800244e:	d81b      	bhi.n	8002488 <UART_SetConfig+0xcc>
 8002450:	2b02      	cmp	r3, #2
 8002452:	d014      	beq.n	800247e <UART_SetConfig+0xc2>
 8002454:	d818      	bhi.n	8002488 <UART_SetConfig+0xcc>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <UART_SetConfig+0xa4>
 800245a:	2b01      	cmp	r3, #1
 800245c:	d00a      	beq.n	8002474 <UART_SetConfig+0xb8>
 800245e:	e013      	b.n	8002488 <UART_SetConfig+0xcc>
 8002460:	231f      	movs	r3, #31
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e021      	b.n	80024ae <UART_SetConfig+0xf2>
 800246a:	231f      	movs	r3, #31
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e01c      	b.n	80024ae <UART_SetConfig+0xf2>
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2204      	movs	r2, #4
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e017      	b.n	80024ae <UART_SetConfig+0xf2>
 800247e:	231f      	movs	r3, #31
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2208      	movs	r2, #8
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e012      	b.n	80024ae <UART_SetConfig+0xf2>
 8002488:	231f      	movs	r3, #31
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2210      	movs	r2, #16
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e00d      	b.n	80024ae <UART_SetConfig+0xf2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a67      	ldr	r2, [pc, #412]	; (8002634 <UART_SetConfig+0x278>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d104      	bne.n	80024a6 <UART_SetConfig+0xea>
 800249c:	231f      	movs	r3, #31
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e003      	b.n	80024ae <UART_SetConfig+0xf2>
 80024a6:	231f      	movs	r3, #31
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2210      	movs	r2, #16
 80024ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d15c      	bne.n	8002574 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80024ba:	231f      	movs	r3, #31
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d015      	beq.n	80024f0 <UART_SetConfig+0x134>
 80024c4:	dc18      	bgt.n	80024f8 <UART_SetConfig+0x13c>
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d00d      	beq.n	80024e6 <UART_SetConfig+0x12a>
 80024ca:	dc15      	bgt.n	80024f8 <UART_SetConfig+0x13c>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <UART_SetConfig+0x11a>
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d005      	beq.n	80024e0 <UART_SetConfig+0x124>
 80024d4:	e010      	b.n	80024f8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024d6:	f7ff fa8b 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 80024da:	0003      	movs	r3, r0
 80024dc:	61bb      	str	r3, [r7, #24]
        break;
 80024de:	e012      	b.n	8002506 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024e0:	4b55      	ldr	r3, [pc, #340]	; (8002638 <UART_SetConfig+0x27c>)
 80024e2:	61bb      	str	r3, [r7, #24]
        break;
 80024e4:	e00f      	b.n	8002506 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024e6:	f7ff fa07 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80024ea:	0003      	movs	r3, r0
 80024ec:	61bb      	str	r3, [r7, #24]
        break;
 80024ee:	e00a      	b.n	8002506 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	61bb      	str	r3, [r7, #24]
        break;
 80024f6:	e006      	b.n	8002506 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024fc:	231e      	movs	r3, #30
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
        break;
 8002504:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d100      	bne.n	800250e <UART_SetConfig+0x152>
 800250c:	e07a      	b.n	8002604 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	005a      	lsls	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	18d2      	adds	r2, r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0019      	movs	r1, r3
 8002520:	0010      	movs	r0, r2
 8002522:	f7fd fdf1 	bl	8000108 <__udivsi3>
 8002526:	0003      	movs	r3, r0
 8002528:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d91c      	bls.n	800256a <UART_SetConfig+0x1ae>
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	429a      	cmp	r2, r3
 8002538:	d217      	bcs.n	800256a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	b29a      	uxth	r2, r3
 800253e:	200e      	movs	r0, #14
 8002540:	183b      	adds	r3, r7, r0
 8002542:	210f      	movs	r1, #15
 8002544:	438a      	bics	r2, r1
 8002546:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	b29b      	uxth	r3, r3
 800254e:	2207      	movs	r2, #7
 8002550:	4013      	ands	r3, r2
 8002552:	b299      	uxth	r1, r3
 8002554:	183b      	adds	r3, r7, r0
 8002556:	183a      	adds	r2, r7, r0
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	183a      	adds	r2, r7, r0
 8002564:	8812      	ldrh	r2, [r2, #0]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	e04c      	b.n	8002604 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800256a:	231e      	movs	r3, #30
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e047      	b.n	8002604 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002574:	231f      	movs	r3, #31
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b08      	cmp	r3, #8
 800257c:	d015      	beq.n	80025aa <UART_SetConfig+0x1ee>
 800257e:	dc18      	bgt.n	80025b2 <UART_SetConfig+0x1f6>
 8002580:	2b04      	cmp	r3, #4
 8002582:	d00d      	beq.n	80025a0 <UART_SetConfig+0x1e4>
 8002584:	dc15      	bgt.n	80025b2 <UART_SetConfig+0x1f6>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <UART_SetConfig+0x1d4>
 800258a:	2b02      	cmp	r3, #2
 800258c:	d005      	beq.n	800259a <UART_SetConfig+0x1de>
 800258e:	e010      	b.n	80025b2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002590:	f7ff fa2e 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 8002594:	0003      	movs	r3, r0
 8002596:	61bb      	str	r3, [r7, #24]
        break;
 8002598:	e012      	b.n	80025c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800259a:	4b27      	ldr	r3, [pc, #156]	; (8002638 <UART_SetConfig+0x27c>)
 800259c:	61bb      	str	r3, [r7, #24]
        break;
 800259e:	e00f      	b.n	80025c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025a0:	f7ff f9aa 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80025a4:	0003      	movs	r3, r0
 80025a6:	61bb      	str	r3, [r7, #24]
        break;
 80025a8:	e00a      	b.n	80025c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	61bb      	str	r3, [r7, #24]
        break;
 80025b0:	e006      	b.n	80025c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025b6:	231e      	movs	r3, #30
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
        break;
 80025be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01e      	beq.n	8002604 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	085a      	lsrs	r2, r3, #1
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	18d2      	adds	r2, r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0019      	movs	r1, r3
 80025d6:	0010      	movs	r0, r2
 80025d8:	f7fd fd96 	bl	8000108 <__udivsi3>
 80025dc:	0003      	movs	r3, r0
 80025de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	d90a      	bls.n	80025fc <UART_SetConfig+0x240>
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d205      	bcs.n	80025fc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	e003      	b.n	8002604 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80025fc:	231e      	movs	r3, #30
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002610:	231e      	movs	r3, #30
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	781b      	ldrb	r3, [r3, #0]
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b008      	add	sp, #32
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	efff69f3 	.word	0xefff69f3
 8002624:	ffffcfff 	.word	0xffffcfff
 8002628:	fffff4ff 	.word	0xfffff4ff
 800262c:	40013800 	.word	0x40013800
 8002630:	40021000 	.word	0x40021000
 8002634:	40004400 	.word	0x40004400
 8002638:	007a1200 	.word	0x007a1200

0800263c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2201      	movs	r2, #1
 800264a:	4013      	ands	r3, r2
 800264c:	d00b      	beq.n	8002666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <UART_AdvFeatureConfig+0x144>)
 8002656:	4013      	ands	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2202      	movs	r2, #2
 800266c:	4013      	ands	r3, r2
 800266e:	d00b      	beq.n	8002688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a43      	ldr	r2, [pc, #268]	; (8002784 <UART_AdvFeatureConfig+0x148>)
 8002678:	4013      	ands	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	2204      	movs	r2, #4
 800268e:	4013      	ands	r3, r2
 8002690:	d00b      	beq.n	80026aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a3b      	ldr	r2, [pc, #236]	; (8002788 <UART_AdvFeatureConfig+0x14c>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2208      	movs	r2, #8
 80026b0:	4013      	ands	r3, r2
 80026b2:	d00b      	beq.n	80026cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a34      	ldr	r2, [pc, #208]	; (800278c <UART_AdvFeatureConfig+0x150>)
 80026bc:	4013      	ands	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2210      	movs	r2, #16
 80026d2:	4013      	ands	r3, r2
 80026d4:	d00b      	beq.n	80026ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a2c      	ldr	r2, [pc, #176]	; (8002790 <UART_AdvFeatureConfig+0x154>)
 80026de:	4013      	ands	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	2220      	movs	r2, #32
 80026f4:	4013      	ands	r3, r2
 80026f6:	d00b      	beq.n	8002710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <UART_AdvFeatureConfig+0x158>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2240      	movs	r2, #64	; 0x40
 8002716:	4013      	ands	r3, r2
 8002718:	d01d      	beq.n	8002756 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <UART_AdvFeatureConfig+0x15c>)
 8002722:	4013      	ands	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	035b      	lsls	r3, r3, #13
 800273a:	429a      	cmp	r2, r3
 800273c:	d10b      	bne.n	8002756 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <UART_AdvFeatureConfig+0x160>)
 8002746:	4013      	ands	r3, r2
 8002748:	0019      	movs	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	4013      	ands	r3, r2
 800275e:	d00b      	beq.n	8002778 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <UART_AdvFeatureConfig+0x164>)
 8002768:	4013      	ands	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
  }
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}
 8002780:	fffdffff 	.word	0xfffdffff
 8002784:	fffeffff 	.word	0xfffeffff
 8002788:	fffbffff 	.word	0xfffbffff
 800278c:	ffff7fff 	.word	0xffff7fff
 8002790:	ffffefff 	.word	0xffffefff
 8002794:	ffffdfff 	.word	0xffffdfff
 8002798:	ffefffff 	.word	0xffefffff
 800279c:	ff9fffff 	.word	0xff9fffff
 80027a0:	fff7ffff 	.word	0xfff7ffff

080027a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b092      	sub	sp, #72	; 0x48
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2284      	movs	r2, #132	; 0x84
 80027b0:	2100      	movs	r1, #0
 80027b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027b4:	f7fe f9a0 	bl	8000af8 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2208      	movs	r2, #8
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d12c      	bne.n	8002824 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0391      	lsls	r1, r2, #14
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4a46      	ldr	r2, [pc, #280]	; (80028ec <UART_CheckIdleState+0x148>)
 80027d4:	9200      	str	r2, [sp, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f000 f88c 	bl	80028f4 <UART_WaitOnFlagUntilTimeout>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d021      	beq.n	8002824 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e0:	f3ef 8310 	mrs	r3, PRIMASK
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80027e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ea:	2301      	movs	r3, #1
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	f383 8810 	msr	PRIMASK, r3
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	438a      	bics	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	f383 8810 	msr	PRIMASK, r3
}
 8002810:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2278      	movs	r2, #120	; 0x78
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e05f      	b.n	80028e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2204      	movs	r2, #4
 800282c:	4013      	ands	r3, r2
 800282e:	2b04      	cmp	r3, #4
 8002830:	d146      	bne.n	80028c0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	03d1      	lsls	r1, r2, #15
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4a2c      	ldr	r2, [pc, #176]	; (80028ec <UART_CheckIdleState+0x148>)
 800283c:	9200      	str	r2, [sp, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	f000 f858 	bl	80028f4 <UART_WaitOnFlagUntilTimeout>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d03b      	beq.n	80028c0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002848:	f3ef 8310 	mrs	r3, PRIMASK
 800284c:	60fb      	str	r3, [r7, #12]
  return(result);
 800284e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
 8002852:	2301      	movs	r3, #1
 8002854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f383 8810 	msr	PRIMASK, r3
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4921      	ldr	r1, [pc, #132]	; (80028f0 <UART_CheckIdleState+0x14c>)
 800286a:	400a      	ands	r2, r1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f383 8810 	msr	PRIMASK, r3
}
 8002878:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287a:	f3ef 8310 	mrs	r3, PRIMASK
 800287e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002880:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
 8002884:	2301      	movs	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f383 8810 	msr	PRIMASK, r3
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2101      	movs	r1, #1
 800289c:	438a      	bics	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	f383 8810 	msr	PRIMASK, r3
}
 80028aa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	2120      	movs	r1, #32
 80028b2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2278      	movs	r2, #120	; 0x78
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e011      	b.n	80028e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	2120      	movs	r1, #32
 80028cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2278      	movs	r2, #120	; 0x78
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b010      	add	sp, #64	; 0x40
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	01ffffff 	.word	0x01ffffff
 80028f0:	fffffedf 	.word	0xfffffedf

080028f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002904:	e04b      	b.n	800299e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	3301      	adds	r3, #1
 800290a:	d048      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290c:	f7fe f8f4 	bl	8000af8 <HAL_GetTick>
 8002910:	0002      	movs	r2, r0
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	429a      	cmp	r2, r3
 800291a:	d302      	bcc.n	8002922 <UART_WaitOnFlagUntilTimeout+0x2e>
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e04b      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2204      	movs	r2, #4
 800292e:	4013      	ands	r3, r2
 8002930:	d035      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2208      	movs	r2, #8
 800293a:	4013      	ands	r3, r2
 800293c:	2b08      	cmp	r3, #8
 800293e:	d111      	bne.n	8002964 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2208      	movs	r2, #8
 8002946:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	0018      	movs	r0, r3
 800294c:	f000 f83c 	bl	80029c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2284      	movs	r2, #132	; 0x84
 8002954:	2108      	movs	r1, #8
 8002956:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2278      	movs	r2, #120	; 0x78
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e02c      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	401a      	ands	r2, r3
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	429a      	cmp	r2, r3
 8002976:	d112      	bne.n	800299e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f81f 	bl	80029c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2284      	movs	r2, #132	; 0x84
 800298e:	2120      	movs	r1, #32
 8002990:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2278      	movs	r2, #120	; 0x78
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	425a      	negs	r2, r3
 80029ae:	4153      	adcs	r3, r2
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	001a      	movs	r2, r3
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d0a4      	beq.n	8002906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b004      	add	sp, #16
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08e      	sub	sp, #56	; 0x38
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d0:	f3ef 8310 	mrs	r3, PRIMASK
 80029d4:	617b      	str	r3, [r7, #20]
  return(result);
 80029d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f383 8810 	msr	PRIMASK, r3
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4926      	ldr	r1, [pc, #152]	; (8002a8c <UART_EndRxTransfer+0xc4>)
 80029f2:	400a      	ands	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f383 8810 	msr	PRIMASK, r3
}
 8002a00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a02:	f3ef 8310 	mrs	r3, PRIMASK
 8002a06:	623b      	str	r3, [r7, #32]
  return(result);
 8002a08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	f383 8810 	msr	PRIMASK, r3
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	438a      	bics	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	f383 8810 	msr	PRIMASK, r3
}
 8002a32:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d118      	bne.n	8002a6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a40:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a46:	2301      	movs	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f383 8810 	msr	PRIMASK, r3
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	438a      	bics	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	2120      	movs	r1, #32
 8002a74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b00e      	add	sp, #56	; 0x38
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	fffffedf 	.word	0xfffffedf

08002a90 <__errno>:
 8002a90:	4b01      	ldr	r3, [pc, #4]	; (8002a98 <__errno+0x8>)
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	4770      	bx	lr
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <__libc_init_array>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	4d0c      	ldr	r5, [pc, #48]	; (8002ad4 <__libc_init_array+0x38>)
 8002aa2:	4c0d      	ldr	r4, [pc, #52]	; (8002ad8 <__libc_init_array+0x3c>)
 8002aa4:	1b64      	subs	r4, r4, r5
 8002aa6:	10a4      	asrs	r4, r4, #2
 8002aa8:	42a6      	cmp	r6, r4
 8002aaa:	d109      	bne.n	8002ac0 <__libc_init_array+0x24>
 8002aac:	2600      	movs	r6, #0
 8002aae:	f000 fd6b 	bl	8003588 <_init>
 8002ab2:	4d0a      	ldr	r5, [pc, #40]	; (8002adc <__libc_init_array+0x40>)
 8002ab4:	4c0a      	ldr	r4, [pc, #40]	; (8002ae0 <__libc_init_array+0x44>)
 8002ab6:	1b64      	subs	r4, r4, r5
 8002ab8:	10a4      	asrs	r4, r4, #2
 8002aba:	42a6      	cmp	r6, r4
 8002abc:	d105      	bne.n	8002aca <__libc_init_array+0x2e>
 8002abe:	bd70      	pop	{r4, r5, r6, pc}
 8002ac0:	00b3      	lsls	r3, r6, #2
 8002ac2:	58eb      	ldr	r3, [r5, r3]
 8002ac4:	4798      	blx	r3
 8002ac6:	3601      	adds	r6, #1
 8002ac8:	e7ee      	b.n	8002aa8 <__libc_init_array+0xc>
 8002aca:	00b3      	lsls	r3, r6, #2
 8002acc:	58eb      	ldr	r3, [r5, r3]
 8002ace:	4798      	blx	r3
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	e7f2      	b.n	8002aba <__libc_init_array+0x1e>
 8002ad4:	08003674 	.word	0x08003674
 8002ad8:	08003674 	.word	0x08003674
 8002adc:	08003674 	.word	0x08003674
 8002ae0:	08003678 	.word	0x08003678

08002ae4 <memset>:
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	1882      	adds	r2, r0, r2
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d100      	bne.n	8002aee <memset+0xa>
 8002aec:	4770      	bx	lr
 8002aee:	7019      	strb	r1, [r3, #0]
 8002af0:	3301      	adds	r3, #1
 8002af2:	e7f9      	b.n	8002ae8 <memset+0x4>

08002af4 <_puts_r>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	0005      	movs	r5, r0
 8002af8:	000e      	movs	r6, r1
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d004      	beq.n	8002b08 <_puts_r+0x14>
 8002afe:	6983      	ldr	r3, [r0, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <_puts_r+0x14>
 8002b04:	f000 fa6e 	bl	8002fe4 <__sinit>
 8002b08:	69ab      	ldr	r3, [r5, #24]
 8002b0a:	68ac      	ldr	r4, [r5, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <_puts_r+0x22>
 8002b10:	0028      	movs	r0, r5
 8002b12:	f000 fa67 	bl	8002fe4 <__sinit>
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <_puts_r+0xd8>)
 8002b18:	429c      	cmp	r4, r3
 8002b1a:	d122      	bne.n	8002b62 <_puts_r+0x6e>
 8002b1c:	686c      	ldr	r4, [r5, #4]
 8002b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b20:	07db      	lsls	r3, r3, #31
 8002b22:	d405      	bmi.n	8002b30 <_puts_r+0x3c>
 8002b24:	89a3      	ldrh	r3, [r4, #12]
 8002b26:	059b      	lsls	r3, r3, #22
 8002b28:	d402      	bmi.n	8002b30 <_puts_r+0x3c>
 8002b2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b2c:	f000 fafb 	bl	8003126 <__retarget_lock_acquire_recursive>
 8002b30:	89a3      	ldrh	r3, [r4, #12]
 8002b32:	071b      	lsls	r3, r3, #28
 8002b34:	d502      	bpl.n	8002b3c <_puts_r+0x48>
 8002b36:	6923      	ldr	r3, [r4, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d129      	bne.n	8002b90 <_puts_r+0x9c>
 8002b3c:	0021      	movs	r1, r4
 8002b3e:	0028      	movs	r0, r5
 8002b40:	f000 f8aa 	bl	8002c98 <__swsetup_r>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d023      	beq.n	8002b90 <_puts_r+0x9c>
 8002b48:	2501      	movs	r5, #1
 8002b4a:	426d      	negs	r5, r5
 8002b4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b4e:	07db      	lsls	r3, r3, #31
 8002b50:	d405      	bmi.n	8002b5e <_puts_r+0x6a>
 8002b52:	89a3      	ldrh	r3, [r4, #12]
 8002b54:	059b      	lsls	r3, r3, #22
 8002b56:	d402      	bmi.n	8002b5e <_puts_r+0x6a>
 8002b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b5a:	f000 fae5 	bl	8003128 <__retarget_lock_release_recursive>
 8002b5e:	0028      	movs	r0, r5
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <_puts_r+0xdc>)
 8002b64:	429c      	cmp	r4, r3
 8002b66:	d101      	bne.n	8002b6c <_puts_r+0x78>
 8002b68:	68ac      	ldr	r4, [r5, #8]
 8002b6a:	e7d8      	b.n	8002b1e <_puts_r+0x2a>
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <_puts_r+0xe0>)
 8002b6e:	429c      	cmp	r4, r3
 8002b70:	d1d5      	bne.n	8002b1e <_puts_r+0x2a>
 8002b72:	68ec      	ldr	r4, [r5, #12]
 8002b74:	e7d3      	b.n	8002b1e <_puts_r+0x2a>
 8002b76:	3601      	adds	r6, #1
 8002b78:	60a3      	str	r3, [r4, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	da04      	bge.n	8002b88 <_puts_r+0x94>
 8002b7e:	69a2      	ldr	r2, [r4, #24]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	dc16      	bgt.n	8002bb2 <_puts_r+0xbe>
 8002b84:	290a      	cmp	r1, #10
 8002b86:	d014      	beq.n	8002bb2 <_puts_r+0xbe>
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	6022      	str	r2, [r4, #0]
 8002b8e:	7019      	strb	r1, [r3, #0]
 8002b90:	68a3      	ldr	r3, [r4, #8]
 8002b92:	7831      	ldrb	r1, [r6, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	2900      	cmp	r1, #0
 8002b98:	d1ed      	bne.n	8002b76 <_puts_r+0x82>
 8002b9a:	60a3      	str	r3, [r4, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da0f      	bge.n	8002bc0 <_puts_r+0xcc>
 8002ba0:	0028      	movs	r0, r5
 8002ba2:	0022      	movs	r2, r4
 8002ba4:	310a      	adds	r1, #10
 8002ba6:	f000 f821 	bl	8002bec <__swbuf_r>
 8002baa:	250a      	movs	r5, #10
 8002bac:	1c43      	adds	r3, r0, #1
 8002bae:	d1cd      	bne.n	8002b4c <_puts_r+0x58>
 8002bb0:	e7ca      	b.n	8002b48 <_puts_r+0x54>
 8002bb2:	0022      	movs	r2, r4
 8002bb4:	0028      	movs	r0, r5
 8002bb6:	f000 f819 	bl	8002bec <__swbuf_r>
 8002bba:	1c43      	adds	r3, r0, #1
 8002bbc:	d1e8      	bne.n	8002b90 <_puts_r+0x9c>
 8002bbe:	e7c3      	b.n	8002b48 <_puts_r+0x54>
 8002bc0:	250a      	movs	r5, #10
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	6022      	str	r2, [r4, #0]
 8002bc8:	701d      	strb	r5, [r3, #0]
 8002bca:	e7bf      	b.n	8002b4c <_puts_r+0x58>
 8002bcc:	08003634 	.word	0x08003634
 8002bd0:	08003654 	.word	0x08003654
 8002bd4:	08003614 	.word	0x08003614

08002bd8 <puts>:
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <puts+0x10>)
 8002bdc:	0001      	movs	r1, r0
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	f7ff ff88 	bl	8002af4 <_puts_r>
 8002be4:	bd10      	pop	{r4, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	2000000c 	.word	0x2000000c

08002bec <__swbuf_r>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	0005      	movs	r5, r0
 8002bf0:	000e      	movs	r6, r1
 8002bf2:	0014      	movs	r4, r2
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d004      	beq.n	8002c02 <__swbuf_r+0x16>
 8002bf8:	6983      	ldr	r3, [r0, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <__swbuf_r+0x16>
 8002bfe:	f000 f9f1 	bl	8002fe4 <__sinit>
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <__swbuf_r+0xa0>)
 8002c04:	429c      	cmp	r4, r3
 8002c06:	d12e      	bne.n	8002c66 <__swbuf_r+0x7a>
 8002c08:	686c      	ldr	r4, [r5, #4]
 8002c0a:	69a3      	ldr	r3, [r4, #24]
 8002c0c:	60a3      	str	r3, [r4, #8]
 8002c0e:	89a3      	ldrh	r3, [r4, #12]
 8002c10:	071b      	lsls	r3, r3, #28
 8002c12:	d532      	bpl.n	8002c7a <__swbuf_r+0x8e>
 8002c14:	6923      	ldr	r3, [r4, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d02f      	beq.n	8002c7a <__swbuf_r+0x8e>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	6922      	ldr	r2, [r4, #16]
 8002c1e:	b2f7      	uxtb	r7, r6
 8002c20:	1a98      	subs	r0, r3, r2
 8002c22:	6963      	ldr	r3, [r4, #20]
 8002c24:	b2f6      	uxtb	r6, r6
 8002c26:	4283      	cmp	r3, r0
 8002c28:	dc05      	bgt.n	8002c36 <__swbuf_r+0x4a>
 8002c2a:	0021      	movs	r1, r4
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	f000 f937 	bl	8002ea0 <_fflush_r>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d127      	bne.n	8002c86 <__swbuf_r+0x9a>
 8002c36:	68a3      	ldr	r3, [r4, #8]
 8002c38:	3001      	adds	r0, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	60a3      	str	r3, [r4, #8]
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	6022      	str	r2, [r4, #0]
 8002c44:	701f      	strb	r7, [r3, #0]
 8002c46:	6963      	ldr	r3, [r4, #20]
 8002c48:	4283      	cmp	r3, r0
 8002c4a:	d004      	beq.n	8002c56 <__swbuf_r+0x6a>
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	07db      	lsls	r3, r3, #31
 8002c50:	d507      	bpl.n	8002c62 <__swbuf_r+0x76>
 8002c52:	2e0a      	cmp	r6, #10
 8002c54:	d105      	bne.n	8002c62 <__swbuf_r+0x76>
 8002c56:	0021      	movs	r1, r4
 8002c58:	0028      	movs	r0, r5
 8002c5a:	f000 f921 	bl	8002ea0 <_fflush_r>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d111      	bne.n	8002c86 <__swbuf_r+0x9a>
 8002c62:	0030      	movs	r0, r6
 8002c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <__swbuf_r+0xa4>)
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	d101      	bne.n	8002c70 <__swbuf_r+0x84>
 8002c6c:	68ac      	ldr	r4, [r5, #8]
 8002c6e:	e7cc      	b.n	8002c0a <__swbuf_r+0x1e>
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <__swbuf_r+0xa8>)
 8002c72:	429c      	cmp	r4, r3
 8002c74:	d1c9      	bne.n	8002c0a <__swbuf_r+0x1e>
 8002c76:	68ec      	ldr	r4, [r5, #12]
 8002c78:	e7c7      	b.n	8002c0a <__swbuf_r+0x1e>
 8002c7a:	0021      	movs	r1, r4
 8002c7c:	0028      	movs	r0, r5
 8002c7e:	f000 f80b 	bl	8002c98 <__swsetup_r>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d0c9      	beq.n	8002c1a <__swbuf_r+0x2e>
 8002c86:	2601      	movs	r6, #1
 8002c88:	4276      	negs	r6, r6
 8002c8a:	e7ea      	b.n	8002c62 <__swbuf_r+0x76>
 8002c8c:	08003634 	.word	0x08003634
 8002c90:	08003654 	.word	0x08003654
 8002c94:	08003614 	.word	0x08003614

08002c98 <__swsetup_r>:
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <__swsetup_r+0xe0>)
 8002c9a:	b570      	push	{r4, r5, r6, lr}
 8002c9c:	681d      	ldr	r5, [r3, #0]
 8002c9e:	0006      	movs	r6, r0
 8002ca0:	000c      	movs	r4, r1
 8002ca2:	2d00      	cmp	r5, #0
 8002ca4:	d005      	beq.n	8002cb2 <__swsetup_r+0x1a>
 8002ca6:	69ab      	ldr	r3, [r5, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <__swsetup_r+0x1a>
 8002cac:	0028      	movs	r0, r5
 8002cae:	f000 f999 	bl	8002fe4 <__sinit>
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <__swsetup_r+0xe4>)
 8002cb4:	429c      	cmp	r4, r3
 8002cb6:	d10f      	bne.n	8002cd8 <__swsetup_r+0x40>
 8002cb8:	686c      	ldr	r4, [r5, #4]
 8002cba:	230c      	movs	r3, #12
 8002cbc:	5ee2      	ldrsh	r2, [r4, r3]
 8002cbe:	b293      	uxth	r3, r2
 8002cc0:	0711      	lsls	r1, r2, #28
 8002cc2:	d42d      	bmi.n	8002d20 <__swsetup_r+0x88>
 8002cc4:	06d9      	lsls	r1, r3, #27
 8002cc6:	d411      	bmi.n	8002cec <__swsetup_r+0x54>
 8002cc8:	2309      	movs	r3, #9
 8002cca:	2001      	movs	r0, #1
 8002ccc:	6033      	str	r3, [r6, #0]
 8002cce:	3337      	adds	r3, #55	; 0x37
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	81a3      	strh	r3, [r4, #12]
 8002cd4:	4240      	negs	r0, r0
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <__swsetup_r+0xe8>)
 8002cda:	429c      	cmp	r4, r3
 8002cdc:	d101      	bne.n	8002ce2 <__swsetup_r+0x4a>
 8002cde:	68ac      	ldr	r4, [r5, #8]
 8002ce0:	e7eb      	b.n	8002cba <__swsetup_r+0x22>
 8002ce2:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <__swsetup_r+0xec>)
 8002ce4:	429c      	cmp	r4, r3
 8002ce6:	d1e8      	bne.n	8002cba <__swsetup_r+0x22>
 8002ce8:	68ec      	ldr	r4, [r5, #12]
 8002cea:	e7e6      	b.n	8002cba <__swsetup_r+0x22>
 8002cec:	075b      	lsls	r3, r3, #29
 8002cee:	d513      	bpl.n	8002d18 <__swsetup_r+0x80>
 8002cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cf2:	2900      	cmp	r1, #0
 8002cf4:	d008      	beq.n	8002d08 <__swsetup_r+0x70>
 8002cf6:	0023      	movs	r3, r4
 8002cf8:	3344      	adds	r3, #68	; 0x44
 8002cfa:	4299      	cmp	r1, r3
 8002cfc:	d002      	beq.n	8002d04 <__swsetup_r+0x6c>
 8002cfe:	0030      	movs	r0, r6
 8002d00:	f000 fa80 	bl	8003204 <_free_r>
 8002d04:	2300      	movs	r3, #0
 8002d06:	6363      	str	r3, [r4, #52]	; 0x34
 8002d08:	2224      	movs	r2, #36	; 0x24
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	81a3      	strh	r3, [r4, #12]
 8002d10:	2300      	movs	r3, #0
 8002d12:	6063      	str	r3, [r4, #4]
 8002d14:	6923      	ldr	r3, [r4, #16]
 8002d16:	6023      	str	r3, [r4, #0]
 8002d18:	2308      	movs	r3, #8
 8002d1a:	89a2      	ldrh	r2, [r4, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	81a3      	strh	r3, [r4, #12]
 8002d20:	6923      	ldr	r3, [r4, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <__swsetup_r+0xa6>
 8002d26:	21a0      	movs	r1, #160	; 0xa0
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	0089      	lsls	r1, r1, #2
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	400b      	ands	r3, r1
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <__swsetup_r+0xa6>
 8002d36:	0021      	movs	r1, r4
 8002d38:	0030      	movs	r0, r6
 8002d3a:	f000 fa1f 	bl	800317c <__smakebuf_r>
 8002d3e:	220c      	movs	r2, #12
 8002d40:	5ea3      	ldrsh	r3, [r4, r2]
 8002d42:	2001      	movs	r0, #1
 8002d44:	001a      	movs	r2, r3
 8002d46:	b299      	uxth	r1, r3
 8002d48:	4002      	ands	r2, r0
 8002d4a:	4203      	tst	r3, r0
 8002d4c:	d00f      	beq.n	8002d6e <__swsetup_r+0xd6>
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60a2      	str	r2, [r4, #8]
 8002d52:	6962      	ldr	r2, [r4, #20]
 8002d54:	4252      	negs	r2, r2
 8002d56:	61a2      	str	r2, [r4, #24]
 8002d58:	2000      	movs	r0, #0
 8002d5a:	6922      	ldr	r2, [r4, #16]
 8002d5c:	4282      	cmp	r2, r0
 8002d5e:	d1ba      	bne.n	8002cd6 <__swsetup_r+0x3e>
 8002d60:	060a      	lsls	r2, r1, #24
 8002d62:	d5b8      	bpl.n	8002cd6 <__swsetup_r+0x3e>
 8002d64:	2240      	movs	r2, #64	; 0x40
 8002d66:	4313      	orrs	r3, r2
 8002d68:	81a3      	strh	r3, [r4, #12]
 8002d6a:	3801      	subs	r0, #1
 8002d6c:	e7b3      	b.n	8002cd6 <__swsetup_r+0x3e>
 8002d6e:	0788      	lsls	r0, r1, #30
 8002d70:	d400      	bmi.n	8002d74 <__swsetup_r+0xdc>
 8002d72:	6962      	ldr	r2, [r4, #20]
 8002d74:	60a2      	str	r2, [r4, #8]
 8002d76:	e7ef      	b.n	8002d58 <__swsetup_r+0xc0>
 8002d78:	2000000c 	.word	0x2000000c
 8002d7c:	08003634 	.word	0x08003634
 8002d80:	08003654 	.word	0x08003654
 8002d84:	08003614 	.word	0x08003614

08002d88 <__sflush_r>:
 8002d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d8a:	898b      	ldrh	r3, [r1, #12]
 8002d8c:	0005      	movs	r5, r0
 8002d8e:	000c      	movs	r4, r1
 8002d90:	071a      	lsls	r2, r3, #28
 8002d92:	d45f      	bmi.n	8002e54 <__sflush_r+0xcc>
 8002d94:	684a      	ldr	r2, [r1, #4]
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	dc04      	bgt.n	8002da4 <__sflush_r+0x1c>
 8002d9a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002d9c:	2a00      	cmp	r2, #0
 8002d9e:	dc01      	bgt.n	8002da4 <__sflush_r+0x1c>
 8002da0:	2000      	movs	r0, #0
 8002da2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002da4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002da6:	2f00      	cmp	r7, #0
 8002da8:	d0fa      	beq.n	8002da0 <__sflush_r+0x18>
 8002daa:	2200      	movs	r2, #0
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	682e      	ldr	r6, [r5, #0]
 8002db0:	602a      	str	r2, [r5, #0]
 8002db2:	001a      	movs	r2, r3
 8002db4:	0149      	lsls	r1, r1, #5
 8002db6:	400a      	ands	r2, r1
 8002db8:	420b      	tst	r3, r1
 8002dba:	d034      	beq.n	8002e26 <__sflush_r+0x9e>
 8002dbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	075b      	lsls	r3, r3, #29
 8002dc2:	d506      	bpl.n	8002dd2 <__sflush_r+0x4a>
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	1ac0      	subs	r0, r0, r3
 8002dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <__sflush_r+0x4a>
 8002dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dd0:	1ac0      	subs	r0, r0, r3
 8002dd2:	0002      	movs	r2, r0
 8002dd4:	6a21      	ldr	r1, [r4, #32]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	0028      	movs	r0, r5
 8002dda:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002ddc:	47b8      	blx	r7
 8002dde:	89a1      	ldrh	r1, [r4, #12]
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d106      	bne.n	8002df2 <__sflush_r+0x6a>
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	2b1d      	cmp	r3, #29
 8002de8:	d831      	bhi.n	8002e4e <__sflush_r+0xc6>
 8002dea:	4a2c      	ldr	r2, [pc, #176]	; (8002e9c <__sflush_r+0x114>)
 8002dec:	40da      	lsrs	r2, r3
 8002dee:	07d3      	lsls	r3, r2, #31
 8002df0:	d52d      	bpl.n	8002e4e <__sflush_r+0xc6>
 8002df2:	2300      	movs	r3, #0
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	6923      	ldr	r3, [r4, #16]
 8002df8:	6023      	str	r3, [r4, #0]
 8002dfa:	04cb      	lsls	r3, r1, #19
 8002dfc:	d505      	bpl.n	8002e0a <__sflush_r+0x82>
 8002dfe:	1c43      	adds	r3, r0, #1
 8002e00:	d102      	bne.n	8002e08 <__sflush_r+0x80>
 8002e02:	682b      	ldr	r3, [r5, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d100      	bne.n	8002e0a <__sflush_r+0x82>
 8002e08:	6560      	str	r0, [r4, #84]	; 0x54
 8002e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e0c:	602e      	str	r6, [r5, #0]
 8002e0e:	2900      	cmp	r1, #0
 8002e10:	d0c6      	beq.n	8002da0 <__sflush_r+0x18>
 8002e12:	0023      	movs	r3, r4
 8002e14:	3344      	adds	r3, #68	; 0x44
 8002e16:	4299      	cmp	r1, r3
 8002e18:	d002      	beq.n	8002e20 <__sflush_r+0x98>
 8002e1a:	0028      	movs	r0, r5
 8002e1c:	f000 f9f2 	bl	8003204 <_free_r>
 8002e20:	2000      	movs	r0, #0
 8002e22:	6360      	str	r0, [r4, #52]	; 0x34
 8002e24:	e7bd      	b.n	8002da2 <__sflush_r+0x1a>
 8002e26:	2301      	movs	r3, #1
 8002e28:	0028      	movs	r0, r5
 8002e2a:	6a21      	ldr	r1, [r4, #32]
 8002e2c:	47b8      	blx	r7
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	d1c5      	bne.n	8002dbe <__sflush_r+0x36>
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0c2      	beq.n	8002dbe <__sflush_r+0x36>
 8002e38:	2b1d      	cmp	r3, #29
 8002e3a:	d001      	beq.n	8002e40 <__sflush_r+0xb8>
 8002e3c:	2b16      	cmp	r3, #22
 8002e3e:	d101      	bne.n	8002e44 <__sflush_r+0xbc>
 8002e40:	602e      	str	r6, [r5, #0]
 8002e42:	e7ad      	b.n	8002da0 <__sflush_r+0x18>
 8002e44:	2340      	movs	r3, #64	; 0x40
 8002e46:	89a2      	ldrh	r2, [r4, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	e7a9      	b.n	8002da2 <__sflush_r+0x1a>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	430b      	orrs	r3, r1
 8002e52:	e7fa      	b.n	8002e4a <__sflush_r+0xc2>
 8002e54:	690f      	ldr	r7, [r1, #16]
 8002e56:	2f00      	cmp	r7, #0
 8002e58:	d0a2      	beq.n	8002da0 <__sflush_r+0x18>
 8002e5a:	680a      	ldr	r2, [r1, #0]
 8002e5c:	600f      	str	r7, [r1, #0]
 8002e5e:	1bd2      	subs	r2, r2, r7
 8002e60:	9201      	str	r2, [sp, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	079b      	lsls	r3, r3, #30
 8002e66:	d100      	bne.n	8002e6a <__sflush_r+0xe2>
 8002e68:	694a      	ldr	r2, [r1, #20]
 8002e6a:	60a2      	str	r2, [r4, #8]
 8002e6c:	9b01      	ldr	r3, [sp, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	dc00      	bgt.n	8002e74 <__sflush_r+0xec>
 8002e72:	e795      	b.n	8002da0 <__sflush_r+0x18>
 8002e74:	003a      	movs	r2, r7
 8002e76:	0028      	movs	r0, r5
 8002e78:	9b01      	ldr	r3, [sp, #4]
 8002e7a:	6a21      	ldr	r1, [r4, #32]
 8002e7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e7e:	47b0      	blx	r6
 8002e80:	2800      	cmp	r0, #0
 8002e82:	dc06      	bgt.n	8002e92 <__sflush_r+0x10a>
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	2001      	movs	r0, #1
 8002e88:	89a2      	ldrh	r2, [r4, #12]
 8002e8a:	4240      	negs	r0, r0
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	e787      	b.n	8002da2 <__sflush_r+0x1a>
 8002e92:	9b01      	ldr	r3, [sp, #4]
 8002e94:	183f      	adds	r7, r7, r0
 8002e96:	1a1b      	subs	r3, r3, r0
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	e7e7      	b.n	8002e6c <__sflush_r+0xe4>
 8002e9c:	20400001 	.word	0x20400001

08002ea0 <_fflush_r>:
 8002ea0:	690b      	ldr	r3, [r1, #16]
 8002ea2:	b570      	push	{r4, r5, r6, lr}
 8002ea4:	0005      	movs	r5, r0
 8002ea6:	000c      	movs	r4, r1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <_fflush_r+0x12>
 8002eac:	2500      	movs	r5, #0
 8002eae:	0028      	movs	r0, r5
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d004      	beq.n	8002ec0 <_fflush_r+0x20>
 8002eb6:	6983      	ldr	r3, [r0, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <_fflush_r+0x20>
 8002ebc:	f000 f892 	bl	8002fe4 <__sinit>
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <_fflush_r+0x74>)
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d11b      	bne.n	8002efe <_fflush_r+0x5e>
 8002ec6:	686c      	ldr	r4, [r5, #4]
 8002ec8:	220c      	movs	r2, #12
 8002eca:	5ea3      	ldrsh	r3, [r4, r2]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ed      	beq.n	8002eac <_fflush_r+0xc>
 8002ed0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ed2:	07d2      	lsls	r2, r2, #31
 8002ed4:	d404      	bmi.n	8002ee0 <_fflush_r+0x40>
 8002ed6:	059b      	lsls	r3, r3, #22
 8002ed8:	d402      	bmi.n	8002ee0 <_fflush_r+0x40>
 8002eda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002edc:	f000 f923 	bl	8003126 <__retarget_lock_acquire_recursive>
 8002ee0:	0028      	movs	r0, r5
 8002ee2:	0021      	movs	r1, r4
 8002ee4:	f7ff ff50 	bl	8002d88 <__sflush_r>
 8002ee8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eea:	0005      	movs	r5, r0
 8002eec:	07db      	lsls	r3, r3, #31
 8002eee:	d4de      	bmi.n	8002eae <_fflush_r+0xe>
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	059b      	lsls	r3, r3, #22
 8002ef4:	d4db      	bmi.n	8002eae <_fflush_r+0xe>
 8002ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ef8:	f000 f916 	bl	8003128 <__retarget_lock_release_recursive>
 8002efc:	e7d7      	b.n	8002eae <_fflush_r+0xe>
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <_fflush_r+0x78>)
 8002f00:	429c      	cmp	r4, r3
 8002f02:	d101      	bne.n	8002f08 <_fflush_r+0x68>
 8002f04:	68ac      	ldr	r4, [r5, #8]
 8002f06:	e7df      	b.n	8002ec8 <_fflush_r+0x28>
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <_fflush_r+0x7c>)
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	d1dc      	bne.n	8002ec8 <_fflush_r+0x28>
 8002f0e:	68ec      	ldr	r4, [r5, #12]
 8002f10:	e7da      	b.n	8002ec8 <_fflush_r+0x28>
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	08003634 	.word	0x08003634
 8002f18:	08003654 	.word	0x08003654
 8002f1c:	08003614 	.word	0x08003614

08002f20 <std>:
 8002f20:	2300      	movs	r3, #0
 8002f22:	b510      	push	{r4, lr}
 8002f24:	0004      	movs	r4, r0
 8002f26:	6003      	str	r3, [r0, #0]
 8002f28:	6043      	str	r3, [r0, #4]
 8002f2a:	6083      	str	r3, [r0, #8]
 8002f2c:	8181      	strh	r1, [r0, #12]
 8002f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8002f30:	0019      	movs	r1, r3
 8002f32:	81c2      	strh	r2, [r0, #14]
 8002f34:	6103      	str	r3, [r0, #16]
 8002f36:	6143      	str	r3, [r0, #20]
 8002f38:	6183      	str	r3, [r0, #24]
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	305c      	adds	r0, #92	; 0x5c
 8002f3e:	f7ff fdd1 	bl	8002ae4 <memset>
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <std+0x38>)
 8002f44:	6224      	str	r4, [r4, #32]
 8002f46:	6263      	str	r3, [r4, #36]	; 0x24
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <std+0x3c>)
 8002f4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <std+0x40>)
 8002f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <std+0x44>)
 8002f52:	6323      	str	r3, [r4, #48]	; 0x30
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	080033ed 	.word	0x080033ed
 8002f5c:	08003415 	.word	0x08003415
 8002f60:	0800344d 	.word	0x0800344d
 8002f64:	08003479 	.word	0x08003479

08002f68 <_cleanup_r>:
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	4902      	ldr	r1, [pc, #8]	; (8002f74 <_cleanup_r+0xc>)
 8002f6c:	f000 f8ba 	bl	80030e4 <_fwalk_reent>
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	08002ea1 	.word	0x08002ea1

08002f78 <__sfmoreglue>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2568      	movs	r5, #104	; 0x68
 8002f7c:	1e4a      	subs	r2, r1, #1
 8002f7e:	4355      	muls	r5, r2
 8002f80:	000e      	movs	r6, r1
 8002f82:	0029      	movs	r1, r5
 8002f84:	3174      	adds	r1, #116	; 0x74
 8002f86:	f000 f9a9 	bl	80032dc <_malloc_r>
 8002f8a:	1e04      	subs	r4, r0, #0
 8002f8c:	d008      	beq.n	8002fa0 <__sfmoreglue+0x28>
 8002f8e:	2100      	movs	r1, #0
 8002f90:	002a      	movs	r2, r5
 8002f92:	6001      	str	r1, [r0, #0]
 8002f94:	6046      	str	r6, [r0, #4]
 8002f96:	300c      	adds	r0, #12
 8002f98:	60a0      	str	r0, [r4, #8]
 8002f9a:	3268      	adds	r2, #104	; 0x68
 8002f9c:	f7ff fda2 	bl	8002ae4 <memset>
 8002fa0:	0020      	movs	r0, r4
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}

08002fa4 <__sfp_lock_acquire>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <__sfp_lock_acquire+0xc>)
 8002fa8:	f000 f8bd 	bl	8003126 <__retarget_lock_acquire_recursive>
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000181 	.word	0x20000181

08002fb4 <__sfp_lock_release>:
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <__sfp_lock_release+0xc>)
 8002fb8:	f000 f8b6 	bl	8003128 <__retarget_lock_release_recursive>
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	20000181 	.word	0x20000181

08002fc4 <__sinit_lock_acquire>:
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <__sinit_lock_acquire+0xc>)
 8002fc8:	f000 f8ad 	bl	8003126 <__retarget_lock_acquire_recursive>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	20000182 	.word	0x20000182

08002fd4 <__sinit_lock_release>:
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <__sinit_lock_release+0xc>)
 8002fd8:	f000 f8a6 	bl	8003128 <__retarget_lock_release_recursive>
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	20000182 	.word	0x20000182

08002fe4 <__sinit>:
 8002fe4:	b513      	push	{r0, r1, r4, lr}
 8002fe6:	0004      	movs	r4, r0
 8002fe8:	f7ff ffec 	bl	8002fc4 <__sinit_lock_acquire>
 8002fec:	69a3      	ldr	r3, [r4, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <__sinit+0x14>
 8002ff2:	f7ff ffef 	bl	8002fd4 <__sinit_lock_release>
 8002ff6:	bd13      	pop	{r0, r1, r4, pc}
 8002ff8:	64a3      	str	r3, [r4, #72]	; 0x48
 8002ffa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002ffc:	6523      	str	r3, [r4, #80]	; 0x50
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <__sinit+0x68>)
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <__sinit+0x6c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	62a2      	str	r2, [r4, #40]	; 0x28
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	42a3      	cmp	r3, r4
 800300a:	d101      	bne.n	8003010 <__sinit+0x2c>
 800300c:	2301      	movs	r3, #1
 800300e:	61a3      	str	r3, [r4, #24]
 8003010:	0020      	movs	r0, r4
 8003012:	f000 f81f 	bl	8003054 <__sfp>
 8003016:	6060      	str	r0, [r4, #4]
 8003018:	0020      	movs	r0, r4
 800301a:	f000 f81b 	bl	8003054 <__sfp>
 800301e:	60a0      	str	r0, [r4, #8]
 8003020:	0020      	movs	r0, r4
 8003022:	f000 f817 	bl	8003054 <__sfp>
 8003026:	2200      	movs	r2, #0
 8003028:	2104      	movs	r1, #4
 800302a:	60e0      	str	r0, [r4, #12]
 800302c:	6860      	ldr	r0, [r4, #4]
 800302e:	f7ff ff77 	bl	8002f20 <std>
 8003032:	2201      	movs	r2, #1
 8003034:	2109      	movs	r1, #9
 8003036:	68a0      	ldr	r0, [r4, #8]
 8003038:	f7ff ff72 	bl	8002f20 <std>
 800303c:	2202      	movs	r2, #2
 800303e:	2112      	movs	r1, #18
 8003040:	68e0      	ldr	r0, [r4, #12]
 8003042:	f7ff ff6d 	bl	8002f20 <std>
 8003046:	2301      	movs	r3, #1
 8003048:	61a3      	str	r3, [r4, #24]
 800304a:	e7d2      	b.n	8002ff2 <__sinit+0xe>
 800304c:	08003610 	.word	0x08003610
 8003050:	08002f69 	.word	0x08002f69

08003054 <__sfp>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	0007      	movs	r7, r0
 8003058:	f7ff ffa4 	bl	8002fa4 <__sfp_lock_acquire>
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <__sfp+0x88>)
 800305e:	681e      	ldr	r6, [r3, #0]
 8003060:	69b3      	ldr	r3, [r6, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <__sfp+0x18>
 8003066:	0030      	movs	r0, r6
 8003068:	f7ff ffbc 	bl	8002fe4 <__sinit>
 800306c:	3648      	adds	r6, #72	; 0x48
 800306e:	68b4      	ldr	r4, [r6, #8]
 8003070:	6873      	ldr	r3, [r6, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	d504      	bpl.n	8003080 <__sfp+0x2c>
 8003076:	6833      	ldr	r3, [r6, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d022      	beq.n	80030c2 <__sfp+0x6e>
 800307c:	6836      	ldr	r6, [r6, #0]
 800307e:	e7f6      	b.n	800306e <__sfp+0x1a>
 8003080:	220c      	movs	r2, #12
 8003082:	5ea5      	ldrsh	r5, [r4, r2]
 8003084:	2d00      	cmp	r5, #0
 8003086:	d11a      	bne.n	80030be <__sfp+0x6a>
 8003088:	0020      	movs	r0, r4
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <__sfp+0x8c>)
 800308c:	3058      	adds	r0, #88	; 0x58
 800308e:	60e3      	str	r3, [r4, #12]
 8003090:	6665      	str	r5, [r4, #100]	; 0x64
 8003092:	f000 f847 	bl	8003124 <__retarget_lock_init_recursive>
 8003096:	f7ff ff8d 	bl	8002fb4 <__sfp_lock_release>
 800309a:	0020      	movs	r0, r4
 800309c:	2208      	movs	r2, #8
 800309e:	0029      	movs	r1, r5
 80030a0:	6025      	str	r5, [r4, #0]
 80030a2:	60a5      	str	r5, [r4, #8]
 80030a4:	6065      	str	r5, [r4, #4]
 80030a6:	6125      	str	r5, [r4, #16]
 80030a8:	6165      	str	r5, [r4, #20]
 80030aa:	61a5      	str	r5, [r4, #24]
 80030ac:	305c      	adds	r0, #92	; 0x5c
 80030ae:	f7ff fd19 	bl	8002ae4 <memset>
 80030b2:	6365      	str	r5, [r4, #52]	; 0x34
 80030b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80030b6:	64a5      	str	r5, [r4, #72]	; 0x48
 80030b8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80030ba:	0020      	movs	r0, r4
 80030bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030be:	3468      	adds	r4, #104	; 0x68
 80030c0:	e7d7      	b.n	8003072 <__sfp+0x1e>
 80030c2:	2104      	movs	r1, #4
 80030c4:	0038      	movs	r0, r7
 80030c6:	f7ff ff57 	bl	8002f78 <__sfmoreglue>
 80030ca:	1e04      	subs	r4, r0, #0
 80030cc:	6030      	str	r0, [r6, #0]
 80030ce:	d1d5      	bne.n	800307c <__sfp+0x28>
 80030d0:	f7ff ff70 	bl	8002fb4 <__sfp_lock_release>
 80030d4:	230c      	movs	r3, #12
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	e7ef      	b.n	80030ba <__sfp+0x66>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	08003610 	.word	0x08003610
 80030e0:	ffff0001 	.word	0xffff0001

080030e4 <_fwalk_reent>:
 80030e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e6:	0004      	movs	r4, r0
 80030e8:	0006      	movs	r6, r0
 80030ea:	2700      	movs	r7, #0
 80030ec:	9101      	str	r1, [sp, #4]
 80030ee:	3448      	adds	r4, #72	; 0x48
 80030f0:	6863      	ldr	r3, [r4, #4]
 80030f2:	68a5      	ldr	r5, [r4, #8]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	9b00      	ldr	r3, [sp, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	d504      	bpl.n	8003108 <_fwalk_reent+0x24>
 80030fe:	6824      	ldr	r4, [r4, #0]
 8003100:	2c00      	cmp	r4, #0
 8003102:	d1f5      	bne.n	80030f0 <_fwalk_reent+0xc>
 8003104:	0038      	movs	r0, r7
 8003106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003108:	89ab      	ldrh	r3, [r5, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d908      	bls.n	8003120 <_fwalk_reent+0x3c>
 800310e:	220e      	movs	r2, #14
 8003110:	5eab      	ldrsh	r3, [r5, r2]
 8003112:	3301      	adds	r3, #1
 8003114:	d004      	beq.n	8003120 <_fwalk_reent+0x3c>
 8003116:	0029      	movs	r1, r5
 8003118:	0030      	movs	r0, r6
 800311a:	9b01      	ldr	r3, [sp, #4]
 800311c:	4798      	blx	r3
 800311e:	4307      	orrs	r7, r0
 8003120:	3568      	adds	r5, #104	; 0x68
 8003122:	e7e8      	b.n	80030f6 <_fwalk_reent+0x12>

08003124 <__retarget_lock_init_recursive>:
 8003124:	4770      	bx	lr

08003126 <__retarget_lock_acquire_recursive>:
 8003126:	4770      	bx	lr

08003128 <__retarget_lock_release_recursive>:
 8003128:	4770      	bx	lr
	...

0800312c <__swhatbuf_r>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	000e      	movs	r6, r1
 8003130:	001d      	movs	r5, r3
 8003132:	230e      	movs	r3, #14
 8003134:	5ec9      	ldrsh	r1, [r1, r3]
 8003136:	0014      	movs	r4, r2
 8003138:	b096      	sub	sp, #88	; 0x58
 800313a:	2900      	cmp	r1, #0
 800313c:	da08      	bge.n	8003150 <__swhatbuf_r+0x24>
 800313e:	220c      	movs	r2, #12
 8003140:	5eb3      	ldrsh	r3, [r6, r2]
 8003142:	2200      	movs	r2, #0
 8003144:	602a      	str	r2, [r5, #0]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	d411      	bmi.n	800316e <__swhatbuf_r+0x42>
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	e00f      	b.n	8003170 <__swhatbuf_r+0x44>
 8003150:	466a      	mov	r2, sp
 8003152:	f000 f9bd 	bl	80034d0 <_fstat_r>
 8003156:	2800      	cmp	r0, #0
 8003158:	dbf1      	blt.n	800313e <__swhatbuf_r+0x12>
 800315a:	23f0      	movs	r3, #240	; 0xf0
 800315c:	9901      	ldr	r1, [sp, #4]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	4019      	ands	r1, r3
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <__swhatbuf_r+0x4c>)
 8003164:	18c9      	adds	r1, r1, r3
 8003166:	424b      	negs	r3, r1
 8003168:	4159      	adcs	r1, r3
 800316a:	6029      	str	r1, [r5, #0]
 800316c:	e7ed      	b.n	800314a <__swhatbuf_r+0x1e>
 800316e:	2340      	movs	r3, #64	; 0x40
 8003170:	2000      	movs	r0, #0
 8003172:	6023      	str	r3, [r4, #0]
 8003174:	b016      	add	sp, #88	; 0x58
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	ffffe000 	.word	0xffffe000

0800317c <__smakebuf_r>:
 800317c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800317e:	2602      	movs	r6, #2
 8003180:	898b      	ldrh	r3, [r1, #12]
 8003182:	0005      	movs	r5, r0
 8003184:	000c      	movs	r4, r1
 8003186:	4233      	tst	r3, r6
 8003188:	d006      	beq.n	8003198 <__smakebuf_r+0x1c>
 800318a:	0023      	movs	r3, r4
 800318c:	3347      	adds	r3, #71	; 0x47
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	6123      	str	r3, [r4, #16]
 8003192:	2301      	movs	r3, #1
 8003194:	6163      	str	r3, [r4, #20]
 8003196:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003198:	466a      	mov	r2, sp
 800319a:	ab01      	add	r3, sp, #4
 800319c:	f7ff ffc6 	bl	800312c <__swhatbuf_r>
 80031a0:	9900      	ldr	r1, [sp, #0]
 80031a2:	0007      	movs	r7, r0
 80031a4:	0028      	movs	r0, r5
 80031a6:	f000 f899 	bl	80032dc <_malloc_r>
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d108      	bne.n	80031c0 <__smakebuf_r+0x44>
 80031ae:	220c      	movs	r2, #12
 80031b0:	5ea3      	ldrsh	r3, [r4, r2]
 80031b2:	059a      	lsls	r2, r3, #22
 80031b4:	d4ef      	bmi.n	8003196 <__smakebuf_r+0x1a>
 80031b6:	2203      	movs	r2, #3
 80031b8:	4393      	bics	r3, r2
 80031ba:	431e      	orrs	r6, r3
 80031bc:	81a6      	strh	r6, [r4, #12]
 80031be:	e7e4      	b.n	800318a <__smakebuf_r+0xe>
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <__smakebuf_r+0x84>)
 80031c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	89a2      	ldrh	r2, [r4, #12]
 80031c8:	6020      	str	r0, [r4, #0]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	81a3      	strh	r3, [r4, #12]
 80031ce:	9b00      	ldr	r3, [sp, #0]
 80031d0:	6120      	str	r0, [r4, #16]
 80031d2:	6163      	str	r3, [r4, #20]
 80031d4:	9b01      	ldr	r3, [sp, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <__smakebuf_r+0x7a>
 80031da:	0028      	movs	r0, r5
 80031dc:	230e      	movs	r3, #14
 80031de:	5ee1      	ldrsh	r1, [r4, r3]
 80031e0:	f000 f988 	bl	80034f4 <_isatty_r>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d006      	beq.n	80031f6 <__smakebuf_r+0x7a>
 80031e8:	2203      	movs	r2, #3
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	4393      	bics	r3, r2
 80031ee:	001a      	movs	r2, r3
 80031f0:	2301      	movs	r3, #1
 80031f2:	4313      	orrs	r3, r2
 80031f4:	81a3      	strh	r3, [r4, #12]
 80031f6:	89a0      	ldrh	r0, [r4, #12]
 80031f8:	4307      	orrs	r7, r0
 80031fa:	81a7      	strh	r7, [r4, #12]
 80031fc:	e7cb      	b.n	8003196 <__smakebuf_r+0x1a>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	08002f69 	.word	0x08002f69

08003204 <_free_r>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	0005      	movs	r5, r0
 8003208:	2900      	cmp	r1, #0
 800320a:	d010      	beq.n	800322e <_free_r+0x2a>
 800320c:	1f0c      	subs	r4, r1, #4
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da00      	bge.n	8003216 <_free_r+0x12>
 8003214:	18e4      	adds	r4, r4, r3
 8003216:	0028      	movs	r0, r5
 8003218:	f000 f992 	bl	8003540 <__malloc_lock>
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <_free_r+0x90>)
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <_free_r+0x2c>
 8003224:	6063      	str	r3, [r4, #4]
 8003226:	6014      	str	r4, [r2, #0]
 8003228:	0028      	movs	r0, r5
 800322a:	f000 f991 	bl	8003550 <__malloc_unlock>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	42a3      	cmp	r3, r4
 8003232:	d908      	bls.n	8003246 <_free_r+0x42>
 8003234:	6821      	ldr	r1, [r4, #0]
 8003236:	1860      	adds	r0, r4, r1
 8003238:	4283      	cmp	r3, r0
 800323a:	d1f3      	bne.n	8003224 <_free_r+0x20>
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	1841      	adds	r1, r0, r1
 8003242:	6021      	str	r1, [r4, #0]
 8003244:	e7ee      	b.n	8003224 <_free_r+0x20>
 8003246:	001a      	movs	r2, r3
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <_free_r+0x4e>
 800324e:	42a3      	cmp	r3, r4
 8003250:	d9f9      	bls.n	8003246 <_free_r+0x42>
 8003252:	6811      	ldr	r1, [r2, #0]
 8003254:	1850      	adds	r0, r2, r1
 8003256:	42a0      	cmp	r0, r4
 8003258:	d10b      	bne.n	8003272 <_free_r+0x6e>
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	1809      	adds	r1, r1, r0
 800325e:	1850      	adds	r0, r2, r1
 8003260:	6011      	str	r1, [r2, #0]
 8003262:	4283      	cmp	r3, r0
 8003264:	d1e0      	bne.n	8003228 <_free_r+0x24>
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	1841      	adds	r1, r0, r1
 800326c:	6011      	str	r1, [r2, #0]
 800326e:	6053      	str	r3, [r2, #4]
 8003270:	e7da      	b.n	8003228 <_free_r+0x24>
 8003272:	42a0      	cmp	r0, r4
 8003274:	d902      	bls.n	800327c <_free_r+0x78>
 8003276:	230c      	movs	r3, #12
 8003278:	602b      	str	r3, [r5, #0]
 800327a:	e7d5      	b.n	8003228 <_free_r+0x24>
 800327c:	6821      	ldr	r1, [r4, #0]
 800327e:	1860      	adds	r0, r4, r1
 8003280:	4283      	cmp	r3, r0
 8003282:	d103      	bne.n	800328c <_free_r+0x88>
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	1841      	adds	r1, r0, r1
 800328a:	6021      	str	r1, [r4, #0]
 800328c:	6063      	str	r3, [r4, #4]
 800328e:	6054      	str	r4, [r2, #4]
 8003290:	e7ca      	b.n	8003228 <_free_r+0x24>
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	20000184 	.word	0x20000184

08003298 <sbrk_aligned>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	4e0f      	ldr	r6, [pc, #60]	; (80032d8 <sbrk_aligned+0x40>)
 800329c:	000d      	movs	r5, r1
 800329e:	6831      	ldr	r1, [r6, #0]
 80032a0:	0004      	movs	r4, r0
 80032a2:	2900      	cmp	r1, #0
 80032a4:	d102      	bne.n	80032ac <sbrk_aligned+0x14>
 80032a6:	f000 f88f 	bl	80033c8 <_sbrk_r>
 80032aa:	6030      	str	r0, [r6, #0]
 80032ac:	0029      	movs	r1, r5
 80032ae:	0020      	movs	r0, r4
 80032b0:	f000 f88a 	bl	80033c8 <_sbrk_r>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d00a      	beq.n	80032ce <sbrk_aligned+0x36>
 80032b8:	2303      	movs	r3, #3
 80032ba:	1cc5      	adds	r5, r0, #3
 80032bc:	439d      	bics	r5, r3
 80032be:	42a8      	cmp	r0, r5
 80032c0:	d007      	beq.n	80032d2 <sbrk_aligned+0x3a>
 80032c2:	1a29      	subs	r1, r5, r0
 80032c4:	0020      	movs	r0, r4
 80032c6:	f000 f87f 	bl	80033c8 <_sbrk_r>
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	d101      	bne.n	80032d2 <sbrk_aligned+0x3a>
 80032ce:	2501      	movs	r5, #1
 80032d0:	426d      	negs	r5, r5
 80032d2:	0028      	movs	r0, r5
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	20000188 	.word	0x20000188

080032dc <_malloc_r>:
 80032dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032de:	2203      	movs	r2, #3
 80032e0:	1ccb      	adds	r3, r1, #3
 80032e2:	4393      	bics	r3, r2
 80032e4:	3308      	adds	r3, #8
 80032e6:	0006      	movs	r6, r0
 80032e8:	001f      	movs	r7, r3
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d232      	bcs.n	8003354 <_malloc_r+0x78>
 80032ee:	270c      	movs	r7, #12
 80032f0:	42b9      	cmp	r1, r7
 80032f2:	d831      	bhi.n	8003358 <_malloc_r+0x7c>
 80032f4:	0030      	movs	r0, r6
 80032f6:	f000 f923 	bl	8003540 <__malloc_lock>
 80032fa:	4d32      	ldr	r5, [pc, #200]	; (80033c4 <_malloc_r+0xe8>)
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	001c      	movs	r4, r3
 8003300:	2c00      	cmp	r4, #0
 8003302:	d12e      	bne.n	8003362 <_malloc_r+0x86>
 8003304:	0039      	movs	r1, r7
 8003306:	0030      	movs	r0, r6
 8003308:	f7ff ffc6 	bl	8003298 <sbrk_aligned>
 800330c:	0004      	movs	r4, r0
 800330e:	1c43      	adds	r3, r0, #1
 8003310:	d11e      	bne.n	8003350 <_malloc_r+0x74>
 8003312:	682c      	ldr	r4, [r5, #0]
 8003314:	0025      	movs	r5, r4
 8003316:	2d00      	cmp	r5, #0
 8003318:	d14a      	bne.n	80033b0 <_malloc_r+0xd4>
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	0029      	movs	r1, r5
 800331e:	18e3      	adds	r3, r4, r3
 8003320:	0030      	movs	r0, r6
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	f000 f850 	bl	80033c8 <_sbrk_r>
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	4283      	cmp	r3, r0
 800332c:	d143      	bne.n	80033b6 <_malloc_r+0xda>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	3703      	adds	r7, #3
 8003332:	1aff      	subs	r7, r7, r3
 8003334:	2303      	movs	r3, #3
 8003336:	439f      	bics	r7, r3
 8003338:	3708      	adds	r7, #8
 800333a:	2f0c      	cmp	r7, #12
 800333c:	d200      	bcs.n	8003340 <_malloc_r+0x64>
 800333e:	270c      	movs	r7, #12
 8003340:	0039      	movs	r1, r7
 8003342:	0030      	movs	r0, r6
 8003344:	f7ff ffa8 	bl	8003298 <sbrk_aligned>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d034      	beq.n	80033b6 <_malloc_r+0xda>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	19df      	adds	r7, r3, r7
 8003350:	6027      	str	r7, [r4, #0]
 8003352:	e013      	b.n	800337c <_malloc_r+0xa0>
 8003354:	2b00      	cmp	r3, #0
 8003356:	dacb      	bge.n	80032f0 <_malloc_r+0x14>
 8003358:	230c      	movs	r3, #12
 800335a:	2500      	movs	r5, #0
 800335c:	6033      	str	r3, [r6, #0]
 800335e:	0028      	movs	r0, r5
 8003360:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	1bd1      	subs	r1, r2, r7
 8003366:	d420      	bmi.n	80033aa <_malloc_r+0xce>
 8003368:	290b      	cmp	r1, #11
 800336a:	d917      	bls.n	800339c <_malloc_r+0xc0>
 800336c:	19e2      	adds	r2, r4, r7
 800336e:	6027      	str	r7, [r4, #0]
 8003370:	42a3      	cmp	r3, r4
 8003372:	d111      	bne.n	8003398 <_malloc_r+0xbc>
 8003374:	602a      	str	r2, [r5, #0]
 8003376:	6863      	ldr	r3, [r4, #4]
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	6053      	str	r3, [r2, #4]
 800337c:	0030      	movs	r0, r6
 800337e:	0025      	movs	r5, r4
 8003380:	f000 f8e6 	bl	8003550 <__malloc_unlock>
 8003384:	2207      	movs	r2, #7
 8003386:	350b      	adds	r5, #11
 8003388:	1d23      	adds	r3, r4, #4
 800338a:	4395      	bics	r5, r2
 800338c:	1aea      	subs	r2, r5, r3
 800338e:	429d      	cmp	r5, r3
 8003390:	d0e5      	beq.n	800335e <_malloc_r+0x82>
 8003392:	1b5b      	subs	r3, r3, r5
 8003394:	50a3      	str	r3, [r4, r2]
 8003396:	e7e2      	b.n	800335e <_malloc_r+0x82>
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	e7ec      	b.n	8003376 <_malloc_r+0x9a>
 800339c:	6862      	ldr	r2, [r4, #4]
 800339e:	42a3      	cmp	r3, r4
 80033a0:	d101      	bne.n	80033a6 <_malloc_r+0xca>
 80033a2:	602a      	str	r2, [r5, #0]
 80033a4:	e7ea      	b.n	800337c <_malloc_r+0xa0>
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	e7e8      	b.n	800337c <_malloc_r+0xa0>
 80033aa:	0023      	movs	r3, r4
 80033ac:	6864      	ldr	r4, [r4, #4]
 80033ae:	e7a7      	b.n	8003300 <_malloc_r+0x24>
 80033b0:	002c      	movs	r4, r5
 80033b2:	686d      	ldr	r5, [r5, #4]
 80033b4:	e7af      	b.n	8003316 <_malloc_r+0x3a>
 80033b6:	230c      	movs	r3, #12
 80033b8:	0030      	movs	r0, r6
 80033ba:	6033      	str	r3, [r6, #0]
 80033bc:	f000 f8c8 	bl	8003550 <__malloc_unlock>
 80033c0:	e7cd      	b.n	800335e <_malloc_r+0x82>
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	20000184 	.word	0x20000184

080033c8 <_sbrk_r>:
 80033c8:	2300      	movs	r3, #0
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	4d06      	ldr	r5, [pc, #24]	; (80033e8 <_sbrk_r+0x20>)
 80033ce:	0004      	movs	r4, r0
 80033d0:	0008      	movs	r0, r1
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	f7fd fab8 	bl	8000948 <_sbrk>
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	d103      	bne.n	80033e4 <_sbrk_r+0x1c>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d000      	beq.n	80033e4 <_sbrk_r+0x1c>
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	2000018c 	.word	0x2000018c

080033ec <__sread>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	000c      	movs	r4, r1
 80033f0:	250e      	movs	r5, #14
 80033f2:	5f49      	ldrsh	r1, [r1, r5]
 80033f4:	f000 f8b4 	bl	8003560 <_read_r>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	db03      	blt.n	8003404 <__sread+0x18>
 80033fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033fe:	181b      	adds	r3, r3, r0
 8003400:	6563      	str	r3, [r4, #84]	; 0x54
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	4a02      	ldr	r2, [pc, #8]	; (8003410 <__sread+0x24>)
 8003408:	4013      	ands	r3, r2
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	e7f9      	b.n	8003402 <__sread+0x16>
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	ffffefff 	.word	0xffffefff

08003414 <__swrite>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	001f      	movs	r7, r3
 8003418:	898b      	ldrh	r3, [r1, #12]
 800341a:	0005      	movs	r5, r0
 800341c:	000c      	movs	r4, r1
 800341e:	0016      	movs	r6, r2
 8003420:	05db      	lsls	r3, r3, #23
 8003422:	d505      	bpl.n	8003430 <__swrite+0x1c>
 8003424:	230e      	movs	r3, #14
 8003426:	5ec9      	ldrsh	r1, [r1, r3]
 8003428:	2200      	movs	r2, #0
 800342a:	2302      	movs	r3, #2
 800342c:	f000 f874 	bl	8003518 <_lseek_r>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	4a05      	ldr	r2, [pc, #20]	; (8003448 <__swrite+0x34>)
 8003434:	0028      	movs	r0, r5
 8003436:	4013      	ands	r3, r2
 8003438:	81a3      	strh	r3, [r4, #12]
 800343a:	0032      	movs	r2, r6
 800343c:	230e      	movs	r3, #14
 800343e:	5ee1      	ldrsh	r1, [r4, r3]
 8003440:	003b      	movs	r3, r7
 8003442:	f000 f81f 	bl	8003484 <_write_r>
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003448:	ffffefff 	.word	0xffffefff

0800344c <__sseek>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	000c      	movs	r4, r1
 8003450:	250e      	movs	r5, #14
 8003452:	5f49      	ldrsh	r1, [r1, r5]
 8003454:	f000 f860 	bl	8003518 <_lseek_r>
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	1c42      	adds	r2, r0, #1
 800345c:	d103      	bne.n	8003466 <__sseek+0x1a>
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <__sseek+0x28>)
 8003460:	4013      	ands	r3, r2
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	bd70      	pop	{r4, r5, r6, pc}
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	0152      	lsls	r2, r2, #5
 800346a:	4313      	orrs	r3, r2
 800346c:	81a3      	strh	r3, [r4, #12]
 800346e:	6560      	str	r0, [r4, #84]	; 0x54
 8003470:	e7f8      	b.n	8003464 <__sseek+0x18>
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	ffffefff 	.word	0xffffefff

08003478 <__sclose>:
 8003478:	b510      	push	{r4, lr}
 800347a:	230e      	movs	r3, #14
 800347c:	5ec9      	ldrsh	r1, [r1, r3]
 800347e:	f000 f815 	bl	80034ac <_close_r>
 8003482:	bd10      	pop	{r4, pc}

08003484 <_write_r>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	0004      	movs	r4, r0
 8003488:	0008      	movs	r0, r1
 800348a:	0011      	movs	r1, r2
 800348c:	001a      	movs	r2, r3
 800348e:	2300      	movs	r3, #0
 8003490:	4d05      	ldr	r5, [pc, #20]	; (80034a8 <_write_r+0x24>)
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	f7fd fa10 	bl	80008b8 <_write>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d103      	bne.n	80034a4 <_write_r+0x20>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d000      	beq.n	80034a4 <_write_r+0x20>
 80034a2:	6023      	str	r3, [r4, #0]
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	2000018c 	.word	0x2000018c

080034ac <_close_r>:
 80034ac:	2300      	movs	r3, #0
 80034ae:	b570      	push	{r4, r5, r6, lr}
 80034b0:	4d06      	ldr	r5, [pc, #24]	; (80034cc <_close_r+0x20>)
 80034b2:	0004      	movs	r4, r0
 80034b4:	0008      	movs	r0, r1
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	f7fd fa1a 	bl	80008f0 <_close>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d103      	bne.n	80034c8 <_close_r+0x1c>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d000      	beq.n	80034c8 <_close_r+0x1c>
 80034c6:	6023      	str	r3, [r4, #0]
 80034c8:	bd70      	pop	{r4, r5, r6, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	2000018c 	.word	0x2000018c

080034d0 <_fstat_r>:
 80034d0:	2300      	movs	r3, #0
 80034d2:	b570      	push	{r4, r5, r6, lr}
 80034d4:	4d06      	ldr	r5, [pc, #24]	; (80034f0 <_fstat_r+0x20>)
 80034d6:	0004      	movs	r4, r0
 80034d8:	0008      	movs	r0, r1
 80034da:	0011      	movs	r1, r2
 80034dc:	602b      	str	r3, [r5, #0]
 80034de:	f7fd fa11 	bl	8000904 <_fstat>
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	d103      	bne.n	80034ee <_fstat_r+0x1e>
 80034e6:	682b      	ldr	r3, [r5, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d000      	beq.n	80034ee <_fstat_r+0x1e>
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	2000018c 	.word	0x2000018c

080034f4 <_isatty_r>:
 80034f4:	2300      	movs	r3, #0
 80034f6:	b570      	push	{r4, r5, r6, lr}
 80034f8:	4d06      	ldr	r5, [pc, #24]	; (8003514 <_isatty_r+0x20>)
 80034fa:	0004      	movs	r4, r0
 80034fc:	0008      	movs	r0, r1
 80034fe:	602b      	str	r3, [r5, #0]
 8003500:	f7fd fa0e 	bl	8000920 <_isatty>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d103      	bne.n	8003510 <_isatty_r+0x1c>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d000      	beq.n	8003510 <_isatty_r+0x1c>
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	bd70      	pop	{r4, r5, r6, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	2000018c 	.word	0x2000018c

08003518 <_lseek_r>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	0004      	movs	r4, r0
 800351c:	0008      	movs	r0, r1
 800351e:	0011      	movs	r1, r2
 8003520:	001a      	movs	r2, r3
 8003522:	2300      	movs	r3, #0
 8003524:	4d05      	ldr	r5, [pc, #20]	; (800353c <_lseek_r+0x24>)
 8003526:	602b      	str	r3, [r5, #0]
 8003528:	f7fd fa03 	bl	8000932 <_lseek>
 800352c:	1c43      	adds	r3, r0, #1
 800352e:	d103      	bne.n	8003538 <_lseek_r+0x20>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d000      	beq.n	8003538 <_lseek_r+0x20>
 8003536:	6023      	str	r3, [r4, #0]
 8003538:	bd70      	pop	{r4, r5, r6, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	2000018c 	.word	0x2000018c

08003540 <__malloc_lock>:
 8003540:	b510      	push	{r4, lr}
 8003542:	4802      	ldr	r0, [pc, #8]	; (800354c <__malloc_lock+0xc>)
 8003544:	f7ff fdef 	bl	8003126 <__retarget_lock_acquire_recursive>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000180 	.word	0x20000180

08003550 <__malloc_unlock>:
 8003550:	b510      	push	{r4, lr}
 8003552:	4802      	ldr	r0, [pc, #8]	; (800355c <__malloc_unlock+0xc>)
 8003554:	f7ff fde8 	bl	8003128 <__retarget_lock_release_recursive>
 8003558:	bd10      	pop	{r4, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000180 	.word	0x20000180

08003560 <_read_r>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	0004      	movs	r4, r0
 8003564:	0008      	movs	r0, r1
 8003566:	0011      	movs	r1, r2
 8003568:	001a      	movs	r2, r3
 800356a:	2300      	movs	r3, #0
 800356c:	4d05      	ldr	r5, [pc, #20]	; (8003584 <_read_r+0x24>)
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	f7fd f985 	bl	800087e <_read>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d103      	bne.n	8003580 <_read_r+0x20>
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d000      	beq.n	8003580 <_read_r+0x20>
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	2000018c 	.word	0x2000018c

08003588 <_init>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr

08003594 <_fini>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr
