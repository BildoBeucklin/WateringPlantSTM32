
e-paper-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08004c4c  08004c4c  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c4c  08004c4c  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08004c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000110  08004d64  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004d64  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf71  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dee  00000000  00000000  0002c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002de98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ff9  00000000  00000000  0002f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e031  00000000  00000000  00048259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfec  00000000  00000000  0005628a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd8  00000000  00000000  000e42c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000110 	.word	0x20000110
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004790 	.word	0x08004790

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000114 	.word	0x20000114
 8000104:	08004790 	.word	0x08004790

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f0xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000240:	23fa      	movs	r3, #250	; 0xfa
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	1df9      	adds	r1, r7, #7
 8000246:	4804      	ldr	r0, [pc, #16]	; (8000258 <DEV_SPI_WriteByte+0x24>)
 8000248:	2201      	movs	r2, #1
 800024a:	f002 fb7d 	bl	8002948 <HAL_SPI_Transmit>
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	20000144 	.word	0x20000144

0800025c <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2200      	movs	r2, #0
 8000266:	2104      	movs	r1, #4
 8000268:	0018      	movs	r0, r3
 800026a:	f001 fcb8 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800026e:	2390      	movs	r3, #144	; 0x90
 8000270:	05db      	lsls	r3, r3, #23
 8000272:	2200      	movs	r2, #0
 8000274:	2110      	movs	r1, #16
 8000276:	0018      	movs	r0, r3
 8000278:	f001 fcb1 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800027c:	2390      	movs	r3, #144	; 0x90
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	2201      	movs	r2, #1
 8000282:	2102      	movs	r1, #2
 8000284:	0018      	movs	r0, r3
 8000286:	f001 fcaa 	bl	8001bde <HAL_GPIO_WritePin>
		return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	0018      	movs	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54_V2_Reset(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2201      	movs	r2, #1
 800029c:	2102      	movs	r1, #2
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 fc9d 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80002a4:	20c8      	movs	r0, #200	; 0xc8
 80002a6:	f001 fa3d 	bl	8001724 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80002aa:	2390      	movs	r3, #144	; 0x90
 80002ac:	05db      	lsls	r3, r3, #23
 80002ae:	2200      	movs	r2, #0
 80002b0:	2102      	movs	r1, #2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fc93 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 80002b8:	2002      	movs	r0, #2
 80002ba:	f001 fa33 	bl	8001724 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80002be:	2390      	movs	r3, #144	; 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	2201      	movs	r2, #1
 80002c4:	2102      	movs	r1, #2
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 fc89 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 80002cc:	20c8      	movs	r0, #200	; 0xc8
 80002ce:	f001 fa29 	bl	8001724 <HAL_Delay>
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	0002      	movs	r2, r0
 80002e0:	1dfb      	adds	r3, r7, #7
 80002e2:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80002e4:	2390      	movs	r3, #144	; 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2200      	movs	r2, #0
 80002ea:	2104      	movs	r1, #4
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fc76 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80002f2:	2390      	movs	r3, #144	; 0x90
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	2200      	movs	r2, #0
 80002f8:	2110      	movs	r1, #16
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 fc6f 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0018      	movs	r0, r3
 8000306:	f7ff ff95 	bl	8000234 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800030a:	2390      	movs	r3, #144	; 0x90
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	2201      	movs	r2, #1
 8000310:	2110      	movs	r1, #16
 8000312:	0018      	movs	r0, r3
 8000314:	f001 fc63 	bl	8001bde <HAL_GPIO_WritePin>
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b002      	add	sp, #8
 800031e:	bd80      	pop	{r7, pc}

08000320 <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	0002      	movs	r2, r0
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800032c:	2390      	movs	r3, #144	; 0x90
 800032e:	05db      	lsls	r3, r3, #23
 8000330:	2201      	movs	r2, #1
 8000332:	2104      	movs	r1, #4
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fc52 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800033a:	2390      	movs	r3, #144	; 0x90
 800033c:	05db      	lsls	r3, r3, #23
 800033e:	2200      	movs	r2, #0
 8000340:	2110      	movs	r1, #16
 8000342:	0018      	movs	r0, r3
 8000344:	f001 fc4b 	bl	8001bde <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	0018      	movs	r0, r3
 800034e:	f7ff ff71 	bl	8000234 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	2201      	movs	r2, #1
 8000358:	2110      	movs	r1, #16
 800035a:	0018      	movs	r0, r3
 800035c:	f001 fc3f 	bl	8001bde <HAL_GPIO_WritePin>
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b002      	add	sp, #8
 8000366:	bd80      	pop	{r7, pc}

08000368 <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <EPD_1IN54_V2_ReadBusy+0x34>)
 800036e:	0018      	movs	r0, r3
 8000370:	f003 fb28 	bl	80039c4 <puts>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 8000374:	e002      	b.n	800037c <EPD_1IN54_V2_ReadBusy+0x14>
        DEV_Delay_ms(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f001 f9d4 	bl	8001724 <HAL_Delay>
    while(DEV_Digital_Read(EPD_BUSY_PIN) == 1) {      //LOW: idle, HIGH: busy
 800037c:	2390      	movs	r3, #144	; 0x90
 800037e:	05db      	lsls	r3, r3, #23
 8000380:	2108      	movs	r1, #8
 8000382:	0018      	movs	r0, r3
 8000384:	f001 fc0e 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8000388:	0003      	movs	r3, r0
 800038a:	2b01      	cmp	r3, #1
 800038c:	d0f3      	beq.n	8000376 <EPD_1IN54_V2_ReadBusy+0xe>
    }
    Debug("e-Paper busy release\r\n");
 800038e:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <EPD_1IN54_V2_ReadBusy+0x38>)
 8000390:	0018      	movs	r0, r3
 8000392:	f003 fb17 	bl	80039c4 <puts>
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	080047a8 	.word	0x080047a8
 80003a0:	080047c0 	.word	0x080047c0

080003a4 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 80003a8:	2022      	movs	r0, #34	; 0x22
 80003aa:	f7ff ff95 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc7);
 80003ae:	20c7      	movs	r0, #199	; 0xc7
 80003b0:	f7ff ffb6 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 80003b4:	2020      	movs	r0, #32
 80003b6:	f7ff ff8f 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 80003ba:	f7ff ffd5 	bl	8000368 <EPD_1IN54_V2_ReadBusy>
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <EPD_1IN54_V2_Lut>:
    EPD_1IN54_V2_SendCommand(0x20);
    EPD_1IN54_V2_ReadBusy();
}

static void EPD_1IN54_V2_Lut(UBYTE *lut)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	EPD_1IN54_V2_SendCommand(0x32);
 80003cc:	2032      	movs	r0, #50	; 0x32
 80003ce:	f7ff ff83 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
	for(UBYTE i=0; i<153; i++)
 80003d2:	230f      	movs	r3, #15
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
 80003da:	e00d      	b.n	80003f8 <EPD_1IN54_V2_Lut+0x34>
		EPD_1IN54_V2_SendData(lut[i]);
 80003dc:	240f      	movs	r4, #15
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	18d3      	adds	r3, r2, r3
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff99 	bl	8000320 <EPD_1IN54_V2_SendData>
	for(UBYTE i=0; i<153; i++)
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	781a      	ldrb	r2, [r3, #0]
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	3201      	adds	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	230f      	movs	r3, #15
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b98      	cmp	r3, #152	; 0x98
 8000400:	d9ec      	bls.n	80003dc <EPD_1IN54_V2_Lut+0x18>
	EPD_1IN54_V2_ReadBusy();
 8000402:	f7ff ffb1 	bl	8000368 <EPD_1IN54_V2_ReadBusy>
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b005      	add	sp, #20
 800040c:	bd90      	pop	{r4, r7, pc}

0800040e <EPD_1IN54_V2_SetLut>:

static void EPD_1IN54_V2_SetLut(UBYTE *lut)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
	EPD_1IN54_V2_Lut(lut);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	0018      	movs	r0, r3
 800041a:	f7ff ffd3 	bl	80003c4 <EPD_1IN54_V2_Lut>
	
    EPD_1IN54_V2_SendCommand(0x3f);
 800041e:	203f      	movs	r0, #63	; 0x3f
 8000420:	f7ff ff5a 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[153]);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3399      	adds	r3, #153	; 0x99
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ff78 	bl	8000320 <EPD_1IN54_V2_SendData>
	
    EPD_1IN54_V2_SendCommand(0x03);
 8000430:	2003      	movs	r0, #3
 8000432:	f7ff ff51 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[154]);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	339a      	adds	r3, #154	; 0x9a
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	0018      	movs	r0, r3
 800043e:	f7ff ff6f 	bl	8000320 <EPD_1IN54_V2_SendData>
	
    EPD_1IN54_V2_SendCommand(0x04);
 8000442:	2004      	movs	r0, #4
 8000444:	f7ff ff48 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[155]);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	339b      	adds	r3, #155	; 0x9b
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	0018      	movs	r0, r3
 8000450:	f7ff ff66 	bl	8000320 <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(lut[156]);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	339c      	adds	r3, #156	; 0x9c
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	0018      	movs	r0, r3
 800045c:	f7ff ff60 	bl	8000320 <EPD_1IN54_V2_SendData>
	EPD_1IN54_V2_SendData(lut[157]);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	339d      	adds	r3, #157	; 0x9d
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	0018      	movs	r0, r3
 8000468:	f7ff ff5a 	bl	8000320 <EPD_1IN54_V2_SendData>
	
	EPD_1IN54_V2_SendCommand(0x2c);
 800046c:	202c      	movs	r0, #44	; 0x2c
 800046e:	f7ff ff33 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[158]);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	339e      	adds	r3, #158	; 0x9e
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff ff51 	bl	8000320 <EPD_1IN54_V2_SendData>
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b002      	add	sp, #8
 8000484:	bd80      	pop	{r7, pc}

08000486 <EPD_1IN54_V2_SetWindows>:

static void EPD_1IN54_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8000486:	b5b0      	push	{r4, r5, r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	0005      	movs	r5, r0
 800048e:	000c      	movs	r4, r1
 8000490:	0010      	movs	r0, r2
 8000492:	0019      	movs	r1, r3
 8000494:	1dbb      	adds	r3, r7, #6
 8000496:	1c2a      	adds	r2, r5, #0
 8000498:	801a      	strh	r2, [r3, #0]
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	1c22      	adds	r2, r4, #0
 800049e:	801a      	strh	r2, [r3, #0]
 80004a0:	1cbb      	adds	r3, r7, #2
 80004a2:	1c02      	adds	r2, r0, #0
 80004a4:	801a      	strh	r2, [r3, #0]
 80004a6:	003b      	movs	r3, r7
 80004a8:	1c0a      	adds	r2, r1, #0
 80004aa:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 80004ac:	2044      	movs	r0, #68	; 0x44
 80004ae:	f7ff ff13 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData((Xstart>>3) & 0xFF);
 80004b2:	1dbb      	adds	r3, r7, #6
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	0018      	movs	r0, r3
 80004be:	f7ff ff2f 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Xend>>3) & 0xFF);
 80004c2:	1cbb      	adds	r3, r7, #2
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	08db      	lsrs	r3, r3, #3
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ff27 	bl	8000320 <EPD_1IN54_V2_SendData>
	
    EPD_1IN54_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80004d2:	2045      	movs	r0, #69	; 0x45
 80004d4:	f7ff ff00 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	f7ff ff1e 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	0a1b      	lsrs	r3, r3, #8
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff ff16 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(Yend & 0xFF);
 80004f4:	003b      	movs	r3, r7
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff ff10 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Yend >> 8) & 0xFF);
 8000500:	003b      	movs	r3, r7
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	b29b      	uxth	r3, r3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff ff08 	bl	8000320 <EPD_1IN54_V2_SendData>
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b002      	add	sp, #8
 8000516:	bdb0      	pop	{r4, r5, r7, pc}

08000518 <EPD_1IN54_V2_SetCursor>:

static void EPD_1IN54_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	0002      	movs	r2, r0
 8000520:	1dbb      	adds	r3, r7, #6
 8000522:	801a      	strh	r2, [r3, #0]
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	1c0a      	adds	r2, r1, #0
 8000528:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800052a:	204e      	movs	r0, #78	; 0x4e
 800052c:	f7ff fed4 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Xstart & 0xFF);
 8000530:	1dbb      	adds	r3, r7, #6
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	0018      	movs	r0, r3
 8000538:	f7ff fef2 	bl	8000320 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800053c:	204f      	movs	r0, #79	; 0x4f
 800053e:	f7ff fecb 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	0018      	movs	r0, r3
 800054a:	f7ff fee9 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	b29b      	uxth	r3, r3
 8000556:	b2db      	uxtb	r3, r3
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff fee1 	bl	8000320 <EPD_1IN54_V2_SendData>
}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b002      	add	sp, #8
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800056c:	f7ff fe91 	bl	8000292 <EPD_1IN54_V2_Reset>

    EPD_1IN54_V2_ReadBusy();
 8000570:	f7ff fefa 	bl	8000368 <EPD_1IN54_V2_ReadBusy>
    EPD_1IN54_V2_SendCommand(0x12);  //SWRESET
 8000574:	2012      	movs	r0, #18
 8000576:	f7ff feaf 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_ReadBusy();
 800057a:	f7ff fef5 	bl	8000368 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SendCommand(0x01); //Driver output control
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff feaa 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 8000584:	20c7      	movs	r0, #199	; 0xc7
 8000586:	f7ff fecb 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800058a:	2000      	movs	r0, #0
 800058c:	f7ff fec8 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff fec5 	bl	8000320 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); //data entry mode
 8000596:	2011      	movs	r0, #17
 8000598:	f7ff fe9e 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff febf 	bl	8000320 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SetWindows(0, EPD_1IN54_V2_HEIGHT-1, EPD_1IN54_V2_WIDTH-1, 0);
 80005a2:	2300      	movs	r3, #0
 80005a4:	22c7      	movs	r2, #199	; 0xc7
 80005a6:	21c7      	movs	r1, #199	; 0xc7
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff ff6c 	bl	8000486 <EPD_1IN54_V2_SetWindows>

    EPD_1IN54_V2_SendCommand(0x3C); //BorderWavefrom
 80005ae:	203c      	movs	r0, #60	; 0x3c
 80005b0:	f7ff fe92 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff feb3 	bl	8000320 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 80005ba:	2018      	movs	r0, #24
 80005bc:	f7ff fe8c 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 80005c0:	2080      	movs	r0, #128	; 0x80
 80005c2:	f7ff fead 	bl	8000320 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // //Load Temperature and waveform setting.
 80005c6:	2022      	movs	r0, #34	; 0x22
 80005c8:	f7ff fe86 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 80005cc:	20b1      	movs	r0, #177	; 0xb1
 80005ce:	f7ff fea7 	bl	8000320 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 80005d2:	2020      	movs	r0, #32
 80005d4:	f7ff fe80 	bl	80002d8 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SetCursor(0, EPD_1IN54_V2_HEIGHT-1);
 80005d8:	21c7      	movs	r1, #199	; 0xc7
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ff9c 	bl	8000518 <EPD_1IN54_V2_SetCursor>
    EPD_1IN54_V2_ReadBusy();
 80005e0:	f7ff fec2 	bl	8000368 <EPD_1IN54_V2_ReadBusy>

    EPD_1IN54_V2_SetLut(WF_Full_1IN54);
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <EPD_1IN54_V2_Init+0x8c>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ff11 	bl	800040e <EPD_1IN54_V2_SetLut>
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000000 	.word	0x20000000

080005f8 <EPD_1IN54_V2_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_1IN54_V2_Clear(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80005fe:	1dbb      	adds	r3, r7, #6
 8000600:	2219      	movs	r2, #25
 8000602:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	801a      	strh	r2, [r3, #0]

    EPD_1IN54_V2_SendCommand(0x24);
 800060a:	2024      	movs	r0, #36	; 0x24
 800060c:	f7ff fe64 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000610:	230e      	movs	r3, #14
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2200      	movs	r2, #0
 8000616:	801a      	strh	r2, [r3, #0]
 8000618:	e01a      	b.n	8000650 <EPD_1IN54_V2_Clear+0x58>
        for (UWORD i = 0; i < Width; i++) {
 800061a:	230c      	movs	r3, #12
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	2200      	movs	r2, #0
 8000620:	801a      	strh	r2, [r3, #0]
 8000622:	e008      	b.n	8000636 <EPD_1IN54_V2_Clear+0x3e>
            EPD_1IN54_V2_SendData(0XFF);
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	f7ff fe7b 	bl	8000320 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800062a:	210c      	movs	r1, #12
 800062c:	187b      	adds	r3, r7, r1
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	187b      	adds	r3, r7, r1
 8000632:	3201      	adds	r2, #1
 8000634:	801a      	strh	r2, [r3, #0]
 8000636:	230c      	movs	r3, #12
 8000638:	18fa      	adds	r2, r7, r3
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	8812      	ldrh	r2, [r2, #0]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d3ef      	bcc.n	8000624 <EPD_1IN54_V2_Clear+0x2c>
    for (UWORD j = 0; j < Height; j++) {
 8000644:	210e      	movs	r1, #14
 8000646:	187b      	adds	r3, r7, r1
 8000648:	881a      	ldrh	r2, [r3, #0]
 800064a:	187b      	adds	r3, r7, r1
 800064c:	3201      	adds	r2, #1
 800064e:	801a      	strh	r2, [r3, #0]
 8000650:	230e      	movs	r3, #14
 8000652:	18fa      	adds	r2, r7, r3
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	8812      	ldrh	r2, [r2, #0]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	d3dd      	bcc.n	800061a <EPD_1IN54_V2_Clear+0x22>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800065e:	2026      	movs	r0, #38	; 0x26
 8000660:	f7ff fe3a 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000664:	230a      	movs	r3, #10
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	2200      	movs	r2, #0
 800066a:	801a      	strh	r2, [r3, #0]
 800066c:	e01a      	b.n	80006a4 <EPD_1IN54_V2_Clear+0xac>
        for (UWORD i = 0; i < Width; i++) {
 800066e:	2308      	movs	r3, #8
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	2200      	movs	r2, #0
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	e008      	b.n	800068a <EPD_1IN54_V2_Clear+0x92>
            EPD_1IN54_V2_SendData(0XFF);
 8000678:	20ff      	movs	r0, #255	; 0xff
 800067a:	f7ff fe51 	bl	8000320 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800067e:	2108      	movs	r1, #8
 8000680:	187b      	adds	r3, r7, r1
 8000682:	881a      	ldrh	r2, [r3, #0]
 8000684:	187b      	adds	r3, r7, r1
 8000686:	3201      	adds	r2, #1
 8000688:	801a      	strh	r2, [r3, #0]
 800068a:	2308      	movs	r3, #8
 800068c:	18fa      	adds	r2, r7, r3
 800068e:	1dbb      	adds	r3, r7, #6
 8000690:	8812      	ldrh	r2, [r2, #0]
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d3ef      	bcc.n	8000678 <EPD_1IN54_V2_Clear+0x80>
    for (UWORD j = 0; j < Height; j++) {
 8000698:	210a      	movs	r1, #10
 800069a:	187b      	adds	r3, r7, r1
 800069c:	881a      	ldrh	r2, [r3, #0]
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	3201      	adds	r2, #1
 80006a2:	801a      	strh	r2, [r3, #0]
 80006a4:	230a      	movs	r3, #10
 80006a6:	18fa      	adds	r2, r7, r3
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	8812      	ldrh	r2, [r2, #0]
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3dd      	bcc.n	800066e <EPD_1IN54_V2_Clear+0x76>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 80006b2:	f7ff fe77 	bl	80003a4 <EPD_1IN54_V2_TurnOnDisplay>
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b004      	add	sp, #16
 80006bc:	bd80      	pop	{r7, pc}

080006be <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 80006be:	b590      	push	{r4, r7, lr}
 80006c0:	b087      	sub	sp, #28
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1);
 80006c6:	2312      	movs	r3, #18
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	2219      	movs	r2, #25
 80006cc:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 80006ce:	2310      	movs	r3, #16
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	22c8      	movs	r2, #200	; 0xc8
 80006d4:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 80006da:	2024      	movs	r0, #36	; 0x24
 80006dc:	f7ff fdfc 	bl	80002d8 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80006e0:	2316      	movs	r3, #22
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	801a      	strh	r2, [r3, #0]
 80006e8:	e02a      	b.n	8000740 <EPD_1IN54_V2_Display+0x82>
        for (UWORD i = 0; i < Width; i++) {
 80006ea:	2314      	movs	r3, #20
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	2200      	movs	r2, #0
 80006f0:	801a      	strh	r2, [r3, #0]
 80006f2:	e017      	b.n	8000724 <EPD_1IN54_V2_Display+0x66>
            Addr = i + j * Width;
 80006f4:	2414      	movs	r4, #20
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	881a      	ldrh	r2, [r3, #0]
 80006fa:	2316      	movs	r3, #22
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2112      	movs	r1, #18
 8000702:	1879      	adds	r1, r7, r1
 8000704:	8809      	ldrh	r1, [r1, #0]
 8000706:	434b      	muls	r3, r1
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	18d3      	adds	r3, r2, r3
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff fe03 	bl	8000320 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++) {
 800071a:	193b      	adds	r3, r7, r4
 800071c:	881a      	ldrh	r2, [r3, #0]
 800071e:	193b      	adds	r3, r7, r4
 8000720:	3201      	adds	r2, #1
 8000722:	801a      	strh	r2, [r3, #0]
 8000724:	2314      	movs	r3, #20
 8000726:	18fa      	adds	r2, r7, r3
 8000728:	2312      	movs	r3, #18
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	8812      	ldrh	r2, [r2, #0]
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3df      	bcc.n	80006f4 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8000734:	2116      	movs	r1, #22
 8000736:	187b      	adds	r3, r7, r1
 8000738:	881a      	ldrh	r2, [r3, #0]
 800073a:	187b      	adds	r3, r7, r1
 800073c:	3201      	adds	r2, #1
 800073e:	801a      	strh	r2, [r3, #0]
 8000740:	2316      	movs	r3, #22
 8000742:	18fa      	adds	r2, r7, r3
 8000744:	2310      	movs	r3, #16
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3cc      	bcc.n	80006ea <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 8000750:	f7ff fe28 	bl	80003a4 <EPD_1IN54_V2_TurnOnDisplay>
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b007      	add	sp, #28
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	000c      	movs	r4, r1
 8000766:	0010      	movs	r0, r2
 8000768:	0019      	movs	r1, r3
 800076a:	250a      	movs	r5, #10
 800076c:	197b      	adds	r3, r7, r5
 800076e:	1c22      	adds	r2, r4, #0
 8000770:	801a      	strh	r2, [r3, #0]
 8000772:	2408      	movs	r4, #8
 8000774:	193b      	adds	r3, r7, r4
 8000776:	1c02      	adds	r2, r0, #0
 8000778:	801a      	strh	r2, [r3, #0]
 800077a:	1dbb      	adds	r3, r7, #6
 800077c:	1c0a      	adds	r2, r1, #0
 800077e:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <Paint_NewImage+0xd8>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <Paint_NewImage+0xd8>)
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <Paint_NewImage+0xd8>)
 800078e:	0029      	movs	r1, r5
 8000790:	187a      	adds	r2, r7, r1
 8000792:	8812      	ldrh	r2, [r2, #0]
 8000794:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <Paint_NewImage+0xd8>)
 8000798:	193a      	adds	r2, r7, r4
 800079a:	8812      	ldrh	r2, [r2, #0]
 800079c:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;    
 800079e:	4a25      	ldr	r2, [pc, #148]	; (8000834 <Paint_NewImage+0xd8>)
 80007a0:	2320      	movs	r3, #32
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <Paint_NewImage+0xd8>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	2207      	movs	r2, #7
 80007b4:	4013      	ands	r3, r2
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d104      	bne.n	80007c6 <Paint_NewImage+0x6a>
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	e006      	b.n	80007d4 <Paint_NewImage+0x78>
 80007c6:	230a      	movs	r3, #10
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	3301      	adds	r3, #1
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <Paint_NewImage+0xd8>)
 80007d6:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <Paint_NewImage+0xd8>)
 80007da:	2208      	movs	r2, #8
 80007dc:	18ba      	adds	r2, r7, r2
 80007de:	8812      	ldrh	r2, [r2, #0]
 80007e0:	829a      	strh	r2, [r3, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <Paint_NewImage+0xd8>)
 80007e4:	1dba      	adds	r2, r7, #6
 80007e6:	8812      	ldrh	r2, [r2, #0]
 80007e8:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <Paint_NewImage+0xd8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d003      	beq.n	8000800 <Paint_NewImage+0xa4>
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2bb4      	cmp	r3, #180	; 0xb4
 80007fe:	d10a      	bne.n	8000816 <Paint_NewImage+0xba>
        Paint.Width = Width;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <Paint_NewImage+0xd8>)
 8000802:	220a      	movs	r2, #10
 8000804:	18ba      	adds	r2, r7, r2
 8000806:	8812      	ldrh	r2, [r2, #0]
 8000808:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <Paint_NewImage+0xd8>)
 800080c:	2208      	movs	r2, #8
 800080e:	18ba      	adds	r2, r7, r2
 8000810:	8812      	ldrh	r2, [r2, #0]
 8000812:	80da      	strh	r2, [r3, #6]
 8000814:	e00a      	b.n	800082c <Paint_NewImage+0xd0>
    } else {
        Paint.Width = Height;
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <Paint_NewImage+0xd8>)
 8000818:	2208      	movs	r2, #8
 800081a:	18ba      	adds	r2, r7, r2
 800081c:	8812      	ldrh	r2, [r2, #0]
 800081e:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <Paint_NewImage+0xd8>)
 8000822:	220a      	movs	r2, #10
 8000824:	18ba      	adds	r2, r7, r2
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	80da      	strh	r2, [r3, #6]
    }
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bdb0      	pop	{r4, r5, r7, pc}
 8000834:	2000012c 	.word	0x2000012c

08000838 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <Paint_SelectImage+0x18>)
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	2000012c 	.word	0x2000012c

08000854 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	0004      	movs	r4, r0
 800085c:	0008      	movs	r0, r1
 800085e:	0011      	movs	r1, r2
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	1c22      	adds	r2, r4, #0
 8000864:	801a      	strh	r2, [r3, #0]
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	1c02      	adds	r2, r0, #0
 800086a:	801a      	strh	r2, [r3, #0]
 800086c:	1cbb      	adds	r3, r7, #2
 800086e:	1c0a      	adds	r2, r1, #0
 8000870:	801a      	strh	r2, [r3, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000872:	4bc6      	ldr	r3, [pc, #792]	; (8000b8c <Paint_SetPixel+0x338>)
 8000874:	889b      	ldrh	r3, [r3, #4]
 8000876:	1dba      	adds	r2, r7, #6
 8000878:	8812      	ldrh	r2, [r2, #0]
 800087a:	429a      	cmp	r2, r3
 800087c:	d805      	bhi.n	800088a <Paint_SetPixel+0x36>
 800087e:	4bc3      	ldr	r3, [pc, #780]	; (8000b8c <Paint_SetPixel+0x338>)
 8000880:	88db      	ldrh	r3, [r3, #6]
 8000882:	1d3a      	adds	r2, r7, #4
 8000884:	8812      	ldrh	r2, [r2, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d904      	bls.n	8000894 <Paint_SetPixel+0x40>
        Debug("Exceeding display boundaries\r\n");
 800088a:	4bc1      	ldr	r3, [pc, #772]	; (8000b90 <Paint_SetPixel+0x33c>)
 800088c:	0018      	movs	r0, r3
 800088e:	f003 f899 	bl	80039c4 <puts>
        return;
 8000892:	e180      	b.n	8000b96 <Paint_SetPixel+0x342>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000894:	4bbd      	ldr	r3, [pc, #756]	; (8000b8c <Paint_SetPixel+0x338>)
 8000896:	89db      	ldrh	r3, [r3, #14]
 8000898:	2287      	movs	r2, #135	; 0x87
 800089a:	0052      	lsls	r2, r2, #1
 800089c:	4293      	cmp	r3, r2
 800089e:	d03d      	beq.n	800091c <Paint_SetPixel+0xc8>
 80008a0:	2287      	movs	r2, #135	; 0x87
 80008a2:	0052      	lsls	r2, r2, #1
 80008a4:	4293      	cmp	r3, r2
 80008a6:	dd00      	ble.n	80008aa <Paint_SetPixel+0x56>
 80008a8:	e16e      	b.n	8000b88 <Paint_SetPixel+0x334>
 80008aa:	2bb4      	cmp	r3, #180	; 0xb4
 80008ac:	d021      	beq.n	80008f2 <Paint_SetPixel+0x9e>
 80008ae:	dd00      	ble.n	80008b2 <Paint_SetPixel+0x5e>
 80008b0:	e16a      	b.n	8000b88 <Paint_SetPixel+0x334>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <Paint_SetPixel+0x68>
 80008b6:	2b5a      	cmp	r3, #90	; 0x5a
 80008b8:	d00b      	beq.n	80008d2 <Paint_SetPixel+0x7e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80008ba:	e165      	b.n	8000b88 <Paint_SetPixel+0x334>
        X = Xpoint;
 80008bc:	2326      	movs	r3, #38	; 0x26
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	1dba      	adds	r2, r7, #6
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;  
 80008c6:	2324      	movs	r3, #36	; 0x24
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	8812      	ldrh	r2, [r2, #0]
 80008ce:	801a      	strh	r2, [r3, #0]
        break;
 80008d0:	e034      	b.n	800093c <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Ypoint - 1;
 80008d2:	4bae      	ldr	r3, [pc, #696]	; (8000b8c <Paint_SetPixel+0x338>)
 80008d4:	891a      	ldrh	r2, [r3, #8]
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29a      	uxth	r2, r3
 80008de:	2326      	movs	r3, #38	; 0x26
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	3a01      	subs	r2, #1
 80008e4:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 80008e6:	2324      	movs	r3, #36	; 0x24
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	1dba      	adds	r2, r7, #6
 80008ec:	8812      	ldrh	r2, [r2, #0]
 80008ee:	801a      	strh	r2, [r3, #0]
        break;
 80008f0:	e024      	b.n	800093c <Paint_SetPixel+0xe8>
        X = Paint.WidthMemory - Xpoint - 1;
 80008f2:	4ba6      	ldr	r3, [pc, #664]	; (8000b8c <Paint_SetPixel+0x338>)
 80008f4:	891a      	ldrh	r2, [r3, #8]
 80008f6:	1dbb      	adds	r3, r7, #6
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	2326      	movs	r3, #38	; 0x26
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	3a01      	subs	r2, #1
 8000904:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000906:	4ba1      	ldr	r3, [pc, #644]	; (8000b8c <Paint_SetPixel+0x338>)
 8000908:	895a      	ldrh	r2, [r3, #10]
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	b29a      	uxth	r2, r3
 8000912:	2324      	movs	r3, #36	; 0x24
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	3a01      	subs	r2, #1
 8000918:	801a      	strh	r2, [r3, #0]
        break;
 800091a:	e00f      	b.n	800093c <Paint_SetPixel+0xe8>
        X = Ypoint;
 800091c:	2326      	movs	r3, #38	; 0x26
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	1d3a      	adds	r2, r7, #4
 8000922:	8812      	ldrh	r2, [r2, #0]
 8000924:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000926:	4b99      	ldr	r3, [pc, #612]	; (8000b8c <Paint_SetPixel+0x338>)
 8000928:	895a      	ldrh	r2, [r3, #10]
 800092a:	1dbb      	adds	r3, r7, #6
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	b29a      	uxth	r2, r3
 8000932:	2324      	movs	r3, #36	; 0x24
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	3a01      	subs	r2, #1
 8000938:	801a      	strh	r2, [r3, #0]
        break;
 800093a:	46c0      	nop			; (mov r8, r8)
    }
    
    switch(Paint.Mirror) {
 800093c:	4b93      	ldr	r3, [pc, #588]	; (8000b8c <Paint_SetPixel+0x338>)
 800093e:	8a1b      	ldrh	r3, [r3, #16]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d020      	beq.n	8000986 <Paint_SetPixel+0x132>
 8000944:	dd00      	ble.n	8000948 <Paint_SetPixel+0xf4>
 8000946:	e125      	b.n	8000b94 <Paint_SetPixel+0x340>
 8000948:	2b02      	cmp	r3, #2
 800094a:	d011      	beq.n	8000970 <Paint_SetPixel+0x11c>
 800094c:	dd00      	ble.n	8000950 <Paint_SetPixel+0xfc>
 800094e:	e121      	b.n	8000b94 <Paint_SetPixel+0x340>
 8000950:	2b00      	cmp	r3, #0
 8000952:	d02d      	beq.n	80009b0 <Paint_SetPixel+0x15c>
 8000954:	2b01      	cmp	r3, #1
 8000956:	d000      	beq.n	800095a <Paint_SetPixel+0x106>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 8000958:	e11c      	b.n	8000b94 <Paint_SetPixel+0x340>
        X = Paint.WidthMemory - X - 1;
 800095a:	4b8c      	ldr	r3, [pc, #560]	; (8000b8c <Paint_SetPixel+0x338>)
 800095c:	891a      	ldrh	r2, [r3, #8]
 800095e:	2126      	movs	r1, #38	; 0x26
 8000960:	187b      	adds	r3, r7, r1
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	b29a      	uxth	r2, r3
 8000968:	187b      	adds	r3, r7, r1
 800096a:	3a01      	subs	r2, #1
 800096c:	801a      	strh	r2, [r3, #0]
        break;
 800096e:	e020      	b.n	80009b2 <Paint_SetPixel+0x15e>
        Y = Paint.HeightMemory - Y - 1;
 8000970:	4b86      	ldr	r3, [pc, #536]	; (8000b8c <Paint_SetPixel+0x338>)
 8000972:	895a      	ldrh	r2, [r3, #10]
 8000974:	2124      	movs	r1, #36	; 0x24
 8000976:	187b      	adds	r3, r7, r1
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b29a      	uxth	r2, r3
 800097e:	187b      	adds	r3, r7, r1
 8000980:	3a01      	subs	r2, #1
 8000982:	801a      	strh	r2, [r3, #0]
        break;
 8000984:	e015      	b.n	80009b2 <Paint_SetPixel+0x15e>
        X = Paint.WidthMemory - X - 1;
 8000986:	4b81      	ldr	r3, [pc, #516]	; (8000b8c <Paint_SetPixel+0x338>)
 8000988:	891a      	ldrh	r2, [r3, #8]
 800098a:	2126      	movs	r1, #38	; 0x26
 800098c:	187b      	adds	r3, r7, r1
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	b29a      	uxth	r2, r3
 8000994:	187b      	adds	r3, r7, r1
 8000996:	3a01      	subs	r2, #1
 8000998:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 800099a:	4b7c      	ldr	r3, [pc, #496]	; (8000b8c <Paint_SetPixel+0x338>)
 800099c:	895a      	ldrh	r2, [r3, #10]
 800099e:	2124      	movs	r1, #36	; 0x24
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	3a01      	subs	r2, #1
 80009ac:	801a      	strh	r2, [r3, #0]
        break;
 80009ae:	e000      	b.n	80009b2 <Paint_SetPixel+0x15e>
        break;
 80009b0:	46c0      	nop			; (mov r8, r8)
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80009b2:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <Paint_SetPixel+0x338>)
 80009b4:	891b      	ldrh	r3, [r3, #8]
 80009b6:	2226      	movs	r2, #38	; 0x26
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	8812      	ldrh	r2, [r2, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d806      	bhi.n	80009ce <Paint_SetPixel+0x17a>
 80009c0:	4b72      	ldr	r3, [pc, #456]	; (8000b8c <Paint_SetPixel+0x338>)
 80009c2:	895b      	ldrh	r3, [r3, #10]
 80009c4:	2224      	movs	r2, #36	; 0x24
 80009c6:	18ba      	adds	r2, r7, r2
 80009c8:	8812      	ldrh	r2, [r2, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d904      	bls.n	80009d8 <Paint_SetPixel+0x184>
        Debug("Exceeding display boundaries\r\n");
 80009ce:	4b70      	ldr	r3, [pc, #448]	; (8000b90 <Paint_SetPixel+0x33c>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 fff7 	bl	80039c4 <puts>
        return;
 80009d6:	e0de      	b.n	8000b96 <Paint_SetPixel+0x342>
    }
    
    if(Paint.Scale == 2){
 80009d8:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <Paint_SetPixel+0x338>)
 80009da:	8adb      	ldrh	r3, [r3, #22]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d145      	bne.n	8000a6c <Paint_SetPixel+0x218>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80009e0:	2026      	movs	r0, #38	; 0x26
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	0019      	movs	r1, r3
 80009ec:	2324      	movs	r3, #36	; 0x24
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	4a66      	ldr	r2, [pc, #408]	; (8000b8c <Paint_SetPixel+0x338>)
 80009f4:	8a52      	ldrh	r2, [r2, #18]
 80009f6:	4353      	muls	r3, r2
 80009f8:	18cb      	adds	r3, r1, r3
 80009fa:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80009fc:	4b63      	ldr	r3, [pc, #396]	; (8000b8c <Paint_SetPixel+0x338>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	18d2      	adds	r2, r2, r3
 8000a04:	210f      	movs	r1, #15
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	701a      	strb	r2, [r3, #0]
        if(Color == BLACK)
 8000a0c:	1cbb      	adds	r3, r7, #2
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d115      	bne.n	8000a40 <Paint_SetPixel+0x1ec>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000a14:	183b      	adds	r3, r7, r0
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	2207      	movs	r2, #7
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	411a      	asrs	r2, r3
 8000a20:	0013      	movs	r3, r2
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	187a      	adds	r2, r7, r1
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	b252      	sxtb	r2, r2
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b259      	sxtb	r1, r3
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <Paint_SetPixel+0x338>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	18d3      	adds	r3, r2, r3
 8000a3a:	b2ca      	uxtb	r2, r1
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e0aa      	b.n	8000b96 <Paint_SetPixel+0x342>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000a40:	2326      	movs	r3, #38	; 0x26
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	2207      	movs	r2, #7
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	411a      	asrs	r2, r3
 8000a4e:	0013      	movs	r3, r2
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	230f      	movs	r3, #15
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b259      	sxtb	r1, r3
 8000a5e:	4b4b      	ldr	r3, [pc, #300]	; (8000b8c <Paint_SetPixel+0x338>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e094      	b.n	8000b96 <Paint_SetPixel+0x342>
    }else if(Paint.Scale == 4){
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <Paint_SetPixel+0x338>)
 8000a6e:	8adb      	ldrh	r3, [r3, #22]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d145      	bne.n	8000b00 <Paint_SetPixel+0x2ac>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000a74:	2426      	movs	r4, #38	; 0x26
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	0019      	movs	r1, r3
 8000a80:	2324      	movs	r3, #36	; 0x24
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	4a41      	ldr	r2, [pc, #260]	; (8000b8c <Paint_SetPixel+0x338>)
 8000a88:	8a52      	ldrh	r2, [r2, #18]
 8000a8a:	4353      	muls	r3, r2
 8000a8c:	18cb      	adds	r3, r1, r3
 8000a8e:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8000a90:	1cbb      	adds	r3, r7, #2
 8000a92:	1cba      	adds	r2, r7, #2
 8000a94:	8812      	ldrh	r2, [r2, #0]
 8000a96:	2103      	movs	r1, #3
 8000a98:	400a      	ands	r2, r1
 8000a9a:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <Paint_SetPixel+0x338>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	18d2      	adds	r2, r2, r3
 8000aa4:	2017      	movs	r0, #23
 8000aa6:	183b      	adds	r3, r7, r0
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	701a      	strb	r2, [r3, #0]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	22c0      	movs	r2, #192	; 0xc0
 8000aba:	411a      	asrs	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	183a      	adds	r2, r7, r0
 8000ac6:	7812      	ldrb	r2, [r2, #0]
 8000ac8:	b252      	sxtb	r2, r2
 8000aca:	4013      	ands	r3, r2
 8000acc:	b25a      	sxtb	r2, r3
 8000ace:	183b      	adds	r3, r7, r0
 8000ad0:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000ad2:	1cbb      	adds	r3, r7, #2
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	019a      	lsls	r2, r3, #6
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	2103      	movs	r1, #3
 8000ade:	400b      	ands	r3, r1
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	411a      	asrs	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	183b      	adds	r3, r7, r0
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b259      	sxtb	r1, r3
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <Paint_SetPixel+0x338>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e04a      	b.n	8000b96 <Paint_SetPixel+0x342>
    }else if(Paint.Scale == 7){
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <Paint_SetPixel+0x338>)
 8000b02:	8adb      	ldrh	r3, [r3, #22]
 8000b04:	2b07      	cmp	r3, #7
 8000b06:	d146      	bne.n	8000b96 <Paint_SetPixel+0x342>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8000b08:	2426      	movs	r4, #38	; 0x26
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	085b      	lsrs	r3, r3, #1
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	0019      	movs	r1, r3
 8000b14:	2324      	movs	r3, #36	; 0x24
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <Paint_SetPixel+0x338>)
 8000b1c:	8a52      	ldrh	r2, [r2, #18]
 8000b1e:	4353      	muls	r3, r2
 8000b20:	18cb      	adds	r3, r1, r3
 8000b22:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <Paint_SetPixel+0x338>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	18d2      	adds	r2, r2, r3
 8000b2c:	201f      	movs	r0, #31
 8000b2e:	183b      	adds	r3, r7, r0
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	701a      	strb	r2, [r3, #0]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8000b34:	0021      	movs	r1, r4
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	22f0      	movs	r2, #240	; 0xf0
 8000b42:	411a      	asrs	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	183a      	adds	r2, r7, r0
 8000b4e:	7812      	ldrb	r2, [r2, #0]
 8000b50:	b252      	sxtb	r2, r2
 8000b52:	4013      	ands	r3, r2
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	183b      	adds	r3, r7, r0
 8000b58:	701a      	strb	r2, [r3, #0]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8000b5a:	1cbb      	adds	r3, r7, #2
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	011a      	lsls	r2, r3, #4
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	400b      	ands	r3, r1
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	411a      	asrs	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	b25a      	sxtb	r2, r3
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b259      	sxtb	r1, r3
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <Paint_SetPixel+0x338>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e006      	b.n	8000b96 <Paint_SetPixel+0x342>
        return;
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	e004      	b.n	8000b96 <Paint_SetPixel+0x342>
 8000b8c:	2000012c 	.word	0x2000012c
 8000b90:	08004908 	.word	0x08004908
        return;
 8000b94:	46c0      	nop			; (mov r8, r8)
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b00b      	add	sp, #44	; 0x2c
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dbb      	adds	r3, r7, #6
 8000ba6:	801a      	strh	r2, [r3, #0]
	if(Paint.Scale == 2) {
 8000ba8:	4b66      	ldr	r3, [pc, #408]	; (8000d44 <Paint_Clear+0x1a8>)
 8000baa:	8adb      	ldrh	r3, [r3, #22]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d136      	bne.n	8000c1e <Paint_Clear+0x82>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000bb0:	231e      	movs	r3, #30
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	e029      	b.n	8000c0e <Paint_Clear+0x72>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000bba:	231c      	movs	r3, #28
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	801a      	strh	r2, [r3, #0]
 8000bc2:	e017      	b.n	8000bf4 <Paint_Clear+0x58>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000bc4:	201c      	movs	r0, #28
 8000bc6:	183b      	adds	r3, r7, r0
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	231e      	movs	r3, #30
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	495c      	ldr	r1, [pc, #368]	; (8000d44 <Paint_Clear+0x1a8>)
 8000bd2:	8a49      	ldrh	r1, [r1, #18]
 8000bd4:	434b      	muls	r3, r1
 8000bd6:	18d3      	adds	r3, r2, r3
 8000bd8:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000bda:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <Paint_Clear+0x1a8>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	1dba      	adds	r2, r7, #6
 8000be4:	8812      	ldrh	r2, [r2, #0]
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000bea:	183b      	adds	r3, r7, r0
 8000bec:	881a      	ldrh	r2, [r3, #0]
 8000bee:	183b      	adds	r3, r7, r0
 8000bf0:	3201      	adds	r2, #1
 8000bf2:	801a      	strh	r2, [r3, #0]
 8000bf4:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <Paint_Clear+0x1a8>)
 8000bf6:	8a5b      	ldrh	r3, [r3, #18]
 8000bf8:	221c      	movs	r2, #28
 8000bfa:	18ba      	adds	r2, r7, r2
 8000bfc:	8812      	ldrh	r2, [r2, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d3e0      	bcc.n	8000bc4 <Paint_Clear+0x28>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000c02:	211e      	movs	r1, #30
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	3201      	adds	r2, #1
 8000c0c:	801a      	strh	r2, [r3, #0]
 8000c0e:	4b4d      	ldr	r3, [pc, #308]	; (8000d44 <Paint_Clear+0x1a8>)
 8000c10:	8a9b      	ldrh	r3, [r3, #20]
 8000c12:	221e      	movs	r2, #30
 8000c14:	18ba      	adds	r2, r7, r2
 8000c16:	8812      	ldrh	r2, [r2, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d3ce      	bcc.n	8000bba <Paint_Clear+0x1e>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8000c1c:	e08e      	b.n	8000d3c <Paint_Clear+0x1a0>
    }else if(Paint.Scale == 4) {
 8000c1e:	4b49      	ldr	r3, [pc, #292]	; (8000d44 <Paint_Clear+0x1a8>)
 8000c20:	8adb      	ldrh	r3, [r3, #22]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d149      	bne.n	8000cba <Paint_Clear+0x11e>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000c26:	231a      	movs	r3, #26
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	801a      	strh	r2, [r3, #0]
 8000c2e:	e03c      	b.n	8000caa <Paint_Clear+0x10e>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000c30:	2318      	movs	r3, #24
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	801a      	strh	r2, [r3, #0]
 8000c38:	e02a      	b.n	8000c90 <Paint_Clear+0xf4>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000c3a:	2018      	movs	r0, #24
 8000c3c:	183b      	adds	r3, r7, r0
 8000c3e:	881a      	ldrh	r2, [r3, #0]
 8000c40:	231a      	movs	r3, #26
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	493f      	ldr	r1, [pc, #252]	; (8000d44 <Paint_Clear+0x1a8>)
 8000c48:	8a49      	ldrh	r1, [r1, #18]
 8000c4a:	434b      	muls	r3, r1
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8000c50:	1dbb      	adds	r3, r7, #6
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	b25a      	sxtb	r2, r3
 8000c58:	1dbb      	adds	r3, r7, #6
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b25a      	sxtb	r2, r3
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b259      	sxtb	r1, r3
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <Paint_Clear+0x1a8>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000c86:	183b      	adds	r3, r7, r0
 8000c88:	881a      	ldrh	r2, [r3, #0]
 8000c8a:	183b      	adds	r3, r7, r0
 8000c8c:	3201      	adds	r2, #1
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <Paint_Clear+0x1a8>)
 8000c92:	8a5b      	ldrh	r3, [r3, #18]
 8000c94:	2218      	movs	r2, #24
 8000c96:	18ba      	adds	r2, r7, r2
 8000c98:	8812      	ldrh	r2, [r2, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3cd      	bcc.n	8000c3a <Paint_Clear+0x9e>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000c9e:	211a      	movs	r1, #26
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	3201      	adds	r2, #1
 8000ca8:	801a      	strh	r2, [r3, #0]
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <Paint_Clear+0x1a8>)
 8000cac:	8a9b      	ldrh	r3, [r3, #20]
 8000cae:	221a      	movs	r2, #26
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	8812      	ldrh	r2, [r2, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3bb      	bcc.n	8000c30 <Paint_Clear+0x94>
}
 8000cb8:	e040      	b.n	8000d3c <Paint_Clear+0x1a0>
	}else if(Paint.Scale == 7) {
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <Paint_Clear+0x1a8>)
 8000cbc:	8adb      	ldrh	r3, [r3, #22]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d13c      	bne.n	8000d3c <Paint_Clear+0x1a0>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000cc2:	2316      	movs	r3, #22
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	801a      	strh	r2, [r3, #0]
 8000cca:	e030      	b.n	8000d2e <Paint_Clear+0x192>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000ccc:	2314      	movs	r3, #20
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
 8000cd4:	e01e      	b.n	8000d14 <Paint_Clear+0x178>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	881a      	ldrh	r2, [r3, #0]
 8000cdc:	2316      	movs	r3, #22
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	4918      	ldr	r1, [pc, #96]	; (8000d44 <Paint_Clear+0x1a8>)
 8000ce4:	8a49      	ldrh	r1, [r1, #18]
 8000ce6:	434b      	muls	r3, r1
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000cec:	1dbb      	adds	r3, r7, #6
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b259      	sxtb	r1, r3
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <Paint_Clear+0x1a8>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000d0a:	183b      	adds	r3, r7, r0
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	183b      	adds	r3, r7, r0
 8000d10:	3201      	adds	r2, #1
 8000d12:	801a      	strh	r2, [r3, #0]
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <Paint_Clear+0x1a8>)
 8000d16:	8a5b      	ldrh	r3, [r3, #18]
 8000d18:	2214      	movs	r2, #20
 8000d1a:	18ba      	adds	r2, r7, r2
 8000d1c:	8812      	ldrh	r2, [r2, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3d9      	bcc.n	8000cd6 <Paint_Clear+0x13a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000d22:	2116      	movs	r1, #22
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	881a      	ldrh	r2, [r3, #0]
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	3201      	adds	r2, #1
 8000d2c:	801a      	strh	r2, [r3, #0]
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <Paint_Clear+0x1a8>)
 8000d30:	8a9b      	ldrh	r3, [r3, #20]
 8000d32:	2216      	movs	r2, #22
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	8812      	ldrh	r2, [r2, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d3c7      	bcc.n	8000ccc <Paint_Clear+0x130>
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b008      	add	sp, #32
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000012c 	.word	0x2000012c

08000d48 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	0005      	movs	r5, r0
 8000d50:	000c      	movs	r4, r1
 8000d52:	0010      	movs	r0, r2
 8000d54:	0019      	movs	r1, r3
 8000d56:	1dbb      	adds	r3, r7, #6
 8000d58:	1c2a      	adds	r2, r5, #0
 8000d5a:	801a      	strh	r2, [r3, #0]
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	1c22      	adds	r2, r4, #0
 8000d60:	801a      	strh	r2, [r3, #0]
 8000d62:	1cbb      	adds	r3, r7, #2
 8000d64:	1c02      	adds	r2, r0, #0
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	1c7b      	adds	r3, r7, #1
 8000d6a:	1c0a      	adds	r2, r1, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000d6e:	4b67      	ldr	r3, [pc, #412]	; (8000f0c <Paint_DrawPoint+0x1c4>)
 8000d70:	889b      	ldrh	r3, [r3, #4]
 8000d72:	1dba      	adds	r2, r7, #6
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d805      	bhi.n	8000d86 <Paint_DrawPoint+0x3e>
 8000d7a:	4b64      	ldr	r3, [pc, #400]	; (8000f0c <Paint_DrawPoint+0x1c4>)
 8000d7c:	88db      	ldrh	r3, [r3, #6]
 8000d7e:	1d3a      	adds	r2, r7, #4
 8000d80:	8812      	ldrh	r2, [r2, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d916      	bls.n	8000db4 <Paint_DrawPoint+0x6c>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <Paint_DrawPoint+0x1c8>)
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 fe1b 	bl	80039c4 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8000d8e:	1dbb      	adds	r3, r7, #6
 8000d90:	8819      	ldrh	r1, [r3, #0]
 8000d92:	4b5e      	ldr	r3, [pc, #376]	; (8000f0c <Paint_DrawPoint+0x1c4>)
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	001a      	movs	r2, r3
 8000d98:	4b5e      	ldr	r3, [pc, #376]	; (8000f14 <Paint_DrawPoint+0x1cc>)
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f002 fd86 	bl	80038ac <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	8819      	ldrh	r1, [r3, #0]
 8000da4:	4b59      	ldr	r3, [pc, #356]	; (8000f0c <Paint_DrawPoint+0x1c4>)
 8000da6:	88db      	ldrh	r3, [r3, #6]
 8000da8:	001a      	movs	r2, r3
 8000daa:	4b5b      	ldr	r3, [pc, #364]	; (8000f18 <Paint_DrawPoint+0x1d0>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 fd7d 	bl	80038ac <iprintf>
        return;
 8000db2:	e0a8      	b.n	8000f06 <Paint_DrawPoint+0x1be>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 8000db4:	2320      	movs	r3, #32
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d161      	bne.n	8000e82 <Paint_DrawPoint+0x13a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000dbe:	230e      	movs	r3, #14
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	801a      	strh	r2, [r3, #0]
 8000dc6:	e051      	b.n	8000e6c <Paint_DrawPoint+0x124>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000dc8:	230c      	movs	r3, #12
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	801a      	strh	r2, [r3, #0]
 8000dd0:	e039      	b.n	8000e46 <Paint_DrawPoint+0xfe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8000dd2:	1dbb      	adds	r3, r7, #6
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	200e      	movs	r0, #14
 8000dd8:	183b      	adds	r3, r7, r0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	5e5b      	ldrsh	r3, [r3, r1]
 8000dde:	18d2      	adds	r2, r2, r3
 8000de0:	1c7b      	adds	r3, r7, #1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	d438      	bmi.n	8000e5a <Paint_DrawPoint+0x112>
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	210c      	movs	r1, #12
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2400      	movs	r4, #0
 8000df2:	5f1b      	ldrsh	r3, [r3, r4]
 8000df4:	18d2      	adds	r2, r2, r3
 8000df6:	1c7b      	adds	r3, r7, #1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	d42d      	bmi.n	8000e5a <Paint_DrawPoint+0x112>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8000dfe:	183b      	adds	r3, r7, r0
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	1dbb      	adds	r3, r7, #6
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	18d3      	adds	r3, r2, r3
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	1c7b      	adds	r3, r7, #1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	b298      	uxth	r0, r3
 8000e14:	000c      	movs	r4, r1
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	881a      	ldrh	r2, [r3, #0]
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	18d3      	adds	r3, r2, r3
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	1c7b      	adds	r3, r7, #1
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	1cbb      	adds	r3, r7, #2
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	f7ff fd0f 	bl	8000854 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	5e9b      	ldrsh	r3, [r3, r2]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	230c      	movs	r3, #12
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	5e9a      	ldrsh	r2, [r3, r2]
 8000e4e:	1c7b      	adds	r3, r7, #1
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	3b01      	subs	r3, #1
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dbbb      	blt.n	8000dd2 <Paint_DrawPoint+0x8a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 8000e5a:	210e      	movs	r1, #14
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	5e9b      	ldrsh	r3, [r3, r2]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3301      	adds	r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	801a      	strh	r2, [r3, #0]
 8000e6c:	230e      	movs	r3, #14
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	2200      	movs	r2, #0
 8000e72:	5e9a      	ldrsh	r2, [r3, r2]
 8000e74:	1c7b      	adds	r3, r7, #1
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dba3      	blt.n	8000dc8 <Paint_DrawPoint+0x80>
 8000e80:	e041      	b.n	8000f06 <Paint_DrawPoint+0x1be>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000e82:	230e      	movs	r3, #14
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	2200      	movs	r2, #0
 8000e88:	801a      	strh	r2, [r3, #0]
 8000e8a:	e034      	b.n	8000ef6 <Paint_DrawPoint+0x1ae>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	801a      	strh	r2, [r3, #0]
 8000e94:	e01e      	b.n	8000ed4 <Paint_DrawPoint+0x18c>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8000e96:	230e      	movs	r3, #14
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	881a      	ldrh	r2, [r3, #0]
 8000e9c:	1dbb      	adds	r3, r7, #6
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b298      	uxth	r0, r3
 8000ea8:	240c      	movs	r4, #12
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	881a      	ldrh	r2, [r3, #0]
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	18d3      	adds	r3, r2, r3
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	1cbb      	adds	r3, r7, #2
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	f7ff fcc8 	bl	8000854 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	5e9b      	ldrsh	r3, [r3, r2]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	801a      	strh	r2, [r3, #0]
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	5e9a      	ldrsh	r2, [r3, r2]
 8000edc:	1c7b      	adds	r3, r7, #1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbd8      	blt.n	8000e96 <Paint_DrawPoint+0x14e>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8000ee4:	210e      	movs	r1, #14
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	5e9b      	ldrsh	r3, [r3, r2]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	801a      	strh	r2, [r3, #0]
 8000ef6:	230e      	movs	r3, #14
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	5e9a      	ldrsh	r2, [r3, r2]
 8000efe:	1c7b      	adds	r3, r7, #1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbc2      	blt.n	8000e8c <Paint_DrawPoint+0x144>
            }
        }
    }
}
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b004      	add	sp, #16
 8000f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0c:	2000012c 	.word	0x2000012c
 8000f10:	08004930 	.word	0x08004930
 8000f14:	08004970 	.word	0x08004970
 8000f18:	08004994 	.word	0x08004994

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f22:	f000 fb9b 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f26:	f000 f895 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2a:	f000 f959 	bl	80011e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f2e:	f000 f8e9 	bl	8001104 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f32:	f000 f925 	bl	8001180 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("EPD_1in54_V2_test Demo\r\n");
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <main+0x128>)
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f002 fd43 	bl	80039c4 <puts>
  DEV_Module_Init();
 8000f3e:	f7ff f98d 	bl	800025c <DEV_Module_Init>

  printf("e-Paper Init and Clear...\r\n");
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <main+0x12c>)
 8000f44:	0018      	movs	r0, r3
 8000f46:	f002 fd3d 	bl	80039c4 <puts>
  EPD_1IN54_V2_Init();
 8000f4a:	f7ff fb0d 	bl	8000568 <EPD_1IN54_V2_Init>
  EPD_1IN54_V2_Clear();
 8000f4e:	f7ff fb53 	bl	80005f8 <EPD_1IN54_V2_Clear>
  DEV_Delay_ms(500);
 8000f52:	23fa      	movs	r3, #250	; 0xfa
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fbe4 	bl	8001724 <HAL_Delay>

  UBYTE *BlackImage;
  BlackImage = (UBYTE*) malloc(EPD_1IN54_V2_HEIGHT * EPD_1IN54_V2_WIDTH / 8);
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <main+0x130>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f002 fbb0 	bl	80036c4 <malloc>
 8000f64:	0003      	movs	r3, r0
 8000f66:	607b      	str	r3, [r7, #4]
  }

  // Initialize the BlackImage buffer
  //memset(BlackImage, 0xff, EPD_1IN54_V2_HEIGHT * EPD_1IN54_V2_WIDTH / 8);

  printf("Paint_NewImage\r\n");
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <main+0x134>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f002 fd2a 	bl	80039c4 <puts>
  Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 270, WHITE);
 8000f70:	2387      	movs	r3, #135	; 0x87
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	9200      	str	r2, [sp, #0]
 8000f7a:	22c8      	movs	r2, #200	; 0xc8
 8000f7c:	21c8      	movs	r1, #200	; 0xc8
 8000f7e:	f7ff fbed 	bl	800075c <Paint_NewImage>
  Paint_SelectImage(BlackImage);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff fc57 	bl	8000838 <Paint_SelectImage>
  Paint_Clear(WHITE);
 8000f8a:	20ff      	movs	r0, #255	; 0xff
 8000f8c:	f7ff fe06 	bl	8000b9c <Paint_Clear>

  // 2.Drawing on the image
  Paint_DrawPoint(5, 10, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000f90:	2301      	movs	r3, #1
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2200      	movs	r2, #0
 8000f98:	210a      	movs	r1, #10
 8000f9a:	2005      	movs	r0, #5
 8000f9c:	f7ff fed4 	bl	8000d48 <Paint_DrawPoint>
  Paint_DrawPoint(5, 25, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2119      	movs	r1, #25
 8000faa:	2005      	movs	r0, #5
 8000fac:	f7ff fecc 	bl	8000d48 <Paint_DrawPoint>
  Paint_DrawPoint(5, 40, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2128      	movs	r1, #40	; 0x28
 8000fba:	2005      	movs	r0, #5
 8000fbc:	f7ff fec4 	bl	8000d48 <Paint_DrawPoint>
  Paint_DrawPoint(5, 55, BLACK, DOT_PIXEL_4X4, DOT_STYLE_DFT);
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2137      	movs	r1, #55	; 0x37
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f7ff febc 	bl	8000d48 <Paint_DrawPoint>


  EPD_1IN54_V2_Display(BlackImage);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff fb73 	bl	80006be <EPD_1IN54_V2_Display>
  DEV_Delay_ms(2000);
 8000fd8:	23fa      	movs	r3, #250	; 0xfa
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 fba1 	bl	8001724 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Paint_SelectImage(BlackImage);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fc27 	bl	8000838 <Paint_SelectImage>
	  Paint_Clear(WHITE);
 8000fea:	20ff      	movs	r0, #255	; 0xff
 8000fec:	f7ff fdd6 	bl	8000b9c <Paint_Clear>

	  // 2.Drawing on the image
	  Paint_DrawPoint(5, 10, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff fea4 	bl	8000d48 <Paint_DrawPoint>
	  Paint_DrawPoint(5, 25, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 8001000:	2301      	movs	r3, #1
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	2200      	movs	r2, #0
 8001008:	2119      	movs	r1, #25
 800100a:	2005      	movs	r0, #5
 800100c:	f7ff fe9c 	bl	8000d48 <Paint_DrawPoint>
	  Paint_DrawPoint(5, 40, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 8001010:	2301      	movs	r3, #1
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2303      	movs	r3, #3
 8001016:	2200      	movs	r2, #0
 8001018:	2128      	movs	r1, #40	; 0x28
 800101a:	2005      	movs	r0, #5
 800101c:	f7ff fe94 	bl	8000d48 <Paint_DrawPoint>
	  Paint_DrawPoint(5, 55, BLACK, DOT_PIXEL_4X4, DOT_STYLE_DFT);
 8001020:	2301      	movs	r3, #1
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2304      	movs	r3, #4
 8001026:	2200      	movs	r2, #0
 8001028:	2137      	movs	r1, #55	; 0x37
 800102a:	2005      	movs	r0, #5
 800102c:	f7ff fe8c 	bl	8000d48 <Paint_DrawPoint>


	  EPD_1IN54_V2_Display(BlackImage);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fb43 	bl	80006be <EPD_1IN54_V2_Display>
	  DEV_Delay_ms(2000);
 8001038:	23fa      	movs	r3, #250	; 0xfa
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	0018      	movs	r0, r3
 800103e:	f000 fb71 	bl	8001724 <HAL_Delay>
	  Paint_SelectImage(BlackImage);
 8001042:	e7ce      	b.n	8000fe2 <main+0xc6>
 8001044:	08004b38 	.word	0x08004b38
 8001048:	08004b50 	.word	0x08004b50
 800104c:	00001388 	.word	0x00001388
 8001050:	08004b6c 	.word	0x08004b6c

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b099      	sub	sp, #100	; 0x64
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	242c      	movs	r4, #44	; 0x2c
 800105c:	193b      	adds	r3, r7, r4
 800105e:	0018      	movs	r0, r3
 8001060:	2334      	movs	r3, #52	; 0x34
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f002 fb37 	bl	80036d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106a:	231c      	movs	r3, #28
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	0018      	movs	r0, r3
 8001070:	2310      	movs	r3, #16
 8001072:	001a      	movs	r2, r3
 8001074:	2100      	movs	r1, #0
 8001076:	f002 fb2f 	bl	80036d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	0018      	movs	r0, r3
 800107e:	2318      	movs	r3, #24
 8001080:	001a      	movs	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f002 fb28 	bl	80036d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	0021      	movs	r1, r4
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2202      	movs	r2, #2
 800108e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2201      	movs	r2, #1
 8001094:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2210      	movs	r2, #16
 800109a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	0018      	movs	r0, r3
 80010a6:	f000 fdb7 	bl	8001c18 <HAL_RCC_OscConfig>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80010ae:	f000 f917 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	211c      	movs	r1, #28
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2207      	movs	r2, #7
 80010b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2100      	movs	r1, #0
 80010d0:	0018      	movs	r0, r3
 80010d2:	f001 f927 	bl	8002324 <HAL_RCC_ClockConfig>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010da:	f000 f901 	bl	80012e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 fa85 	bl	80025fc <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010f6:	f000 f8f3 	bl	80012e0 <Error_Handler>
  }
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b019      	add	sp, #100	; 0x64
 8001100:	bd90      	pop	{r4, r7, pc}
	...

08001104 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_SPI1_Init+0x74>)
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <MX_SPI1_Init+0x78>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_SPI1_Init+0x74>)
 8001110:	2282      	movs	r2, #130	; 0x82
 8001112:	0052      	lsls	r2, r2, #1
 8001114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_SPI1_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_SPI1_Init+0x74>)
 800111e:	22c0      	movs	r2, #192	; 0xc0
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_SPI1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_SPI1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_SPI1_Init+0x74>)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_SPI1_Init+0x74>)
 800113a:	2228      	movs	r2, #40	; 0x28
 800113c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_SPI1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_SPI1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_SPI1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_SPI1_Init+0x74>)
 8001152:	2207      	movs	r2, #7
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_SPI1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_SPI1_Init+0x74>)
 800115e:	2208      	movs	r2, #8
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <MX_SPI1_Init+0x74>)
 8001164:	0018      	movs	r0, r3
 8001166:	f001 fb37 	bl	80027d8 <HAL_SPI_Init>
 800116a:	1e03      	subs	r3, r0, #0
 800116c:	d001      	beq.n	8001172 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 f8b7 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000144 	.word	0x20000144
 800117c:	40013000 	.word	0x40013000

08001180 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 8001186:	4a15      	ldr	r2, [pc, #84]	; (80011dc <MX_USART1_UART_Init+0x5c>)
 8001188:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 800118c:	22e1      	movs	r2, #225	; 0xe1
 800118e:	0252      	lsls	r2, r2, #9
 8001190:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MX_USART1_UART_Init+0x58>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f001 fe95 	bl	8002ef4 <HAL_UART_Init>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011ce:	f000 f887 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001a8 	.word	0x200001a8
 80011dc:	40013800 	.word	0x40013800

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	240c      	movs	r4, #12
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	0018      	movs	r0, r3
 80011ec:	2314      	movs	r3, #20
 80011ee:	001a      	movs	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f002 fa71 	bl	80036d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <MX_GPIO_Init+0xf8>)
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <MX_GPIO_Init+0xf8>)
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	03c9      	lsls	r1, r1, #15
 8001200:	430a      	orrs	r2, r1
 8001202:	615a      	str	r2, [r3, #20]
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001206:	695a      	ldr	r2, [r3, #20]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	03db      	lsls	r3, r3, #15
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0289      	lsls	r1, r1, #10
 800121c:	430a      	orrs	r2, r1
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_GPIO_Init+0xf8>)
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	02c9      	lsls	r1, r1, #11
 8001238:	430a      	orrs	r2, r1
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0xf8>)
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	02db      	lsls	r3, r3, #11
 8001244:	4013      	ands	r3, r2
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800124a:	2390      	movs	r3, #144	; 0x90
 800124c:	05db      	lsls	r3, r3, #23
 800124e:	2200      	movs	r2, #0
 8001250:	2116      	movs	r1, #22
 8001252:	0018      	movs	r0, r3
 8001254:	f000 fcc3 	bl	8001bde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_GPIO_Init+0xfc>)
 800125a:	2200      	movs	r2, #0
 800125c:	2108      	movs	r1, #8
 800125e:	0018      	movs	r0, r3
 8001260:	f000 fcbd 	bl	8001bde <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin;
 8001264:	193b      	adds	r3, r7, r4
 8001266:	2216      	movs	r2, #22
 8001268:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	193b      	adds	r3, r7, r4
 800126c:	2201      	movs	r2, #1
 800126e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	193b      	adds	r3, r7, r4
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	193b      	adds	r3, r7, r4
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	193a      	adds	r2, r7, r4
 800127e:	2390      	movs	r3, #144	; 0x90
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f000 fb25 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2208      	movs	r2, #8
 800128e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	193b      	adds	r3, r7, r4
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800129c:	193a      	adds	r2, r7, r4
 800129e:	2390      	movs	r3, #144	; 0x90
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 fb15 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012aa:	0021      	movs	r1, r4
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2208      	movs	r2, #8
 80012b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2201      	movs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2203      	movs	r2, #3
 80012c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <MX_GPIO_Init+0xfc>)
 80012c8:	0019      	movs	r1, r3
 80012ca:	0010      	movs	r0, r2
 80012cc:	f000 fb02 	bl	80018d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b009      	add	sp, #36	; 0x24
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_MspInit+0x44>)
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_MspInit+0x44>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	430a      	orrs	r2, r1
 80012fc:	619a      	str	r2, [r3, #24]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x44>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2201      	movs	r2, #1
 8001304:	4013      	ands	r3, r2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_MspInit+0x44>)
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_MspInit+0x44>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	0549      	lsls	r1, r1, #21
 8001314:	430a      	orrs	r2, r1
 8001316:	61da      	str	r2, [r3, #28]
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_MspInit+0x44>)
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	055b      	lsls	r3, r3, #21
 8001320:	4013      	ands	r3, r2
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001334:	b590      	push	{r4, r7, lr}
 8001336:	b08b      	sub	sp, #44	; 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	2414      	movs	r4, #20
 800133e:	193b      	adds	r3, r7, r4
 8001340:	0018      	movs	r0, r3
 8001342:	2314      	movs	r3, #20
 8001344:	001a      	movs	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	f002 f9c6 	bl	80036d8 <memset>
  if(hspi->Instance==SPI1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_SPI_MspInit+0x90>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d132      	bne.n	80013bc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_SPI_MspInit+0x94>)
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_SPI_MspInit+0x94>)
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	0149      	lsls	r1, r1, #5
 8001360:	430a      	orrs	r2, r1
 8001362:	619a      	str	r2, [r3, #24]
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_SPI_MspInit+0x94>)
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_SPI_MspInit+0x94>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_SPI_MspInit+0x94>)
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	0289      	lsls	r1, r1, #10
 800137c:	430a      	orrs	r2, r1
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_SPI_MspInit+0x94>)
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	029b      	lsls	r3, r3, #10
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800138e:	0021      	movs	r1, r4
 8001390:	187b      	adds	r3, r7, r1
 8001392:	22a0      	movs	r2, #160	; 0xa0
 8001394:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2202      	movs	r2, #2
 800139a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2203      	movs	r2, #3
 80013a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	187a      	adds	r2, r7, r1
 80013b0:	2390      	movs	r3, #144	; 0x90
 80013b2:	05db      	lsls	r3, r3, #23
 80013b4:	0011      	movs	r1, r2
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 fa8c 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b00b      	add	sp, #44	; 0x2c
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	40013000 	.word	0x40013000
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b08b      	sub	sp, #44	; 0x2c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	2414      	movs	r4, #20
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	0018      	movs	r0, r3
 80013da:	2314      	movs	r3, #20
 80013dc:	001a      	movs	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	f002 f97a 	bl	80036d8 <memset>
  if(huart->Instance==USART1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_UART_MspInit+0x94>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d133      	bne.n	8001456 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_UART_MspInit+0x98>)
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_UART_MspInit+0x98>)
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	01c9      	lsls	r1, r1, #7
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_UART_MspInit+0x98>)
 80013fe:	699a      	ldr	r2, [r3, #24]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	01db      	lsls	r3, r3, #7
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_UART_MspInit+0x98>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0x98>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0289      	lsls	r1, r1, #10
 8001414:	430a      	orrs	r2, r1
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_UART_MspInit+0x98>)
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001426:	193b      	adds	r3, r7, r4
 8001428:	22c0      	movs	r2, #192	; 0xc0
 800142a:	00d2      	lsls	r2, r2, #3
 800142c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	0021      	movs	r1, r4
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2202      	movs	r2, #2
 8001434:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2203      	movs	r2, #3
 8001440:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2201      	movs	r2, #1
 8001446:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	187a      	adds	r2, r7, r1
 800144a:	2390      	movs	r3, #144	; 0x90
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f000 fa3f 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b00b      	add	sp, #44	; 0x2c
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	40013800 	.word	0x40013800
 8001464:	40021000 	.word	0x40021000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f92e 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e00a      	b.n	80014be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a8:	e000      	b.n	80014ac <_read+0x16>
 80014aa:	bf00      	nop
 80014ac:	0001      	movs	r1, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	b2ca      	uxtb	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbf0      	blt.n	80014a8 <_read+0x12>
  }

  return len;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b006      	add	sp, #24
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e009      	b.n	80014f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ba      	str	r2, [r7, #8]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	0018      	movs	r0, r3
 80014ec:	e000      	b.n	80014f0 <_write+0x20>
 80014ee:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf1      	blt.n	80014e2 <_write+0x12>
  }
  return len;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b006      	add	sp, #24
 8001506:	bd80      	pop	{r7, pc}

08001508 <_close>:

int _close(int file)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001510:	2301      	movs	r3, #1
 8001512:	425b      	negs	r3, r3
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	0192      	lsls	r2, r2, #6
 800152c:	605a      	str	r2, [r3, #4]
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <_isatty>:

int _isatty(int file)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	0018      	movs	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	b002      	add	sp, #8
 8001548:	bd80      	pop	{r7, pc}

0800154a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b004      	add	sp, #16
 800155e:	bd80      	pop	{r7, pc}

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f002 f86e 	bl	8003670 <__errno>
 8001594:	0003      	movs	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	2301      	movs	r3, #1
 800159c:	425b      	negs	r3, r3
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	18d2      	adds	r2, r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <_sbrk+0x64>)
 80015b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b006      	add	sp, #24
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20002000 	.word	0x20002000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	20000230 	.word	0x20000230
 80015c8:	20000248 	.word	0x20000248

080015cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d8:	4813      	ldr	r0, [pc, #76]	; (8001628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015dc:	f7ff fff6 	bl	80015cc <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80015e0:	4812      	ldr	r0, [pc, #72]	; (800162c <LoopForever+0x6>)
    LDR R1, [R0]
 80015e2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80015e4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <LoopForever+0xa>)
    CMP R1, R2
 80015e8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80015ea:	d105      	bne.n	80015f8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80015ee:	4912      	ldr	r1, [pc, #72]	; (8001638 <LoopForever+0x12>)
    STR R1, [R0]
 80015f0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80015f4:	4912      	ldr	r1, [pc, #72]	; (8001640 <LoopForever+0x1a>)
    STR R1, [R0]
 80015f6:	6001      	str	r1, [r0, #0]

080015f8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f8:	4812      	ldr	r0, [pc, #72]	; (8001644 <LoopForever+0x1e>)
  ldr r1, =_edata
 80015fa:	4913      	ldr	r1, [pc, #76]	; (8001648 <LoopForever+0x22>)
  ldr r2, =_sidata
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <LoopForever+0x26>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001610:	4c10      	ldr	r4, [pc, #64]	; (8001654 <LoopForever+0x2e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800161e:	f002 f82d 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001622:	f7ff fc7b 	bl	8000f1c <main>

08001626 <LoopForever>:

LoopForever:
    b LoopForever
 8001626:	e7fe      	b.n	8001626 <LoopForever>
  ldr   r0, =_estack
 8001628:	20002000 	.word	0x20002000
    LDR R0,=0x00000004
 800162c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001630:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001634:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001638:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800163c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001640:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800164c:	08004c54 	.word	0x08004c54
  ldr r2, =_sbss
 8001650:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001654:	20000248 	.word	0x20000248

08001658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_IRQHandler>
	...

0800165c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_Init+0x24>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_Init+0x24>)
 8001666:	2110      	movs	r1, #16
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f809 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001672:	f7ff fe3b 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40022000 	.word	0x40022000

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_InitTick+0x5c>)
 800168e:	681c      	ldr	r4, [r3, #0]
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_InitTick+0x60>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	0019      	movs	r1, r3
 8001696:	23fa      	movs	r3, #250	; 0xfa
 8001698:	0098      	lsls	r0, r3, #2
 800169a:	f7fe fd3f 	bl	800011c <__udivsi3>
 800169e:	0003      	movs	r3, r0
 80016a0:	0019      	movs	r1, r3
 80016a2:	0020      	movs	r0, r4
 80016a4:	f7fe fd3a 	bl	800011c <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 f905 	bl	80018ba <HAL_SYSTICK_Config>
 80016b0:	1e03      	subs	r3, r0, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e00f      	b.n	80016d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d80b      	bhi.n	80016d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	2301      	movs	r3, #1
 80016c2:	425b      	negs	r3, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 f8e2 	bl	8001890 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_InitTick+0x64>)
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b003      	add	sp, #12
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	200000a0 	.word	0x200000a0
 80016e4:	200000a8 	.word	0x200000a8
 80016e8:	200000a4 	.word	0x200000a4

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x1c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	001a      	movs	r2, r3
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_IncTick+0x20>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	18d2      	adds	r2, r2, r3
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_IncTick+0x20>)
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	200000a8 	.word	0x200000a8
 800170c:	20000234 	.word	0x20000234

08001710 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <HAL_GetTick+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	20000234 	.word	0x20000234

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff fff0 	bl	8001710 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	001a      	movs	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	189b      	adds	r3, r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	f7ff ffe0 	bl	8001710 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	200000a8 	.word	0x200000a8

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	0002      	movs	r2, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b7f      	cmp	r3, #127	; 0x7f
 8001780:	d828      	bhi.n	80017d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001782:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <__NVIC_SetPriority+0xd4>)
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b25b      	sxtb	r3, r3
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	33c0      	adds	r3, #192	; 0xc0
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	589b      	ldr	r3, [r3, r2]
 8001792:	1dfa      	adds	r2, r7, #7
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	0011      	movs	r1, r2
 8001798:	2203      	movs	r2, #3
 800179a:	400a      	ands	r2, r1
 800179c:	00d2      	lsls	r2, r2, #3
 800179e:	21ff      	movs	r1, #255	; 0xff
 80017a0:	4091      	lsls	r1, r2
 80017a2:	000a      	movs	r2, r1
 80017a4:	43d2      	mvns	r2, r2
 80017a6:	401a      	ands	r2, r3
 80017a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	22ff      	movs	r2, #255	; 0xff
 80017b0:	401a      	ands	r2, r3
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	0018      	movs	r0, r3
 80017b8:	2303      	movs	r3, #3
 80017ba:	4003      	ands	r3, r0
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c0:	481f      	ldr	r0, [pc, #124]	; (8001840 <__NVIC_SetPriority+0xd4>)
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	430a      	orrs	r2, r1
 80017cc:	33c0      	adds	r3, #192	; 0xc0
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017d2:	e031      	b.n	8001838 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <__NVIC_SetPriority+0xd8>)
 80017d6:	1dfb      	adds	r3, r7, #7
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	0019      	movs	r1, r3
 80017dc:	230f      	movs	r3, #15
 80017de:	400b      	ands	r3, r1
 80017e0:	3b08      	subs	r3, #8
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3306      	adds	r3, #6
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	18d3      	adds	r3, r2, r3
 80017ea:	3304      	adds	r3, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1dfa      	adds	r2, r7, #7
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	0011      	movs	r1, r2
 80017f4:	2203      	movs	r2, #3
 80017f6:	400a      	ands	r2, r1
 80017f8:	00d2      	lsls	r2, r2, #3
 80017fa:	21ff      	movs	r1, #255	; 0xff
 80017fc:	4091      	lsls	r1, r2
 80017fe:	000a      	movs	r2, r1
 8001800:	43d2      	mvns	r2, r2
 8001802:	401a      	ands	r2, r3
 8001804:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	22ff      	movs	r2, #255	; 0xff
 800180c:	401a      	ands	r2, r3
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	0018      	movs	r0, r3
 8001814:	2303      	movs	r3, #3
 8001816:	4003      	ands	r3, r0
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <__NVIC_SetPriority+0xd8>)
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	001c      	movs	r4, r3
 8001824:	230f      	movs	r3, #15
 8001826:	4023      	ands	r3, r4
 8001828:	3b08      	subs	r3, #8
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	430a      	orrs	r2, r1
 800182e:	3306      	adds	r3, #6
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	18c3      	adds	r3, r0, r3
 8001834:	3304      	adds	r3, #4
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b003      	add	sp, #12
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	1e5a      	subs	r2, r3, #1
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	045b      	lsls	r3, r3, #17
 8001858:	429a      	cmp	r2, r3
 800185a:	d301      	bcc.n	8001860 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185c:	2301      	movs	r3, #1
 800185e:	e010      	b.n	8001882 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <SysTick_Config+0x44>)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	3a01      	subs	r2, #1
 8001866:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001868:	2301      	movs	r3, #1
 800186a:	425b      	negs	r3, r3
 800186c:	2103      	movs	r1, #3
 800186e:	0018      	movs	r0, r3
 8001870:	f7ff ff7c 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x44>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x44>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	210f      	movs	r1, #15
 800189c:	187b      	adds	r3, r7, r1
 800189e:	1c02      	adds	r2, r0, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b004      	add	sp, #16
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff ffbf 	bl	8001848 <SysTick_Config>
 80018ca:	0003      	movs	r3, r0
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e2:	e149      	b.n	8001b78 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4091      	lsls	r1, r2
 80018ee:	000a      	movs	r2, r1
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d100      	bne.n	80018fc <HAL_GPIO_Init+0x28>
 80018fa:	e13a      	b.n	8001b72 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	4013      	ands	r3, r2
 8001904:	2b01      	cmp	r3, #1
 8001906:	d005      	beq.n	8001914 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001910:	2b02      	cmp	r3, #2
 8001912:	d130      	bne.n	8001976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	409a      	lsls	r2, r3
 8001922:	0013      	movs	r3, r2
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	409a      	lsls	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194a:	2201      	movs	r2, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	2201      	movs	r2, #1
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2203      	movs	r2, #3
 800197c:	4013      	ands	r3, r2
 800197e:	2b03      	cmp	r3, #3
 8001980:	d017      	beq.n	80019b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	43da      	mvns	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d123      	bne.n	8001a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	58d3      	ldr	r3, [r2, r3]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2207      	movs	r2, #7
 80019d0:	4013      	ands	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	409a      	lsls	r2, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	43da      	mvns	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2107      	movs	r1, #7
 80019ea:	400b      	ands	r3, r1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	409a      	lsls	r2, r3
 80019f0:	0013      	movs	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	08da      	lsrs	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3208      	adds	r2, #8
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	6939      	ldr	r1, [r7, #16]
 8001a04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	409a      	lsls	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	43da      	mvns	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2203      	movs	r2, #3
 8001a24:	401a      	ands	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	23c0      	movs	r3, #192	; 0xc0
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d100      	bne.n	8001a48 <HAL_GPIO_Init+0x174>
 8001a46:	e094      	b.n	8001b72 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a48:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	430a      	orrs	r2, r1
 8001a52:	619a      	str	r2, [r3, #24]
 8001a54:	4b4e      	ldr	r3, [pc, #312]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x2c0>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	589b      	ldr	r3, [r3, r2]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2203      	movs	r2, #3
 8001a72:	4013      	ands	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	2390      	movs	r3, #144	; 0x90
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1d6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <HAL_GPIO_Init+0x2c4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1d2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a40      	ldr	r2, [pc, #256]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1ce>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x1d8>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x1d8>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x1d8>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	2103      	movs	r1, #3
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	; (8001b94 <HAL_GPIO_Init+0x2c0>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	035b      	lsls	r3, r3, #13
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	039b      	lsls	r3, r3, #14
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	4013      	ands	r3, r2
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43da      	mvns	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	4013      	ands	r3, r2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	40da      	lsrs	r2, r3
 8001b80:	1e13      	subs	r3, r2, #0
 8001b82:	d000      	beq.n	8001b86 <HAL_GPIO_Init+0x2b2>
 8001b84:	e6ae      	b.n	80018e4 <HAL_GPIO_Init+0x10>
  } 
}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b006      	add	sp, #24
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	000a      	movs	r2, r1
 8001bae:	1cbb      	adds	r3, r7, #2
 8001bb0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	1cba      	adds	r2, r7, #2
 8001bb8:	8812      	ldrh	r2, [r2, #0]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e003      	b.n	8001bd0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc8:	230f      	movs	r3, #15
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	781b      	ldrb	r3, [r3, #0]
  }
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	b004      	add	sp, #16
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	0008      	movs	r0, r1
 8001be8:	0011      	movs	r1, r2
 8001bea:	1cbb      	adds	r3, r7, #2
 8001bec:	1c02      	adds	r2, r0, #0
 8001bee:	801a      	strh	r2, [r3, #0]
 8001bf0:	1c7b      	adds	r3, r7, #1
 8001bf2:	1c0a      	adds	r2, r1, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf6:	1c7b      	adds	r3, r7, #1
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	1cbb      	adds	r3, r7, #2
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c06:	e003      	b.n	8001c10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c08:	1cbb      	adds	r3, r7, #2
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f000 fb76 	bl	8002318 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2201      	movs	r2, #1
 8001c32:	4013      	ands	r3, r2
 8001c34:	d100      	bne.n	8001c38 <HAL_RCC_OscConfig+0x20>
 8001c36:	e08e      	b.n	8001d56 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c38:	4bc5      	ldr	r3, [pc, #788]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d00e      	beq.n	8001c62 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c44:	4bc2      	ldr	r3, [pc, #776]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d117      	bne.n	8001c80 <HAL_RCC_OscConfig+0x68>
 8001c50:	4bbf      	ldr	r3, [pc, #764]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	23c0      	movs	r3, #192	; 0xc0
 8001c56:	025b      	lsls	r3, r3, #9
 8001c58:	401a      	ands	r2, r3
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	025b      	lsls	r3, r3, #9
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d10e      	bne.n	8001c80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c62:	4bbb      	ldr	r3, [pc, #748]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d100      	bne.n	8001c70 <HAL_RCC_OscConfig+0x58>
 8001c6e:	e071      	b.n	8001d54 <HAL_RCC_OscConfig+0x13c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d000      	beq.n	8001c7a <HAL_RCC_OscConfig+0x62>
 8001c78:	e06c      	b.n	8001d54 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f000 fb4c 	bl	8002318 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x80>
 8001c88:	4bb1      	ldr	r3, [pc, #708]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4bb0      	ldr	r3, [pc, #704]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	0249      	lsls	r1, r1, #9
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e02f      	b.n	8001cf8 <HAL_RCC_OscConfig+0xe0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0xa2>
 8001ca0:	4bab      	ldr	r3, [pc, #684]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4baa      	ldr	r3, [pc, #680]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ca6:	49ab      	ldr	r1, [pc, #684]	; (8001f54 <HAL_RCC_OscConfig+0x33c>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	4ba8      	ldr	r3, [pc, #672]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4ba7      	ldr	r3, [pc, #668]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	49a9      	ldr	r1, [pc, #676]	; (8001f58 <HAL_RCC_OscConfig+0x340>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e01e      	b.n	8001cf8 <HAL_RCC_OscConfig+0xe0>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xc8>
 8001cc2:	4ba3      	ldr	r3, [pc, #652]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4ba2      	ldr	r3, [pc, #648]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	02c9      	lsls	r1, r1, #11
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	4b9f      	ldr	r3, [pc, #636]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b9e      	ldr	r3, [pc, #632]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0249      	lsls	r1, r1, #9
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xe0>
 8001ce0:	4b9b      	ldr	r3, [pc, #620]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b9a      	ldr	r3, [pc, #616]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ce6:	499b      	ldr	r1, [pc, #620]	; (8001f54 <HAL_RCC_OscConfig+0x33c>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	4b98      	ldr	r3, [pc, #608]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b97      	ldr	r3, [pc, #604]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	4999      	ldr	r1, [pc, #612]	; (8001f58 <HAL_RCC_OscConfig+0x340>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d014      	beq.n	8001d2a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fd06 	bl	8001710 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fd01 	bl	8001710 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e2fd      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	029b      	lsls	r3, r3, #10
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0xf2>
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fcf1 	bl	8001710 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fcec 	bl	8001710 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e2e8      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x11c>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <HAL_RCC_OscConfig+0x14a>
 8001d60:	e06c      	b.n	8001e3c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	220c      	movs	r2, #12
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d00e      	beq.n	8001d8a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d6c:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	220c      	movs	r2, #12
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d11f      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1a0>
 8001d78:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	23c0      	movs	r3, #192	; 0xc0
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	401a      	ands	r2, r3
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x188>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e2bb      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	22f8      	movs	r2, #248	; 0xf8
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00da      	lsls	r2, r3, #3
 8001db0:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e041      	b.n	8001e3c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d024      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b62      	ldr	r3, [pc, #392]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fca0 	bl	8001710 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fc9b 	bl	8001710 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e297      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d0f1      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	22f8      	movs	r2, #248	; 0xf8
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	00da      	lsls	r2, r3, #3
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e018      	b.n	8001e3c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	438a      	bics	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fc7b 	bl	8001710 <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff fc76 	bl	8001710 <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e272      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d1f1      	bne.n	8001e20 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2208      	movs	r2, #8
 8001e42:	4013      	ands	r3, r2
 8001e44:	d036      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d019      	beq.n	8001e82 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4e:	4b40      	ldr	r3, [pc, #256]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fc59 	bl	8001710 <HAL_GetTick>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fc54 	bl	8001710 <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e250      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f1      	beq.n	8001e64 <HAL_RCC_OscConfig+0x24c>
 8001e80:	e018      	b.n	8001eb4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fc3f 	bl	8001710 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc3a 	bl	8001710 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e236      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d1f1      	bne.n	8001e98 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d100      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x2a8>
 8001ebe:	e0b5      	b.n	800202c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec0:	201f      	movs	r0, #31
 8001ec2:	183b      	adds	r3, r7, r0
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec8:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	055b      	lsls	r3, r3, #21
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d110      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	0549      	lsls	r1, r1, #21
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	055b      	lsls	r3, r3, #21
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	d11a      	bne.n	8001f38 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0049      	lsls	r1, r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7ff fbfe 	bl	8001710 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff fbf9 	bl	8001710 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	; 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1f5      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x344>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10f      	bne.n	8001f60 <HAL_RCC_OscConfig+0x348>
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <HAL_RCC_OscConfig+0x338>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	621a      	str	r2, [r3, #32]
 8001f4c:	e036      	b.n	8001fbc <HAL_RCC_OscConfig+0x3a4>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40021000 	.word	0x40021000
 8001f54:	fffeffff 	.word	0xfffeffff
 8001f58:	fffbffff 	.word	0xfffbffff
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x36a>
 8001f68:	4bca      	ldr	r3, [pc, #808]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	4bc9      	ldr	r3, [pc, #804]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	438a      	bics	r2, r1
 8001f72:	621a      	str	r2, [r3, #32]
 8001f74:	4bc7      	ldr	r3, [pc, #796]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	4bc6      	ldr	r3, [pc, #792]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	621a      	str	r2, [r3, #32]
 8001f80:	e01c      	b.n	8001fbc <HAL_RCC_OscConfig+0x3a4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x38c>
 8001f8a:	4bc2      	ldr	r3, [pc, #776]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	4bc1      	ldr	r3, [pc, #772]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f90:	2104      	movs	r1, #4
 8001f92:	430a      	orrs	r2, r1
 8001f94:	621a      	str	r2, [r3, #32]
 8001f96:	4bbf      	ldr	r3, [pc, #764]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4bbe      	ldr	r3, [pc, #760]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	621a      	str	r2, [r3, #32]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x3a4>
 8001fa4:	4bbb      	ldr	r3, [pc, #748]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	4bba      	ldr	r3, [pc, #744]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	438a      	bics	r2, r1
 8001fae:	621a      	str	r2, [r3, #32]
 8001fb0:	4bb8      	ldr	r3, [pc, #736]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	4bb7      	ldr	r3, [pc, #732]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	438a      	bics	r2, r1
 8001fba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d014      	beq.n	8001fee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fba4 	bl	8001710 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7ff fb9f 	bl	8001710 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	4aaf      	ldr	r2, [pc, #700]	; (8002298 <HAL_RCC_OscConfig+0x680>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e19a      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe2:	4bac      	ldr	r3, [pc, #688]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x3b6>
 8001fec:	e013      	b.n	8002016 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fb8f 	bl	8001710 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff6:	e009      	b.n	800200c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fb8a 	bl	8001710 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	4aa5      	ldr	r2, [pc, #660]	; (8002298 <HAL_RCC_OscConfig+0x680>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e185      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200c:	4ba1      	ldr	r3, [pc, #644]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002016:	231f      	movs	r3, #31
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002020:	4b9c      	ldr	r3, [pc, #624]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	4b9b      	ldr	r3, [pc, #620]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002026:	499d      	ldr	r1, [pc, #628]	; (800229c <HAL_RCC_OscConfig+0x684>)
 8002028:	400a      	ands	r2, r1
 800202a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2210      	movs	r2, #16
 8002032:	4013      	ands	r3, r2
 8002034:	d063      	beq.n	80020fe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d12a      	bne.n	8002094 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800203e:	4b95      	ldr	r3, [pc, #596]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002042:	4b94      	ldr	r3, [pc, #592]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002044:	2104      	movs	r1, #4
 8002046:	430a      	orrs	r2, r1
 8002048:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800204a:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800204c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204e:	4b91      	ldr	r3, [pc, #580]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002050:	2101      	movs	r1, #1
 8002052:	430a      	orrs	r2, r1
 8002054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff fb5b 	bl	8001710 <HAL_GetTick>
 800205a:	0003      	movs	r3, r0
 800205c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002060:	f7ff fb56 	bl	8001710 <HAL_GetTick>
 8002064:	0002      	movs	r2, r0
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e152      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002072:	4b88      	ldr	r3, [pc, #544]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	d0f1      	beq.n	8002060 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800207c:	4b85      	ldr	r3, [pc, #532]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	22f8      	movs	r2, #248	; 0xf8
 8002082:	4393      	bics	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	00da      	lsls	r2, r3, #3
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800208e:	430a      	orrs	r2, r1
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
 8002092:	e034      	b.n	80020fe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	3305      	adds	r3, #5
 800209a:	d111      	bne.n	80020c0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800209c:	4b7d      	ldr	r3, [pc, #500]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800209e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a0:	4b7c      	ldr	r3, [pc, #496]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020a2:	2104      	movs	r1, #4
 80020a4:	438a      	bics	r2, r1
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020a8:	4b7a      	ldr	r3, [pc, #488]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	22f8      	movs	r2, #248	; 0xf8
 80020ae:	4393      	bics	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	00da      	lsls	r2, r3, #3
 80020b8:	4b76      	ldr	r3, [pc, #472]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34
 80020be:	e01e      	b.n	80020fe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020c0:	4b74      	ldr	r3, [pc, #464]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c4:	4b73      	ldr	r3, [pc, #460]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	2104      	movs	r1, #4
 80020c8:	430a      	orrs	r2, r1
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020cc:	4b71      	ldr	r3, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d0:	4b70      	ldr	r3, [pc, #448]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	438a      	bics	r2, r1
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7ff fb1a 	bl	8001710 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020e2:	f7ff fb15 	bl	8001710 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e111      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020f4:	4b67      	ldr	r3, [pc, #412]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f1      	bne.n	80020e2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	4013      	ands	r3, r2
 8002106:	d05c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002108:	4b62      	ldr	r3, [pc, #392]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	220c      	movs	r2, #12
 800210e:	4013      	ands	r3, r2
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d00e      	beq.n	8002132 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002114:	4b5f      	ldr	r3, [pc, #380]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800211c:	2b08      	cmp	r3, #8
 800211e:	d114      	bne.n	800214a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002120:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	23c0      	movs	r3, #192	; 0xc0
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	401a      	ands	r2, r3
 800212a:	23c0      	movs	r3, #192	; 0xc0
 800212c:	025b      	lsls	r3, r3, #9
 800212e:	429a      	cmp	r2, r3
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002132:	4b58      	ldr	r3, [pc, #352]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	029b      	lsls	r3, r3, #10
 800213a:	4013      	ands	r3, r2
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_OscConfig+0x5a8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d03c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0e6      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01b      	beq.n	800218a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002152:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002156:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	0249      	lsls	r1, r1, #9
 800215c:	430a      	orrs	r2, r1
 800215e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fad6 	bl	8001710 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800216a:	f7ff fad1 	bl	8001710 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0cd      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800217e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	029b      	lsls	r3, r3, #10
 8002184:	4013      	ands	r3, r2
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x552>
 8002188:	e01b      	b.n	80021c2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800218c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002190:	4943      	ldr	r1, [pc, #268]	; (80022a0 <HAL_RCC_OscConfig+0x688>)
 8002192:	400a      	ands	r2, r1
 8002194:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff fabb 	bl	8001710 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a0:	f7ff fab6 	bl	8001710 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0b2      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80021b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b6:	2380      	movs	r3, #128	; 0x80
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	4013      	ands	r3, r2
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x588>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021c0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <HAL_RCC_OscConfig+0x5b4>
 80021ca:	e0a4      	b.n	8002316 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	220c      	movs	r2, #12
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d100      	bne.n	80021da <HAL_RCC_OscConfig+0x5c2>
 80021d8:	e078      	b.n	80022cc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d14c      	bne.n	800227c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	492e      	ldr	r1, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x68c>)
 80021ea:	400a      	ands	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff fa8f 	bl	8001710 <HAL_GetTick>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff fa8a 	bl	8001710 <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e086      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	049b      	lsls	r3, r3, #18
 8002212:	4013      	ands	r3, r2
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	220f      	movs	r2, #15
 800221c:	4393      	bics	r3, r2
 800221e:	0019      	movs	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <HAL_RCC_OscConfig+0x690>)
 8002230:	4013      	ands	r3, r2
 8002232:	0019      	movs	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	431a      	orrs	r2, r3
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	0449      	lsls	r1, r1, #17
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fa5d 	bl	8001710 <HAL_GetTick>
 8002256:	0003      	movs	r3, r0
 8002258:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff fa58 	bl	8001710 <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e054      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	049b      	lsls	r3, r3, #18
 8002276:	4013      	ands	r3, r2
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x644>
 800227a:	e04c      	b.n	8002316 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_RCC_OscConfig+0x67c>)
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <HAL_RCC_OscConfig+0x68c>)
 8002284:	400a      	ands	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fa42 	bl	8001710 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x6a6>
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	40021000 	.word	0x40021000
 8002298:	00001388 	.word	0x00001388
 800229c:	efffffff 	.word	0xefffffff
 80022a0:	fffeffff 	.word	0xfffeffff
 80022a4:	feffffff 	.word	0xfeffffff
 80022a8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff fa30 	bl	8001710 <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e02c      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_RCC_OscConfig+0x708>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	049b      	lsls	r3, r3, #18
 80022c6:	4013      	ands	r3, r2
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x694>
 80022ca:	e024      	b.n	8002316 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e01f      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x708>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x708>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	401a      	ands	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d10e      	bne.n	8002312 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	220f      	movs	r2, #15
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d107      	bne.n	8002312 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	23f0      	movs	r3, #240	; 0xf0
 8002306:	039b      	lsls	r3, r3, #14
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b008      	add	sp, #32
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0bf      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2201      	movs	r2, #1
 800233e:	4013      	ands	r3, r2
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d911      	bls.n	800236a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b5e      	ldr	r3, [pc, #376]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2201      	movs	r2, #1
 800234c:	4393      	bics	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	4b5b      	ldr	r3, [pc, #364]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2201      	movs	r2, #1
 800235e:	4013      	ands	r3, r2
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0a6      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d015      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2204      	movs	r2, #4
 800237a:	4013      	ands	r3, r2
 800237c:	d006      	beq.n	800238c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800237e:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002384:	21e0      	movs	r1, #224	; 0xe0
 8002386:	00c9      	lsls	r1, r1, #3
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	22f0      	movs	r2, #240	; 0xf0
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	d04c      	beq.n	8002444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d120      	bne.n	8002400 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07a      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	049b      	lsls	r3, r3, #18
 80023d2:	4013      	ands	r3, r2
 80023d4:	d114      	bne.n	8002400 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06e      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 80023e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	029b      	lsls	r3, r3, #10
 80023ea:	4013      	ands	r3, r2
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e062      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e05b      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2203      	movs	r2, #3
 8002406:	4393      	bics	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002414:	f7ff f97c 	bl	8001710 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241c:	e009      	b.n	8002432 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241e:	f7ff f977 	bl	8001710 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_RCC_ClockConfig+0x1a4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e042      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	220c      	movs	r2, #12
 8002438:	401a      	ands	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1ec      	bne.n	800241e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2201      	movs	r2, #1
 800244a:	4013      	ands	r3, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d211      	bcs.n	8002476 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x19c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e020      	b.n	80024b8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_RCC_ClockConfig+0x1a8>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002494:	f000 f820 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002498:	0001      	movs	r1, r0
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1a0>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	220f      	movs	r2, #15
 80024a2:	4013      	ands	r3, r2
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_RCC_ClockConfig+0x1ac>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	000a      	movs	r2, r1
 80024aa:	40da      	lsrs	r2, r3
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1b0>)
 80024ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f7ff f8e7 	bl	8001684 <HAL_InitTick>
  
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b004      	add	sp, #16
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	00001388 	.word	0x00001388
 80024cc:	fffff8ff 	.word	0xfffff8ff
 80024d0:	08004b7c 	.word	0x08004b7c
 80024d4:	200000a0 	.word	0x200000a0

080024d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	220c      	movs	r2, #12
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d046      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0xb8>
 8002502:	d848      	bhi.n	8002596 <HAL_RCC_GetSysClockFreq+0xbe>
 8002504:	2b04      	cmp	r3, #4
 8002506:	d002      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x36>
 8002508:	2b08      	cmp	r3, #8
 800250a:	d003      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x3c>
 800250c:	e043      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002510:	613b      	str	r3, [r7, #16]
      break;
 8002512:	e043      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	220f      	movs	r2, #15
 800251a:	4013      	ands	r3, r2
 800251c:	4a24      	ldr	r2, [pc, #144]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	220f      	movs	r2, #15
 8002528:	4013      	ands	r3, r2
 800252a:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	23c0      	movs	r3, #192	; 0xc0
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	401a      	ands	r2, r3
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	429a      	cmp	r2, r3
 800253e:	d109      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	481a      	ldr	r0, [pc, #104]	; (80025ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002544:	f7fd fdea 	bl	800011c <__udivsi3>
 8002548:	0003      	movs	r3, r0
 800254a:	001a      	movs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4353      	muls	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e01a      	b.n	800258a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	23c0      	movs	r3, #192	; 0xc0
 8002558:	025b      	lsls	r3, r3, #9
 800255a:	401a      	ands	r2, r3
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	429a      	cmp	r2, r3
 8002562:	d109      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	4814      	ldr	r0, [pc, #80]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002568:	f7fd fdd8 	bl	800011c <__udivsi3>
 800256c:	0003      	movs	r3, r0
 800256e:	001a      	movs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4353      	muls	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e008      	b.n	800258a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	480c      	ldr	r0, [pc, #48]	; (80025ac <HAL_RCC_GetSysClockFreq+0xd4>)
 800257c:	f7fd fdce 	bl	800011c <__udivsi3>
 8002580:	0003      	movs	r3, r0
 8002582:	001a      	movs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4353      	muls	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	e005      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	e002      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8002598:	613b      	str	r3, [r7, #16]
      break;
 800259a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800259c:	693b      	ldr	r3, [r7, #16]
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b006      	add	sp, #24
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40021000 	.word	0x40021000
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	08004b94 	.word	0x08004b94
 80025b4:	08004ba4 	.word	0x08004ba4
 80025b8:	02dc6c00 	.word	0x02dc6c00

080025bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <HAL_RCC_GetHCLKFreq+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	200000a0 	.word	0x200000a0

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025d4:	f7ff fff2 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025d8:	0001      	movs	r1, r0
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	2207      	movs	r2, #7
 80025e2:	4013      	ands	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	40d9      	lsrs	r1, r3
 80025ea:	000b      	movs	r3, r1
}    
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08004b8c 	.word	0x08004b8c

080025fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	4013      	ands	r3, r2
 8002616:	d100      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002618:	e08e      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800261a:	2017      	movs	r0, #23
 800261c:	183b      	adds	r3, r7, r0
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	055b      	lsls	r3, r3, #21
 800262a:	4013      	ands	r3, r2
 800262c:	d110      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	0549      	lsls	r1, r1, #21
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
 800263c:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	055b      	lsls	r3, r3, #21
 8002644:	4013      	ands	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	183b      	adds	r3, r7, r0
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d11a      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	0049      	lsls	r1, r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7ff f851 	bl	8001710 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	e008      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002674:	f7ff f84c 	bl	8001710 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e097      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4013      	ands	r3, r2
 8002690:	d0f0      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002692:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002694:	6a1a      	ldr	r2, [r3, #32]
 8002696:	23c0      	movs	r3, #192	; 0xc0
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d034      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	23c0      	movs	r3, #192	; 0xc0
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d02c      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026b4:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026c0:	6a1a      	ldr	r2, [r3, #32]
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	0249      	lsls	r1, r1, #9
 80026c8:	430a      	orrs	r2, r1
 80026ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026cc:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026d2:	493e      	ldr	r1, [pc, #248]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d8:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7ff f813 	bl	8001710 <HAL_GetTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	e009      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7ff f80e 	bl	8001710 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e058      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2202      	movs	r2, #2
 800270a:	4013      	ands	r3, r2
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270e:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800271e:	430a      	orrs	r2, r1
 8002720:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002722:	2317      	movs	r3, #23
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002732:	4928      	ldr	r1, [pc, #160]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002734:	400a      	ands	r2, r1
 8002736:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2201      	movs	r2, #1
 800273e:	4013      	ands	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	2203      	movs	r2, #3
 8002748:	4393      	bics	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002752:	430a      	orrs	r2, r1
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	2210      	movs	r2, #16
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002770:	430a      	orrs	r2, r1
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	4013      	ands	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002790:	430a      	orrs	r2, r1
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4013      	ands	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	2240      	movs	r2, #64	; 0x40
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b006      	add	sp, #24
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40007000 	.word	0x40007000
 80027c8:	fffffcff 	.word	0xfffffcff
 80027cc:	fffeffff 	.word	0xfffeffff
 80027d0:	00001388 	.word	0x00001388
 80027d4:	efffffff 	.word	0xefffffff

080027d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0a8      	b.n	800293c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	2382      	movs	r3, #130	; 0x82
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d009      	beq.n	8002812 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	61da      	str	r2, [r3, #28]
 8002804:	e005      	b.n	8002812 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	225d      	movs	r2, #93	; 0x5d
 800281c:	5c9b      	ldrb	r3, [r3, r2]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	225c      	movs	r2, #92	; 0x5c
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f7fe fd80 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	225d      	movs	r2, #93	; 0x5d
 8002838:	2102      	movs	r1, #2
 800283a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	23e0      	movs	r3, #224	; 0xe0
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	429a      	cmp	r2, r3
 8002856:	d902      	bls.n	800285e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e002      	b.n	8002864 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	23f0      	movs	r3, #240	; 0xf0
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	429a      	cmp	r2, r3
 800286e:	d008      	beq.n	8002882 <HAL_SPI_Init+0xaa>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	23e0      	movs	r3, #224	; 0xe0
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	429a      	cmp	r2, r3
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	2382      	movs	r3, #130	; 0x82
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	401a      	ands	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	2384      	movs	r3, #132	; 0x84
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	400b      	ands	r3, r1
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2102      	movs	r1, #2
 800289e:	400b      	ands	r3, r1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2101      	movs	r1, #1
 80028a8:	400b      	ands	r3, r1
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6999      	ldr	r1, [r3, #24]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	400b      	ands	r3, r1
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2138      	movs	r1, #56	; 0x38
 80028be:	400b      	ands	r3, r1
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	400b      	ands	r3, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	0011      	movs	r1, r2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	401a      	ands	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	2204      	movs	r2, #4
 80028e8:	401a      	ands	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2110      	movs	r1, #16
 80028f0:	400b      	ands	r3, r1
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	2108      	movs	r1, #8
 80028fa:	400b      	ands	r3, r1
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	23f0      	movs	r3, #240	; 0xf0
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	400b      	ands	r3, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	0011      	movs	r1, r2
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	015b      	lsls	r3, r3, #5
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4907      	ldr	r1, [pc, #28]	; (8002944 <HAL_SPI_Init+0x16c>)
 8002928:	400a      	ands	r2, r1
 800292a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	225d      	movs	r2, #93	; 0x5d
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b004      	add	sp, #16
 8002942:	bd80      	pop	{r7, pc}
 8002944:	fffff7ff 	.word	0xfffff7ff

08002948 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	1dbb      	adds	r3, r7, #6
 8002956:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002958:	231f      	movs	r3, #31
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	225c      	movs	r2, #92	; 0x5c
 8002964:	5c9b      	ldrb	r3, [r3, r2]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_SPI_Transmit+0x26>
 800296a:	2302      	movs	r3, #2
 800296c:	e147      	b.n	8002bfe <HAL_SPI_Transmit+0x2b6>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	225c      	movs	r2, #92	; 0x5c
 8002972:	2101      	movs	r1, #1
 8002974:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002976:	f7fe fecb 	bl	8001710 <HAL_GetTick>
 800297a:	0003      	movs	r3, r0
 800297c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800297e:	2316      	movs	r3, #22
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	1dba      	adds	r2, r7, #6
 8002984:	8812      	ldrh	r2, [r2, #0]
 8002986:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	225d      	movs	r2, #93	; 0x5d
 800298c:	5c9b      	ldrb	r3, [r3, r2]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d004      	beq.n	800299e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002994:	231f      	movs	r3, #31
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2202      	movs	r2, #2
 800299a:	701a      	strb	r2, [r3, #0]
    goto error;
 800299c:	e128      	b.n	8002bf0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_SPI_Transmit+0x64>
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80029ac:	231f      	movs	r3, #31
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80029b4:	e11c      	b.n	8002bf0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	225d      	movs	r2, #93	; 0x5d
 80029ba:	2103      	movs	r1, #3
 80029bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1dba      	adds	r2, r7, #6
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1dba      	adds	r2, r7, #6
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2244      	movs	r2, #68	; 0x44
 80029e4:	2100      	movs	r1, #0
 80029e6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2246      	movs	r2, #70	; 0x46
 80029ec:	2100      	movs	r1, #0
 80029ee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d110      	bne.n	8002a2a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2140      	movs	r1, #64	; 0x40
 8002a14:	438a      	bics	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	01c9      	lsls	r1, r1, #7
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d007      	beq.n	8002a48 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2140      	movs	r1, #64	; 0x40
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	23e0      	movs	r3, #224	; 0xe0
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d952      	bls.n	8002afa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_SPI_Transmit+0x11e>
 8002a5c:	2316      	movs	r3, #22
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d143      	bne.n	8002aee <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	1c9a      	adds	r2, r3, #2
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a8a:	e030      	b.n	8002aee <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2202      	movs	r2, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d112      	bne.n	8002ac0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	881a      	ldrh	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	1c9a      	adds	r2, r3, #2
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002abe:	e016      	b.n	8002aee <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ac0:	f7fe fe26 	bl	8001710 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d802      	bhi.n	8002ad6 <HAL_SPI_Transmit+0x18e>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_SPI_Transmit+0x194>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002adc:	231f      	movs	r3, #31
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	225d      	movs	r2, #93	; 0x5d
 8002ae8:	2101      	movs	r1, #1
 8002aea:	5499      	strb	r1, [r3, r2]
          goto error;
 8002aec:	e080      	b.n	8002bf0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1c9      	bne.n	8002a8c <HAL_SPI_Transmit+0x144>
 8002af8:	e053      	b.n	8002ba2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <HAL_SPI_Transmit+0x1c4>
 8002b02:	2316      	movs	r3, #22
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d145      	bne.n	8002b98 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002b32:	e031      	b.n	8002b98 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d113      	bne.n	8002b6a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b68:	e016      	b.n	8002b98 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b6a:	f7fe fdd1 	bl	8001710 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d802      	bhi.n	8002b80 <HAL_SPI_Transmit+0x238>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_SPI_Transmit+0x23e>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002b86:	231f      	movs	r3, #31
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	225d      	movs	r2, #93	; 0x5d
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b96:	e02b      	b.n	8002bf0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1c8      	bne.n	8002b34 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f95d 	bl	8002e68 <SPI_EndRxTxTransaction>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002bde:	231f      	movs	r3, #31
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e003      	b.n	8002bf0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	225d      	movs	r2, #93	; 0x5d
 8002bec:	2101      	movs	r1, #1
 8002bee:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	225c      	movs	r2, #92	; 0x5c
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bf8:	231f      	movs	r3, #31
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b008      	add	sp, #32
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c18:	f7fe fd7a 	bl	8001710 <HAL_GetTick>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	18d3      	adds	r3, r2, r3
 8002c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c28:	f7fe fd72 	bl	8001710 <HAL_GetTick>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c30:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	015b      	lsls	r3, r3, #5
 8002c36:	0d1b      	lsrs	r3, r3, #20
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	4353      	muls	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c3e:	e058      	b.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	d055      	beq.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c46:	f7fe fd63 	bl	8001710 <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d902      	bls.n	8002c5c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d142      	bne.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	21e0      	movs	r1, #224	; 0xe0
 8002c68:	438a      	bics	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	2382      	movs	r3, #130	; 0x82
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d113      	bne.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d005      	beq.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2140      	movs	r1, #64	; 0x40
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	019b      	lsls	r3, r3, #6
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d110      	bne.n	8002cce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	0189      	lsls	r1, r1, #6
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	225d      	movs	r2, #93	; 0x5d
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	225c      	movs	r2, #92	; 0x5c
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e017      	b.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	425a      	negs	r2, r3
 8002d02:	4153      	adcs	r3, r2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	001a      	movs	r2, r3
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d197      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b008      	add	sp, #32
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	200000a0 	.word	0x200000a0
 8002d20:	ffffdfff 	.word	0xffffdfff

08002d24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d32:	2317      	movs	r3, #23
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d3a:	f7fe fce9 	bl	8001710 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	18d3      	adds	r3, r2, r3
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d4a:	f7fe fce1 	bl	8001710 <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	0013      	movs	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	00da      	lsls	r2, r3, #3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	0d1b      	lsrs	r3, r3, #20
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	4353      	muls	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d70:	e068      	b.n	8002e44 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	23c0      	movs	r3, #192	; 0xc0
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d10a      	bne.n	8002d92 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d107      	bne.n	8002d92 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	2117      	movs	r1, #23
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	d055      	beq.n	8002e44 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d98:	f7fe fcba 	bl	8001710 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d902      	bls.n	8002dae <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d142      	bne.n	8002e34 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	21e0      	movs	r1, #224	; 0xe0
 8002dba:	438a      	bics	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	2382      	movs	r3, #130	; 0x82
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d113      	bne.n	8002df2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d005      	beq.n	8002de2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d107      	bne.n	8002df2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	438a      	bics	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d110      	bne.n	8002e20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0189      	lsls	r1, r1, #6
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	225d      	movs	r2, #93	; 0x5d
 8002e24:	2101      	movs	r1, #1
 8002e26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	225c      	movs	r2, #92	; 0x5c
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e010      	b.n	8002e56 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d18e      	bne.n	8002d72 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b00a      	add	sp, #40	; 0x28
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	200000a0 	.word	0x200000a0
 8002e64:	ffffdfff 	.word	0xffffdfff

08002e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	23c0      	movs	r3, #192	; 0xc0
 8002e78:	0159      	lsls	r1, r3, #5
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	0013      	movs	r3, r2
 8002e82:	2200      	movs	r2, #0
 8002e84:	f7ff ff4e 	bl	8002d24 <SPI_WaitFifoStateUntilTimeout>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d007      	beq.n	8002e9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e90:	2220      	movs	r2, #32
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e027      	b.n	8002eec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	f7ff fead 	bl	8002c08 <SPI_WaitFlagStateUntilTimeout>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d007      	beq.n	8002ec2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e014      	b.n	8002eec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	23c0      	movs	r3, #192	; 0xc0
 8002ec6:	00d9      	lsls	r1, r3, #3
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	0013      	movs	r3, r2
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f7ff ff27 	bl	8002d24 <SPI_WaitFifoStateUntilTimeout>
 8002ed6:	1e03      	subs	r3, r0, #0
 8002ed8:	d007      	beq.n	8002eea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	2220      	movs	r2, #32
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e000      	b.n	8002eec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e044      	b.n	8002f90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2278      	movs	r2, #120	; 0x78
 8002f12:	2100      	movs	r1, #0
 8002f14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7fe fa57 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2224      	movs	r2, #36	; 0x24
 8002f22:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	438a      	bics	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f830 	bl	8002f9c <UART_SetConfig>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e024      	b.n	8002f90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 f963 	bl	800321c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	490d      	ldr	r1, [pc, #52]	; (8002f98 <HAL_UART_Init+0xa4>)
 8002f62:	400a      	ands	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	212a      	movs	r1, #42	; 0x2a
 8002f72:	438a      	bics	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f9fb 	bl	8003384 <UART_CheckIdleState>
 8002f8e:	0003      	movs	r3, r0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b002      	add	sp, #8
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	ffffb7ff 	.word	0xffffb7ff

08002f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa4:	231e      	movs	r3, #30
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a8d      	ldr	r2, [pc, #564]	; (8003200 <UART_SetConfig+0x264>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a88      	ldr	r2, [pc, #544]	; (8003204 <UART_SetConfig+0x268>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a7f      	ldr	r2, [pc, #508]	; (8003208 <UART_SetConfig+0x26c>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7b      	ldr	r2, [pc, #492]	; (800320c <UART_SetConfig+0x270>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d127      	bne.n	8003072 <UART_SetConfig+0xd6>
 8003022:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <UART_SetConfig+0x274>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	2203      	movs	r2, #3
 8003028:	4013      	ands	r3, r2
 800302a:	2b03      	cmp	r3, #3
 800302c:	d00d      	beq.n	800304a <UART_SetConfig+0xae>
 800302e:	d81b      	bhi.n	8003068 <UART_SetConfig+0xcc>
 8003030:	2b02      	cmp	r3, #2
 8003032:	d014      	beq.n	800305e <UART_SetConfig+0xc2>
 8003034:	d818      	bhi.n	8003068 <UART_SetConfig+0xcc>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <UART_SetConfig+0xa4>
 800303a:	2b01      	cmp	r3, #1
 800303c:	d00a      	beq.n	8003054 <UART_SetConfig+0xb8>
 800303e:	e013      	b.n	8003068 <UART_SetConfig+0xcc>
 8003040:	231f      	movs	r3, #31
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e021      	b.n	800308e <UART_SetConfig+0xf2>
 800304a:	231f      	movs	r3, #31
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	e01c      	b.n	800308e <UART_SetConfig+0xf2>
 8003054:	231f      	movs	r3, #31
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2204      	movs	r2, #4
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e017      	b.n	800308e <UART_SetConfig+0xf2>
 800305e:	231f      	movs	r3, #31
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	2208      	movs	r2, #8
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e012      	b.n	800308e <UART_SetConfig+0xf2>
 8003068:	231f      	movs	r3, #31
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2210      	movs	r2, #16
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e00d      	b.n	800308e <UART_SetConfig+0xf2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a67      	ldr	r2, [pc, #412]	; (8003214 <UART_SetConfig+0x278>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d104      	bne.n	8003086 <UART_SetConfig+0xea>
 800307c:	231f      	movs	r3, #31
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e003      	b.n	800308e <UART_SetConfig+0xf2>
 8003086:	231f      	movs	r3, #31
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2210      	movs	r2, #16
 800308c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	429a      	cmp	r2, r3
 8003098:	d15c      	bne.n	8003154 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800309a:	231f      	movs	r3, #31
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d015      	beq.n	80030d0 <UART_SetConfig+0x134>
 80030a4:	dc18      	bgt.n	80030d8 <UART_SetConfig+0x13c>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d00d      	beq.n	80030c6 <UART_SetConfig+0x12a>
 80030aa:	dc15      	bgt.n	80030d8 <UART_SetConfig+0x13c>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <UART_SetConfig+0x11a>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d005      	beq.n	80030c0 <UART_SetConfig+0x124>
 80030b4:	e010      	b.n	80030d8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b6:	f7ff fa8b 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80030ba:	0003      	movs	r3, r0
 80030bc:	61bb      	str	r3, [r7, #24]
        break;
 80030be:	e012      	b.n	80030e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c0:	4b55      	ldr	r3, [pc, #340]	; (8003218 <UART_SetConfig+0x27c>)
 80030c2:	61bb      	str	r3, [r7, #24]
        break;
 80030c4:	e00f      	b.n	80030e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c6:	f7ff fa07 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 80030ca:	0003      	movs	r3, r0
 80030cc:	61bb      	str	r3, [r7, #24]
        break;
 80030ce:	e00a      	b.n	80030e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	61bb      	str	r3, [r7, #24]
        break;
 80030d6:	e006      	b.n	80030e6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030dc:	231e      	movs	r3, #30
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
        break;
 80030e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d100      	bne.n	80030ee <UART_SetConfig+0x152>
 80030ec:	e07a      	b.n	80031e4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	005a      	lsls	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	18d2      	adds	r2, r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	0019      	movs	r1, r3
 8003100:	0010      	movs	r0, r2
 8003102:	f7fd f80b 	bl	800011c <__udivsi3>
 8003106:	0003      	movs	r3, r0
 8003108:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d91c      	bls.n	800314a <UART_SetConfig+0x1ae>
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	025b      	lsls	r3, r3, #9
 8003116:	429a      	cmp	r2, r3
 8003118:	d217      	bcs.n	800314a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	b29a      	uxth	r2, r3
 800311e:	200e      	movs	r0, #14
 8003120:	183b      	adds	r3, r7, r0
 8003122:	210f      	movs	r1, #15
 8003124:	438a      	bics	r2, r1
 8003126:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	b29b      	uxth	r3, r3
 800312e:	2207      	movs	r2, #7
 8003130:	4013      	ands	r3, r2
 8003132:	b299      	uxth	r1, r3
 8003134:	183b      	adds	r3, r7, r0
 8003136:	183a      	adds	r2, r7, r0
 8003138:	8812      	ldrh	r2, [r2, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	183a      	adds	r2, r7, r0
 8003144:	8812      	ldrh	r2, [r2, #0]
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	e04c      	b.n	80031e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800314a:	231e      	movs	r3, #30
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e047      	b.n	80031e4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003154:	231f      	movs	r3, #31
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d015      	beq.n	800318a <UART_SetConfig+0x1ee>
 800315e:	dc18      	bgt.n	8003192 <UART_SetConfig+0x1f6>
 8003160:	2b04      	cmp	r3, #4
 8003162:	d00d      	beq.n	8003180 <UART_SetConfig+0x1e4>
 8003164:	dc15      	bgt.n	8003192 <UART_SetConfig+0x1f6>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <UART_SetConfig+0x1d4>
 800316a:	2b02      	cmp	r3, #2
 800316c:	d005      	beq.n	800317a <UART_SetConfig+0x1de>
 800316e:	e010      	b.n	8003192 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7ff fa2e 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8003174:	0003      	movs	r3, r0
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e012      	b.n	80031a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <UART_SetConfig+0x27c>)
 800317c:	61bb      	str	r3, [r7, #24]
        break;
 800317e:	e00f      	b.n	80031a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003180:	f7ff f9aa 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8003184:	0003      	movs	r3, r0
 8003186:	61bb      	str	r3, [r7, #24]
        break;
 8003188:	e00a      	b.n	80031a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e006      	b.n	80031a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003196:	231e      	movs	r3, #30
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
        break;
 800319e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01e      	beq.n	80031e4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	085a      	lsrs	r2, r3, #1
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	18d2      	adds	r2, r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	0019      	movs	r1, r3
 80031b6:	0010      	movs	r0, r2
 80031b8:	f7fc ffb0 	bl	800011c <__udivsi3>
 80031bc:	0003      	movs	r3, r0
 80031be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	d90a      	bls.n	80031dc <UART_SetConfig+0x240>
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	025b      	lsls	r3, r3, #9
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d205      	bcs.n	80031dc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	e003      	b.n	80031e4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80031dc:	231e      	movs	r3, #30
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031f0:	231e      	movs	r3, #30
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	781b      	ldrb	r3, [r3, #0]
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b008      	add	sp, #32
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	efff69f3 	.word	0xefff69f3
 8003204:	ffffcfff 	.word	0xffffcfff
 8003208:	fffff4ff 	.word	0xfffff4ff
 800320c:	40013800 	.word	0x40013800
 8003210:	40021000 	.word	0x40021000
 8003214:	40004400 	.word	0x40004400
 8003218:	007a1200 	.word	0x007a1200

0800321c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2201      	movs	r2, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d00b      	beq.n	8003246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a4a      	ldr	r2, [pc, #296]	; (8003360 <UART_AdvFeatureConfig+0x144>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d00b      	beq.n	8003268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a43      	ldr	r2, [pc, #268]	; (8003364 <UART_AdvFeatureConfig+0x148>)
 8003258:	4013      	ands	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	2204      	movs	r2, #4
 800326e:	4013      	ands	r3, r2
 8003270:	d00b      	beq.n	800328a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a3b      	ldr	r2, [pc, #236]	; (8003368 <UART_AdvFeatureConfig+0x14c>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2208      	movs	r2, #8
 8003290:	4013      	ands	r3, r2
 8003292:	d00b      	beq.n	80032ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a34      	ldr	r2, [pc, #208]	; (800336c <UART_AdvFeatureConfig+0x150>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2210      	movs	r2, #16
 80032b2:	4013      	ands	r3, r2
 80032b4:	d00b      	beq.n	80032ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <UART_AdvFeatureConfig+0x154>)
 80032be:	4013      	ands	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2220      	movs	r2, #32
 80032d4:	4013      	ands	r3, r2
 80032d6:	d00b      	beq.n	80032f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <UART_AdvFeatureConfig+0x158>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	2240      	movs	r2, #64	; 0x40
 80032f6:	4013      	ands	r3, r2
 80032f8:	d01d      	beq.n	8003336 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <UART_AdvFeatureConfig+0x15c>)
 8003302:	4013      	ands	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	035b      	lsls	r3, r3, #13
 800331a:	429a      	cmp	r2, r3
 800331c:	d10b      	bne.n	8003336 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <UART_AdvFeatureConfig+0x160>)
 8003326:	4013      	ands	r3, r2
 8003328:	0019      	movs	r1, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	4013      	ands	r3, r2
 800333e:	d00b      	beq.n	8003358 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <UART_AdvFeatureConfig+0x164>)
 8003348:	4013      	ands	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b002      	add	sp, #8
 800335e:	bd80      	pop	{r7, pc}
 8003360:	fffdffff 	.word	0xfffdffff
 8003364:	fffeffff 	.word	0xfffeffff
 8003368:	fffbffff 	.word	0xfffbffff
 800336c:	ffff7fff 	.word	0xffff7fff
 8003370:	ffffefff 	.word	0xffffefff
 8003374:	ffffdfff 	.word	0xffffdfff
 8003378:	ffefffff 	.word	0xffefffff
 800337c:	ff9fffff 	.word	0xff9fffff
 8003380:	fff7ffff 	.word	0xfff7ffff

08003384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b092      	sub	sp, #72	; 0x48
 8003388:	af02      	add	r7, sp, #8
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2284      	movs	r2, #132	; 0x84
 8003390:	2100      	movs	r1, #0
 8003392:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003394:	f7fe f9bc 	bl	8001710 <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2208      	movs	r2, #8
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d12c      	bne.n	8003404 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	0391      	lsls	r1, r2, #14
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4a46      	ldr	r2, [pc, #280]	; (80034cc <UART_CheckIdleState+0x148>)
 80033b4:	9200      	str	r2, [sp, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f000 f88c 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d021      	beq.n	8003404 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c0:	f3ef 8310 	mrs	r3, PRIMASK
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ca:	2301      	movs	r3, #1
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	f383 8810 	msr	PRIMASK, r3
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	438a      	bics	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2278      	movs	r2, #120	; 0x78
 80033fc:	2100      	movs	r1, #0
 80033fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e05f      	b.n	80034c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2204      	movs	r2, #4
 800340c:	4013      	ands	r3, r2
 800340e:	2b04      	cmp	r3, #4
 8003410:	d146      	bne.n	80034a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	03d1      	lsls	r1, r2, #15
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <UART_CheckIdleState+0x148>)
 800341c:	9200      	str	r2, [sp, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	f000 f858 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d03b      	beq.n	80034a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003428:	f3ef 8310 	mrs	r3, PRIMASK
 800342c:	60fb      	str	r3, [r7, #12]
  return(result);
 800342e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
 8003432:	2301      	movs	r3, #1
 8003434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f383 8810 	msr	PRIMASK, r3
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4921      	ldr	r1, [pc, #132]	; (80034d0 <UART_CheckIdleState+0x14c>)
 800344a:	400a      	ands	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345a:	f3ef 8310 	mrs	r3, PRIMASK
 800345e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003460:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
 8003464:	2301      	movs	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	438a      	bics	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f383 8810 	msr	PRIMASK, r3
}
 800348a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	2120      	movs	r1, #32
 8003492:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2278      	movs	r2, #120	; 0x78
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e011      	b.n	80034c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	2120      	movs	r1, #32
 80034ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2278      	movs	r2, #120	; 0x78
 80034be:	2100      	movs	r1, #0
 80034c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b010      	add	sp, #64	; 0x40
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	01ffffff 	.word	0x01ffffff
 80034d0:	fffffedf 	.word	0xfffffedf

080034d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e4:	e04b      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	3301      	adds	r3, #1
 80034ea:	d048      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe f910 	bl	8001710 <HAL_GetTick>
 80034f0:	0002      	movs	r2, r0
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <UART_WaitOnFlagUntilTimeout+0x2e>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e04b      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2204      	movs	r2, #4
 800350e:	4013      	ands	r3, r2
 8003510:	d035      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	2208      	movs	r2, #8
 800351a:	4013      	ands	r3, r2
 800351c:	2b08      	cmp	r3, #8
 800351e:	d111      	bne.n	8003544 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2208      	movs	r2, #8
 8003526:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f83c 	bl	80035a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2284      	movs	r2, #132	; 0x84
 8003534:	2108      	movs	r1, #8
 8003536:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2278      	movs	r2, #120	; 0x78
 800353c:	2100      	movs	r1, #0
 800353e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e02c      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69da      	ldr	r2, [r3, #28]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	401a      	ands	r2, r3
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	429a      	cmp	r2, r3
 8003556:	d112      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	0018      	movs	r0, r3
 8003566:	f000 f81f 	bl	80035a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2284      	movs	r2, #132	; 0x84
 800356e:	2120      	movs	r1, #32
 8003570:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2278      	movs	r2, #120	; 0x78
 8003576:	2100      	movs	r1, #0
 8003578:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e00f      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	425a      	negs	r2, r3
 800358e:	4153      	adcs	r3, r2
 8003590:	b2db      	uxtb	r3, r3
 8003592:	001a      	movs	r2, r3
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d0a4      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b004      	add	sp, #16
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08e      	sub	sp, #56	; 0x38
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b0:	f3ef 8310 	mrs	r3, PRIMASK
 80035b4:	617b      	str	r3, [r7, #20]
  return(result);
 80035b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4926      	ldr	r1, [pc, #152]	; (800366c <UART_EndRxTransfer+0xc4>)
 80035d2:	400a      	ands	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e2:	f3ef 8310 	mrs	r3, PRIMASK
 80035e6:	623b      	str	r3, [r7, #32]
  return(result);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	633b      	str	r3, [r7, #48]	; 0x30
 80035ec:	2301      	movs	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	438a      	bics	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	2b01      	cmp	r3, #1
 800361a:	d118      	bne.n	800364e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361c:	f3ef 8310 	mrs	r3, PRIMASK
 8003620:	60bb      	str	r3, [r7, #8]
  return(result);
 8003622:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003626:	2301      	movs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2110      	movs	r1, #16
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f383 8810 	msr	PRIMASK, r3
}
 800364c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	2120      	movs	r1, #32
 8003654:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b00e      	add	sp, #56	; 0x38
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	fffffedf 	.word	0xfffffedf

08003670 <__errno>:
 8003670:	4b01      	ldr	r3, [pc, #4]	; (8003678 <__errno+0x8>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	4770      	bx	lr
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	200000ac 	.word	0x200000ac

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	2600      	movs	r6, #0
 8003680:	4d0c      	ldr	r5, [pc, #48]	; (80036b4 <__libc_init_array+0x38>)
 8003682:	4c0d      	ldr	r4, [pc, #52]	; (80036b8 <__libc_init_array+0x3c>)
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	2600      	movs	r6, #0
 800368e:	f001 f87f 	bl	8004790 <_init>
 8003692:	4d0a      	ldr	r5, [pc, #40]	; (80036bc <__libc_init_array+0x40>)
 8003694:	4c0a      	ldr	r4, [pc, #40]	; (80036c0 <__libc_init_array+0x44>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	00b3      	lsls	r3, r6, #2
 80036a2:	58eb      	ldr	r3, [r5, r3]
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	00b3      	lsls	r3, r6, #2
 80036ac:	58eb      	ldr	r3, [r5, r3]
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	08004c4c 	.word	0x08004c4c
 80036b8:	08004c4c 	.word	0x08004c4c
 80036bc:	08004c4c 	.word	0x08004c4c
 80036c0:	08004c50 	.word	0x08004c50

080036c4 <malloc>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <malloc+0x10>)
 80036c8:	0001      	movs	r1, r0
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	f000 f878 	bl	80037c0 <_malloc_r>
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	200000ac 	.word	0x200000ac

080036d8 <memset>:
 80036d8:	0003      	movs	r3, r0
 80036da:	1882      	adds	r2, r0, r2
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	7019      	strb	r1, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <_free_r>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	0005      	movs	r5, r0
 80036ec:	2900      	cmp	r1, #0
 80036ee:	d010      	beq.n	8003712 <_free_r+0x2a>
 80036f0:	1f0c      	subs	r4, r1, #4
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da00      	bge.n	80036fa <_free_r+0x12>
 80036f8:	18e4      	adds	r4, r4, r3
 80036fa:	0028      	movs	r0, r5
 80036fc:	f000 fc8a 	bl	8004014 <__malloc_lock>
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <_free_r+0x90>)
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <_free_r+0x2c>
 8003708:	6063      	str	r3, [r4, #4]
 800370a:	6014      	str	r4, [r2, #0]
 800370c:	0028      	movs	r0, r5
 800370e:	f000 fc89 	bl	8004024 <__malloc_unlock>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	42a3      	cmp	r3, r4
 8003716:	d908      	bls.n	800372a <_free_r+0x42>
 8003718:	6821      	ldr	r1, [r4, #0]
 800371a:	1860      	adds	r0, r4, r1
 800371c:	4283      	cmp	r3, r0
 800371e:	d1f3      	bne.n	8003708 <_free_r+0x20>
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	1841      	adds	r1, r0, r1
 8003726:	6021      	str	r1, [r4, #0]
 8003728:	e7ee      	b.n	8003708 <_free_r+0x20>
 800372a:	001a      	movs	r2, r3
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <_free_r+0x4e>
 8003732:	42a3      	cmp	r3, r4
 8003734:	d9f9      	bls.n	800372a <_free_r+0x42>
 8003736:	6811      	ldr	r1, [r2, #0]
 8003738:	1850      	adds	r0, r2, r1
 800373a:	42a0      	cmp	r0, r4
 800373c:	d10b      	bne.n	8003756 <_free_r+0x6e>
 800373e:	6820      	ldr	r0, [r4, #0]
 8003740:	1809      	adds	r1, r1, r0
 8003742:	1850      	adds	r0, r2, r1
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	4283      	cmp	r3, r0
 8003748:	d1e0      	bne.n	800370c <_free_r+0x24>
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	1841      	adds	r1, r0, r1
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	6053      	str	r3, [r2, #4]
 8003754:	e7da      	b.n	800370c <_free_r+0x24>
 8003756:	42a0      	cmp	r0, r4
 8003758:	d902      	bls.n	8003760 <_free_r+0x78>
 800375a:	230c      	movs	r3, #12
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	e7d5      	b.n	800370c <_free_r+0x24>
 8003760:	6821      	ldr	r1, [r4, #0]
 8003762:	1860      	adds	r0, r4, r1
 8003764:	4283      	cmp	r3, r0
 8003766:	d103      	bne.n	8003770 <_free_r+0x88>
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	1841      	adds	r1, r0, r1
 800376e:	6021      	str	r1, [r4, #0]
 8003770:	6063      	str	r3, [r4, #4]
 8003772:	6054      	str	r4, [r2, #4]
 8003774:	e7ca      	b.n	800370c <_free_r+0x24>
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	20000238 	.word	0x20000238

0800377c <sbrk_aligned>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4e0f      	ldr	r6, [pc, #60]	; (80037bc <sbrk_aligned+0x40>)
 8003780:	000d      	movs	r5, r1
 8003782:	6831      	ldr	r1, [r6, #0]
 8003784:	0004      	movs	r4, r0
 8003786:	2900      	cmp	r1, #0
 8003788:	d102      	bne.n	8003790 <sbrk_aligned+0x14>
 800378a:	f000 f925 	bl	80039d8 <_sbrk_r>
 800378e:	6030      	str	r0, [r6, #0]
 8003790:	0029      	movs	r1, r5
 8003792:	0020      	movs	r0, r4
 8003794:	f000 f920 	bl	80039d8 <_sbrk_r>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d00a      	beq.n	80037b2 <sbrk_aligned+0x36>
 800379c:	2303      	movs	r3, #3
 800379e:	1cc5      	adds	r5, r0, #3
 80037a0:	439d      	bics	r5, r3
 80037a2:	42a8      	cmp	r0, r5
 80037a4:	d007      	beq.n	80037b6 <sbrk_aligned+0x3a>
 80037a6:	1a29      	subs	r1, r5, r0
 80037a8:	0020      	movs	r0, r4
 80037aa:	f000 f915 	bl	80039d8 <_sbrk_r>
 80037ae:	1c43      	adds	r3, r0, #1
 80037b0:	d101      	bne.n	80037b6 <sbrk_aligned+0x3a>
 80037b2:	2501      	movs	r5, #1
 80037b4:	426d      	negs	r5, r5
 80037b6:	0028      	movs	r0, r5
 80037b8:	bd70      	pop	{r4, r5, r6, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	2000023c 	.word	0x2000023c

080037c0 <_malloc_r>:
 80037c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c2:	2203      	movs	r2, #3
 80037c4:	1ccb      	adds	r3, r1, #3
 80037c6:	4393      	bics	r3, r2
 80037c8:	3308      	adds	r3, #8
 80037ca:	0006      	movs	r6, r0
 80037cc:	001f      	movs	r7, r3
 80037ce:	2b0c      	cmp	r3, #12
 80037d0:	d232      	bcs.n	8003838 <_malloc_r+0x78>
 80037d2:	270c      	movs	r7, #12
 80037d4:	42b9      	cmp	r1, r7
 80037d6:	d831      	bhi.n	800383c <_malloc_r+0x7c>
 80037d8:	0030      	movs	r0, r6
 80037da:	f000 fc1b 	bl	8004014 <__malloc_lock>
 80037de:	4d32      	ldr	r5, [pc, #200]	; (80038a8 <_malloc_r+0xe8>)
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	001c      	movs	r4, r3
 80037e4:	2c00      	cmp	r4, #0
 80037e6:	d12e      	bne.n	8003846 <_malloc_r+0x86>
 80037e8:	0039      	movs	r1, r7
 80037ea:	0030      	movs	r0, r6
 80037ec:	f7ff ffc6 	bl	800377c <sbrk_aligned>
 80037f0:	0004      	movs	r4, r0
 80037f2:	1c43      	adds	r3, r0, #1
 80037f4:	d11e      	bne.n	8003834 <_malloc_r+0x74>
 80037f6:	682c      	ldr	r4, [r5, #0]
 80037f8:	0025      	movs	r5, r4
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	d14a      	bne.n	8003894 <_malloc_r+0xd4>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	0029      	movs	r1, r5
 8003802:	18e3      	adds	r3, r4, r3
 8003804:	0030      	movs	r0, r6
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	f000 f8e6 	bl	80039d8 <_sbrk_r>
 800380c:	9b01      	ldr	r3, [sp, #4]
 800380e:	4283      	cmp	r3, r0
 8003810:	d143      	bne.n	800389a <_malloc_r+0xda>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	3703      	adds	r7, #3
 8003816:	1aff      	subs	r7, r7, r3
 8003818:	2303      	movs	r3, #3
 800381a:	439f      	bics	r7, r3
 800381c:	3708      	adds	r7, #8
 800381e:	2f0c      	cmp	r7, #12
 8003820:	d200      	bcs.n	8003824 <_malloc_r+0x64>
 8003822:	270c      	movs	r7, #12
 8003824:	0039      	movs	r1, r7
 8003826:	0030      	movs	r0, r6
 8003828:	f7ff ffa8 	bl	800377c <sbrk_aligned>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d034      	beq.n	800389a <_malloc_r+0xda>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	19df      	adds	r7, r3, r7
 8003834:	6027      	str	r7, [r4, #0]
 8003836:	e013      	b.n	8003860 <_malloc_r+0xa0>
 8003838:	2b00      	cmp	r3, #0
 800383a:	dacb      	bge.n	80037d4 <_malloc_r+0x14>
 800383c:	230c      	movs	r3, #12
 800383e:	2500      	movs	r5, #0
 8003840:	6033      	str	r3, [r6, #0]
 8003842:	0028      	movs	r0, r5
 8003844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	1bd1      	subs	r1, r2, r7
 800384a:	d420      	bmi.n	800388e <_malloc_r+0xce>
 800384c:	290b      	cmp	r1, #11
 800384e:	d917      	bls.n	8003880 <_malloc_r+0xc0>
 8003850:	19e2      	adds	r2, r4, r7
 8003852:	6027      	str	r7, [r4, #0]
 8003854:	42a3      	cmp	r3, r4
 8003856:	d111      	bne.n	800387c <_malloc_r+0xbc>
 8003858:	602a      	str	r2, [r5, #0]
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	6011      	str	r1, [r2, #0]
 800385e:	6053      	str	r3, [r2, #4]
 8003860:	0030      	movs	r0, r6
 8003862:	0025      	movs	r5, r4
 8003864:	f000 fbde 	bl	8004024 <__malloc_unlock>
 8003868:	2207      	movs	r2, #7
 800386a:	350b      	adds	r5, #11
 800386c:	1d23      	adds	r3, r4, #4
 800386e:	4395      	bics	r5, r2
 8003870:	1aea      	subs	r2, r5, r3
 8003872:	429d      	cmp	r5, r3
 8003874:	d0e5      	beq.n	8003842 <_malloc_r+0x82>
 8003876:	1b5b      	subs	r3, r3, r5
 8003878:	50a3      	str	r3, [r4, r2]
 800387a:	e7e2      	b.n	8003842 <_malloc_r+0x82>
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	e7ec      	b.n	800385a <_malloc_r+0x9a>
 8003880:	6862      	ldr	r2, [r4, #4]
 8003882:	42a3      	cmp	r3, r4
 8003884:	d101      	bne.n	800388a <_malloc_r+0xca>
 8003886:	602a      	str	r2, [r5, #0]
 8003888:	e7ea      	b.n	8003860 <_malloc_r+0xa0>
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	e7e8      	b.n	8003860 <_malloc_r+0xa0>
 800388e:	0023      	movs	r3, r4
 8003890:	6864      	ldr	r4, [r4, #4]
 8003892:	e7a7      	b.n	80037e4 <_malloc_r+0x24>
 8003894:	002c      	movs	r4, r5
 8003896:	686d      	ldr	r5, [r5, #4]
 8003898:	e7af      	b.n	80037fa <_malloc_r+0x3a>
 800389a:	230c      	movs	r3, #12
 800389c:	0030      	movs	r0, r6
 800389e:	6033      	str	r3, [r6, #0]
 80038a0:	f000 fbc0 	bl	8004024 <__malloc_unlock>
 80038a4:	e7cd      	b.n	8003842 <_malloc_r+0x82>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000238 	.word	0x20000238

080038ac <iprintf>:
 80038ac:	b40f      	push	{r0, r1, r2, r3}
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <iprintf+0x30>)
 80038b0:	b513      	push	{r0, r1, r4, lr}
 80038b2:	681c      	ldr	r4, [r3, #0]
 80038b4:	2c00      	cmp	r4, #0
 80038b6:	d005      	beq.n	80038c4 <iprintf+0x18>
 80038b8:	69a3      	ldr	r3, [r4, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <iprintf+0x18>
 80038be:	0020      	movs	r0, r4
 80038c0:	f000 fa98 	bl	8003df4 <__sinit>
 80038c4:	ab05      	add	r3, sp, #20
 80038c6:	0020      	movs	r0, r4
 80038c8:	9a04      	ldr	r2, [sp, #16]
 80038ca:	68a1      	ldr	r1, [r4, #8]
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	f000 fbd9 	bl	8004084 <_vfiprintf_r>
 80038d2:	bc16      	pop	{r1, r2, r4}
 80038d4:	bc08      	pop	{r3}
 80038d6:	b004      	add	sp, #16
 80038d8:	4718      	bx	r3
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	200000ac 	.word	0x200000ac

080038e0 <_puts_r>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	0005      	movs	r5, r0
 80038e4:	000e      	movs	r6, r1
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d004      	beq.n	80038f4 <_puts_r+0x14>
 80038ea:	6983      	ldr	r3, [r0, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <_puts_r+0x14>
 80038f0:	f000 fa80 	bl	8003df4 <__sinit>
 80038f4:	69ab      	ldr	r3, [r5, #24]
 80038f6:	68ac      	ldr	r4, [r5, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <_puts_r+0x22>
 80038fc:	0028      	movs	r0, r5
 80038fe:	f000 fa79 	bl	8003df4 <__sinit>
 8003902:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <_puts_r+0xd8>)
 8003904:	429c      	cmp	r4, r3
 8003906:	d122      	bne.n	800394e <_puts_r+0x6e>
 8003908:	686c      	ldr	r4, [r5, #4]
 800390a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800390c:	07db      	lsls	r3, r3, #31
 800390e:	d405      	bmi.n	800391c <_puts_r+0x3c>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	059b      	lsls	r3, r3, #22
 8003914:	d402      	bmi.n	800391c <_puts_r+0x3c>
 8003916:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003918:	f000 fb0d 	bl	8003f36 <__retarget_lock_acquire_recursive>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	071b      	lsls	r3, r3, #28
 8003920:	d502      	bpl.n	8003928 <_puts_r+0x48>
 8003922:	6923      	ldr	r3, [r4, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d129      	bne.n	800397c <_puts_r+0x9c>
 8003928:	0021      	movs	r1, r4
 800392a:	0028      	movs	r0, r5
 800392c:	f000 f8bc 	bl	8003aa8 <__swsetup_r>
 8003930:	2800      	cmp	r0, #0
 8003932:	d023      	beq.n	800397c <_puts_r+0x9c>
 8003934:	2501      	movs	r5, #1
 8003936:	426d      	negs	r5, r5
 8003938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800393a:	07db      	lsls	r3, r3, #31
 800393c:	d405      	bmi.n	800394a <_puts_r+0x6a>
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	059b      	lsls	r3, r3, #22
 8003942:	d402      	bmi.n	800394a <_puts_r+0x6a>
 8003944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003946:	f000 faf7 	bl	8003f38 <__retarget_lock_release_recursive>
 800394a:	0028      	movs	r0, r5
 800394c:	bd70      	pop	{r4, r5, r6, pc}
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <_puts_r+0xdc>)
 8003950:	429c      	cmp	r4, r3
 8003952:	d101      	bne.n	8003958 <_puts_r+0x78>
 8003954:	68ac      	ldr	r4, [r5, #8]
 8003956:	e7d8      	b.n	800390a <_puts_r+0x2a>
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <_puts_r+0xe0>)
 800395a:	429c      	cmp	r4, r3
 800395c:	d1d5      	bne.n	800390a <_puts_r+0x2a>
 800395e:	68ec      	ldr	r4, [r5, #12]
 8003960:	e7d3      	b.n	800390a <_puts_r+0x2a>
 8003962:	3601      	adds	r6, #1
 8003964:	60a3      	str	r3, [r4, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	da04      	bge.n	8003974 <_puts_r+0x94>
 800396a:	69a2      	ldr	r2, [r4, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	dc16      	bgt.n	800399e <_puts_r+0xbe>
 8003970:	290a      	cmp	r1, #10
 8003972:	d014      	beq.n	800399e <_puts_r+0xbe>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	6022      	str	r2, [r4, #0]
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	68a3      	ldr	r3, [r4, #8]
 800397e:	7831      	ldrb	r1, [r6, #0]
 8003980:	3b01      	subs	r3, #1
 8003982:	2900      	cmp	r1, #0
 8003984:	d1ed      	bne.n	8003962 <_puts_r+0x82>
 8003986:	60a3      	str	r3, [r4, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	da0f      	bge.n	80039ac <_puts_r+0xcc>
 800398c:	0028      	movs	r0, r5
 800398e:	0022      	movs	r2, r4
 8003990:	310a      	adds	r1, #10
 8003992:	f000 f833 	bl	80039fc <__swbuf_r>
 8003996:	250a      	movs	r5, #10
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	d1cd      	bne.n	8003938 <_puts_r+0x58>
 800399c:	e7ca      	b.n	8003934 <_puts_r+0x54>
 800399e:	0022      	movs	r2, r4
 80039a0:	0028      	movs	r0, r5
 80039a2:	f000 f82b 	bl	80039fc <__swbuf_r>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d1e8      	bne.n	800397c <_puts_r+0x9c>
 80039aa:	e7c3      	b.n	8003934 <_puts_r+0x54>
 80039ac:	250a      	movs	r5, #10
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	6022      	str	r2, [r4, #0]
 80039b4:	701d      	strb	r5, [r3, #0]
 80039b6:	e7bf      	b.n	8003938 <_puts_r+0x58>
 80039b8:	08004bd8 	.word	0x08004bd8
 80039bc:	08004bf8 	.word	0x08004bf8
 80039c0:	08004bb8 	.word	0x08004bb8

080039c4 <puts>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <puts+0x10>)
 80039c8:	0001      	movs	r1, r0
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	f7ff ff88 	bl	80038e0 <_puts_r>
 80039d0:	bd10      	pop	{r4, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	200000ac 	.word	0x200000ac

080039d8 <_sbrk_r>:
 80039d8:	2300      	movs	r3, #0
 80039da:	b570      	push	{r4, r5, r6, lr}
 80039dc:	4d06      	ldr	r5, [pc, #24]	; (80039f8 <_sbrk_r+0x20>)
 80039de:	0004      	movs	r4, r0
 80039e0:	0008      	movs	r0, r1
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	f7fd fdbc 	bl	8001560 <_sbrk>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d103      	bne.n	80039f4 <_sbrk_r+0x1c>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d000      	beq.n	80039f4 <_sbrk_r+0x1c>
 80039f2:	6023      	str	r3, [r4, #0]
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	20000244 	.word	0x20000244

080039fc <__swbuf_r>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	0005      	movs	r5, r0
 8003a00:	000e      	movs	r6, r1
 8003a02:	0014      	movs	r4, r2
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d004      	beq.n	8003a12 <__swbuf_r+0x16>
 8003a08:	6983      	ldr	r3, [r0, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <__swbuf_r+0x16>
 8003a0e:	f000 f9f1 	bl	8003df4 <__sinit>
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <__swbuf_r+0xa0>)
 8003a14:	429c      	cmp	r4, r3
 8003a16:	d12e      	bne.n	8003a76 <__swbuf_r+0x7a>
 8003a18:	686c      	ldr	r4, [r5, #4]
 8003a1a:	69a3      	ldr	r3, [r4, #24]
 8003a1c:	60a3      	str	r3, [r4, #8]
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	d532      	bpl.n	8003a8a <__swbuf_r+0x8e>
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d02f      	beq.n	8003a8a <__swbuf_r+0x8e>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	6922      	ldr	r2, [r4, #16]
 8003a2e:	b2f7      	uxtb	r7, r6
 8003a30:	1a98      	subs	r0, r3, r2
 8003a32:	6963      	ldr	r3, [r4, #20]
 8003a34:	b2f6      	uxtb	r6, r6
 8003a36:	4283      	cmp	r3, r0
 8003a38:	dc05      	bgt.n	8003a46 <__swbuf_r+0x4a>
 8003a3a:	0021      	movs	r1, r4
 8003a3c:	0028      	movs	r0, r5
 8003a3e:	f000 f937 	bl	8003cb0 <_fflush_r>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d127      	bne.n	8003a96 <__swbuf_r+0x9a>
 8003a46:	68a3      	ldr	r3, [r4, #8]
 8003a48:	3001      	adds	r0, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60a3      	str	r3, [r4, #8]
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	6022      	str	r2, [r4, #0]
 8003a54:	701f      	strb	r7, [r3, #0]
 8003a56:	6963      	ldr	r3, [r4, #20]
 8003a58:	4283      	cmp	r3, r0
 8003a5a:	d004      	beq.n	8003a66 <__swbuf_r+0x6a>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	07db      	lsls	r3, r3, #31
 8003a60:	d507      	bpl.n	8003a72 <__swbuf_r+0x76>
 8003a62:	2e0a      	cmp	r6, #10
 8003a64:	d105      	bne.n	8003a72 <__swbuf_r+0x76>
 8003a66:	0021      	movs	r1, r4
 8003a68:	0028      	movs	r0, r5
 8003a6a:	f000 f921 	bl	8003cb0 <_fflush_r>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d111      	bne.n	8003a96 <__swbuf_r+0x9a>
 8003a72:	0030      	movs	r0, r6
 8003a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <__swbuf_r+0xa4>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d101      	bne.n	8003a80 <__swbuf_r+0x84>
 8003a7c:	68ac      	ldr	r4, [r5, #8]
 8003a7e:	e7cc      	b.n	8003a1a <__swbuf_r+0x1e>
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <__swbuf_r+0xa8>)
 8003a82:	429c      	cmp	r4, r3
 8003a84:	d1c9      	bne.n	8003a1a <__swbuf_r+0x1e>
 8003a86:	68ec      	ldr	r4, [r5, #12]
 8003a88:	e7c7      	b.n	8003a1a <__swbuf_r+0x1e>
 8003a8a:	0021      	movs	r1, r4
 8003a8c:	0028      	movs	r0, r5
 8003a8e:	f000 f80b 	bl	8003aa8 <__swsetup_r>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d0c9      	beq.n	8003a2a <__swbuf_r+0x2e>
 8003a96:	2601      	movs	r6, #1
 8003a98:	4276      	negs	r6, r6
 8003a9a:	e7ea      	b.n	8003a72 <__swbuf_r+0x76>
 8003a9c:	08004bd8 	.word	0x08004bd8
 8003aa0:	08004bf8 	.word	0x08004bf8
 8003aa4:	08004bb8 	.word	0x08004bb8

08003aa8 <__swsetup_r>:
 8003aa8:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <__swsetup_r+0xe0>)
 8003aaa:	b570      	push	{r4, r5, r6, lr}
 8003aac:	681d      	ldr	r5, [r3, #0]
 8003aae:	0006      	movs	r6, r0
 8003ab0:	000c      	movs	r4, r1
 8003ab2:	2d00      	cmp	r5, #0
 8003ab4:	d005      	beq.n	8003ac2 <__swsetup_r+0x1a>
 8003ab6:	69ab      	ldr	r3, [r5, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <__swsetup_r+0x1a>
 8003abc:	0028      	movs	r0, r5
 8003abe:	f000 f999 	bl	8003df4 <__sinit>
 8003ac2:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <__swsetup_r+0xe4>)
 8003ac4:	429c      	cmp	r4, r3
 8003ac6:	d10f      	bne.n	8003ae8 <__swsetup_r+0x40>
 8003ac8:	686c      	ldr	r4, [r5, #4]
 8003aca:	230c      	movs	r3, #12
 8003acc:	5ee2      	ldrsh	r2, [r4, r3]
 8003ace:	b293      	uxth	r3, r2
 8003ad0:	0711      	lsls	r1, r2, #28
 8003ad2:	d42d      	bmi.n	8003b30 <__swsetup_r+0x88>
 8003ad4:	06d9      	lsls	r1, r3, #27
 8003ad6:	d411      	bmi.n	8003afc <__swsetup_r+0x54>
 8003ad8:	2309      	movs	r3, #9
 8003ada:	2001      	movs	r0, #1
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	3337      	adds	r3, #55	; 0x37
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	81a3      	strh	r3, [r4, #12]
 8003ae4:	4240      	negs	r0, r0
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <__swsetup_r+0xe8>)
 8003aea:	429c      	cmp	r4, r3
 8003aec:	d101      	bne.n	8003af2 <__swsetup_r+0x4a>
 8003aee:	68ac      	ldr	r4, [r5, #8]
 8003af0:	e7eb      	b.n	8003aca <__swsetup_r+0x22>
 8003af2:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <__swsetup_r+0xec>)
 8003af4:	429c      	cmp	r4, r3
 8003af6:	d1e8      	bne.n	8003aca <__swsetup_r+0x22>
 8003af8:	68ec      	ldr	r4, [r5, #12]
 8003afa:	e7e6      	b.n	8003aca <__swsetup_r+0x22>
 8003afc:	075b      	lsls	r3, r3, #29
 8003afe:	d513      	bpl.n	8003b28 <__swsetup_r+0x80>
 8003b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b02:	2900      	cmp	r1, #0
 8003b04:	d008      	beq.n	8003b18 <__swsetup_r+0x70>
 8003b06:	0023      	movs	r3, r4
 8003b08:	3344      	adds	r3, #68	; 0x44
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d002      	beq.n	8003b14 <__swsetup_r+0x6c>
 8003b0e:	0030      	movs	r0, r6
 8003b10:	f7ff fdea 	bl	80036e8 <_free_r>
 8003b14:	2300      	movs	r3, #0
 8003b16:	6363      	str	r3, [r4, #52]	; 0x34
 8003b18:	2224      	movs	r2, #36	; 0x24
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	81a3      	strh	r3, [r4, #12]
 8003b20:	2300      	movs	r3, #0
 8003b22:	6063      	str	r3, [r4, #4]
 8003b24:	6923      	ldr	r3, [r4, #16]
 8003b26:	6023      	str	r3, [r4, #0]
 8003b28:	2308      	movs	r3, #8
 8003b2a:	89a2      	ldrh	r2, [r4, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <__swsetup_r+0xa6>
 8003b36:	21a0      	movs	r1, #160	; 0xa0
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	0089      	lsls	r1, r1, #2
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	400b      	ands	r3, r1
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <__swsetup_r+0xa6>
 8003b46:	0021      	movs	r1, r4
 8003b48:	0030      	movs	r0, r6
 8003b4a:	f000 fa1f 	bl	8003f8c <__smakebuf_r>
 8003b4e:	220c      	movs	r2, #12
 8003b50:	5ea3      	ldrsh	r3, [r4, r2]
 8003b52:	2001      	movs	r0, #1
 8003b54:	001a      	movs	r2, r3
 8003b56:	b299      	uxth	r1, r3
 8003b58:	4002      	ands	r2, r0
 8003b5a:	4203      	tst	r3, r0
 8003b5c:	d00f      	beq.n	8003b7e <__swsetup_r+0xd6>
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60a2      	str	r2, [r4, #8]
 8003b62:	6962      	ldr	r2, [r4, #20]
 8003b64:	4252      	negs	r2, r2
 8003b66:	61a2      	str	r2, [r4, #24]
 8003b68:	2000      	movs	r0, #0
 8003b6a:	6922      	ldr	r2, [r4, #16]
 8003b6c:	4282      	cmp	r2, r0
 8003b6e:	d1ba      	bne.n	8003ae6 <__swsetup_r+0x3e>
 8003b70:	060a      	lsls	r2, r1, #24
 8003b72:	d5b8      	bpl.n	8003ae6 <__swsetup_r+0x3e>
 8003b74:	2240      	movs	r2, #64	; 0x40
 8003b76:	4313      	orrs	r3, r2
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	3801      	subs	r0, #1
 8003b7c:	e7b3      	b.n	8003ae6 <__swsetup_r+0x3e>
 8003b7e:	0788      	lsls	r0, r1, #30
 8003b80:	d400      	bmi.n	8003b84 <__swsetup_r+0xdc>
 8003b82:	6962      	ldr	r2, [r4, #20]
 8003b84:	60a2      	str	r2, [r4, #8]
 8003b86:	e7ef      	b.n	8003b68 <__swsetup_r+0xc0>
 8003b88:	200000ac 	.word	0x200000ac
 8003b8c:	08004bd8 	.word	0x08004bd8
 8003b90:	08004bf8 	.word	0x08004bf8
 8003b94:	08004bb8 	.word	0x08004bb8

08003b98 <__sflush_r>:
 8003b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b9a:	898b      	ldrh	r3, [r1, #12]
 8003b9c:	0005      	movs	r5, r0
 8003b9e:	000c      	movs	r4, r1
 8003ba0:	071a      	lsls	r2, r3, #28
 8003ba2:	d45f      	bmi.n	8003c64 <__sflush_r+0xcc>
 8003ba4:	684a      	ldr	r2, [r1, #4]
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	dc04      	bgt.n	8003bb4 <__sflush_r+0x1c>
 8003baa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	dc01      	bgt.n	8003bb4 <__sflush_r+0x1c>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bb4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003bb6:	2f00      	cmp	r7, #0
 8003bb8:	d0fa      	beq.n	8003bb0 <__sflush_r+0x18>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	682e      	ldr	r6, [r5, #0]
 8003bc0:	602a      	str	r2, [r5, #0]
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	0149      	lsls	r1, r1, #5
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	420b      	tst	r3, r1
 8003bca:	d034      	beq.n	8003c36 <__sflush_r+0x9e>
 8003bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bce:	89a3      	ldrh	r3, [r4, #12]
 8003bd0:	075b      	lsls	r3, r3, #29
 8003bd2:	d506      	bpl.n	8003be2 <__sflush_r+0x4a>
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	1ac0      	subs	r0, r0, r3
 8003bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <__sflush_r+0x4a>
 8003bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003be0:	1ac0      	subs	r0, r0, r3
 8003be2:	0002      	movs	r2, r0
 8003be4:	6a21      	ldr	r1, [r4, #32]
 8003be6:	2300      	movs	r3, #0
 8003be8:	0028      	movs	r0, r5
 8003bea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003bec:	47b8      	blx	r7
 8003bee:	89a1      	ldrh	r1, [r4, #12]
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d106      	bne.n	8003c02 <__sflush_r+0x6a>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	2b1d      	cmp	r3, #29
 8003bf8:	d831      	bhi.n	8003c5e <__sflush_r+0xc6>
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <__sflush_r+0x114>)
 8003bfc:	40da      	lsrs	r2, r3
 8003bfe:	07d3      	lsls	r3, r2, #31
 8003c00:	d52d      	bpl.n	8003c5e <__sflush_r+0xc6>
 8003c02:	2300      	movs	r3, #0
 8003c04:	6063      	str	r3, [r4, #4]
 8003c06:	6923      	ldr	r3, [r4, #16]
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	04cb      	lsls	r3, r1, #19
 8003c0c:	d505      	bpl.n	8003c1a <__sflush_r+0x82>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d102      	bne.n	8003c18 <__sflush_r+0x80>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d100      	bne.n	8003c1a <__sflush_r+0x82>
 8003c18:	6560      	str	r0, [r4, #84]	; 0x54
 8003c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c1c:	602e      	str	r6, [r5, #0]
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d0c6      	beq.n	8003bb0 <__sflush_r+0x18>
 8003c22:	0023      	movs	r3, r4
 8003c24:	3344      	adds	r3, #68	; 0x44
 8003c26:	4299      	cmp	r1, r3
 8003c28:	d002      	beq.n	8003c30 <__sflush_r+0x98>
 8003c2a:	0028      	movs	r0, r5
 8003c2c:	f7ff fd5c 	bl	80036e8 <_free_r>
 8003c30:	2000      	movs	r0, #0
 8003c32:	6360      	str	r0, [r4, #52]	; 0x34
 8003c34:	e7bd      	b.n	8003bb2 <__sflush_r+0x1a>
 8003c36:	2301      	movs	r3, #1
 8003c38:	0028      	movs	r0, r5
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	47b8      	blx	r7
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d1c5      	bne.n	8003bce <__sflush_r+0x36>
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0c2      	beq.n	8003bce <__sflush_r+0x36>
 8003c48:	2b1d      	cmp	r3, #29
 8003c4a:	d001      	beq.n	8003c50 <__sflush_r+0xb8>
 8003c4c:	2b16      	cmp	r3, #22
 8003c4e:	d101      	bne.n	8003c54 <__sflush_r+0xbc>
 8003c50:	602e      	str	r6, [r5, #0]
 8003c52:	e7ad      	b.n	8003bb0 <__sflush_r+0x18>
 8003c54:	2340      	movs	r3, #64	; 0x40
 8003c56:	89a2      	ldrh	r2, [r4, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	81a3      	strh	r3, [r4, #12]
 8003c5c:	e7a9      	b.n	8003bb2 <__sflush_r+0x1a>
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	430b      	orrs	r3, r1
 8003c62:	e7fa      	b.n	8003c5a <__sflush_r+0xc2>
 8003c64:	690f      	ldr	r7, [r1, #16]
 8003c66:	2f00      	cmp	r7, #0
 8003c68:	d0a2      	beq.n	8003bb0 <__sflush_r+0x18>
 8003c6a:	680a      	ldr	r2, [r1, #0]
 8003c6c:	600f      	str	r7, [r1, #0]
 8003c6e:	1bd2      	subs	r2, r2, r7
 8003c70:	9201      	str	r2, [sp, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	079b      	lsls	r3, r3, #30
 8003c76:	d100      	bne.n	8003c7a <__sflush_r+0xe2>
 8003c78:	694a      	ldr	r2, [r1, #20]
 8003c7a:	60a2      	str	r2, [r4, #8]
 8003c7c:	9b01      	ldr	r3, [sp, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	dc00      	bgt.n	8003c84 <__sflush_r+0xec>
 8003c82:	e795      	b.n	8003bb0 <__sflush_r+0x18>
 8003c84:	003a      	movs	r2, r7
 8003c86:	0028      	movs	r0, r5
 8003c88:	9b01      	ldr	r3, [sp, #4]
 8003c8a:	6a21      	ldr	r1, [r4, #32]
 8003c8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c8e:	47b0      	blx	r6
 8003c90:	2800      	cmp	r0, #0
 8003c92:	dc06      	bgt.n	8003ca2 <__sflush_r+0x10a>
 8003c94:	2340      	movs	r3, #64	; 0x40
 8003c96:	2001      	movs	r0, #1
 8003c98:	89a2      	ldrh	r2, [r4, #12]
 8003c9a:	4240      	negs	r0, r0
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	81a3      	strh	r3, [r4, #12]
 8003ca0:	e787      	b.n	8003bb2 <__sflush_r+0x1a>
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	183f      	adds	r7, r7, r0
 8003ca6:	1a1b      	subs	r3, r3, r0
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	e7e7      	b.n	8003c7c <__sflush_r+0xe4>
 8003cac:	20400001 	.word	0x20400001

08003cb0 <_fflush_r>:
 8003cb0:	690b      	ldr	r3, [r1, #16]
 8003cb2:	b570      	push	{r4, r5, r6, lr}
 8003cb4:	0005      	movs	r5, r0
 8003cb6:	000c      	movs	r4, r1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d102      	bne.n	8003cc2 <_fflush_r+0x12>
 8003cbc:	2500      	movs	r5, #0
 8003cbe:	0028      	movs	r0, r5
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d004      	beq.n	8003cd0 <_fflush_r+0x20>
 8003cc6:	6983      	ldr	r3, [r0, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <_fflush_r+0x20>
 8003ccc:	f000 f892 	bl	8003df4 <__sinit>
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <_fflush_r+0x74>)
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d11b      	bne.n	8003d0e <_fflush_r+0x5e>
 8003cd6:	686c      	ldr	r4, [r5, #4]
 8003cd8:	220c      	movs	r2, #12
 8003cda:	5ea3      	ldrsh	r3, [r4, r2]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ed      	beq.n	8003cbc <_fflush_r+0xc>
 8003ce0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ce2:	07d2      	lsls	r2, r2, #31
 8003ce4:	d404      	bmi.n	8003cf0 <_fflush_r+0x40>
 8003ce6:	059b      	lsls	r3, r3, #22
 8003ce8:	d402      	bmi.n	8003cf0 <_fflush_r+0x40>
 8003cea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cec:	f000 f923 	bl	8003f36 <__retarget_lock_acquire_recursive>
 8003cf0:	0028      	movs	r0, r5
 8003cf2:	0021      	movs	r1, r4
 8003cf4:	f7ff ff50 	bl	8003b98 <__sflush_r>
 8003cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cfa:	0005      	movs	r5, r0
 8003cfc:	07db      	lsls	r3, r3, #31
 8003cfe:	d4de      	bmi.n	8003cbe <_fflush_r+0xe>
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	059b      	lsls	r3, r3, #22
 8003d04:	d4db      	bmi.n	8003cbe <_fflush_r+0xe>
 8003d06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d08:	f000 f916 	bl	8003f38 <__retarget_lock_release_recursive>
 8003d0c:	e7d7      	b.n	8003cbe <_fflush_r+0xe>
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <_fflush_r+0x78>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d101      	bne.n	8003d18 <_fflush_r+0x68>
 8003d14:	68ac      	ldr	r4, [r5, #8]
 8003d16:	e7df      	b.n	8003cd8 <_fflush_r+0x28>
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <_fflush_r+0x7c>)
 8003d1a:	429c      	cmp	r4, r3
 8003d1c:	d1dc      	bne.n	8003cd8 <_fflush_r+0x28>
 8003d1e:	68ec      	ldr	r4, [r5, #12]
 8003d20:	e7da      	b.n	8003cd8 <_fflush_r+0x28>
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	08004bd8 	.word	0x08004bd8
 8003d28:	08004bf8 	.word	0x08004bf8
 8003d2c:	08004bb8 	.word	0x08004bb8

08003d30 <std>:
 8003d30:	2300      	movs	r3, #0
 8003d32:	b510      	push	{r4, lr}
 8003d34:	0004      	movs	r4, r0
 8003d36:	6003      	str	r3, [r0, #0]
 8003d38:	6043      	str	r3, [r0, #4]
 8003d3a:	6083      	str	r3, [r0, #8]
 8003d3c:	8181      	strh	r1, [r0, #12]
 8003d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d40:	0019      	movs	r1, r3
 8003d42:	81c2      	strh	r2, [r0, #14]
 8003d44:	6103      	str	r3, [r0, #16]
 8003d46:	6143      	str	r3, [r0, #20]
 8003d48:	6183      	str	r3, [r0, #24]
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	305c      	adds	r0, #92	; 0x5c
 8003d4e:	f7ff fcc3 	bl	80036d8 <memset>
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <std+0x38>)
 8003d54:	6224      	str	r4, [r4, #32]
 8003d56:	6263      	str	r3, [r4, #36]	; 0x24
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <std+0x3c>)
 8003d5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <std+0x40>)
 8003d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <std+0x44>)
 8003d62:	6323      	str	r3, [r4, #48]	; 0x30
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	080045fd 	.word	0x080045fd
 8003d6c:	08004625 	.word	0x08004625
 8003d70:	0800465d 	.word	0x0800465d
 8003d74:	08004689 	.word	0x08004689

08003d78 <_cleanup_r>:
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	4902      	ldr	r1, [pc, #8]	; (8003d84 <_cleanup_r+0xc>)
 8003d7c:	f000 f8ba 	bl	8003ef4 <_fwalk_reent>
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	08003cb1 	.word	0x08003cb1

08003d88 <__sfmoreglue>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	2568      	movs	r5, #104	; 0x68
 8003d8c:	1e4a      	subs	r2, r1, #1
 8003d8e:	4355      	muls	r5, r2
 8003d90:	000e      	movs	r6, r1
 8003d92:	0029      	movs	r1, r5
 8003d94:	3174      	adds	r1, #116	; 0x74
 8003d96:	f7ff fd13 	bl	80037c0 <_malloc_r>
 8003d9a:	1e04      	subs	r4, r0, #0
 8003d9c:	d008      	beq.n	8003db0 <__sfmoreglue+0x28>
 8003d9e:	2100      	movs	r1, #0
 8003da0:	002a      	movs	r2, r5
 8003da2:	6001      	str	r1, [r0, #0]
 8003da4:	6046      	str	r6, [r0, #4]
 8003da6:	300c      	adds	r0, #12
 8003da8:	60a0      	str	r0, [r4, #8]
 8003daa:	3268      	adds	r2, #104	; 0x68
 8003dac:	f7ff fc94 	bl	80036d8 <memset>
 8003db0:	0020      	movs	r0, r4
 8003db2:	bd70      	pop	{r4, r5, r6, pc}

08003db4 <__sfp_lock_acquire>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <__sfp_lock_acquire+0xc>)
 8003db8:	f000 f8bd 	bl	8003f36 <__retarget_lock_acquire_recursive>
 8003dbc:	bd10      	pop	{r4, pc}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	20000241 	.word	0x20000241

08003dc4 <__sfp_lock_release>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <__sfp_lock_release+0xc>)
 8003dc8:	f000 f8b6 	bl	8003f38 <__retarget_lock_release_recursive>
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000241 	.word	0x20000241

08003dd4 <__sinit_lock_acquire>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	4802      	ldr	r0, [pc, #8]	; (8003de0 <__sinit_lock_acquire+0xc>)
 8003dd8:	f000 f8ad 	bl	8003f36 <__retarget_lock_acquire_recursive>
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	20000242 	.word	0x20000242

08003de4 <__sinit_lock_release>:
 8003de4:	b510      	push	{r4, lr}
 8003de6:	4802      	ldr	r0, [pc, #8]	; (8003df0 <__sinit_lock_release+0xc>)
 8003de8:	f000 f8a6 	bl	8003f38 <__retarget_lock_release_recursive>
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	20000242 	.word	0x20000242

08003df4 <__sinit>:
 8003df4:	b513      	push	{r0, r1, r4, lr}
 8003df6:	0004      	movs	r4, r0
 8003df8:	f7ff ffec 	bl	8003dd4 <__sinit_lock_acquire>
 8003dfc:	69a3      	ldr	r3, [r4, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <__sinit+0x14>
 8003e02:	f7ff ffef 	bl	8003de4 <__sinit_lock_release>
 8003e06:	bd13      	pop	{r0, r1, r4, pc}
 8003e08:	64a3      	str	r3, [r4, #72]	; 0x48
 8003e0a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <__sinit+0x68>)
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <__sinit+0x6c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	d101      	bne.n	8003e20 <__sinit+0x2c>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	61a3      	str	r3, [r4, #24]
 8003e20:	0020      	movs	r0, r4
 8003e22:	f000 f81f 	bl	8003e64 <__sfp>
 8003e26:	6060      	str	r0, [r4, #4]
 8003e28:	0020      	movs	r0, r4
 8003e2a:	f000 f81b 	bl	8003e64 <__sfp>
 8003e2e:	60a0      	str	r0, [r4, #8]
 8003e30:	0020      	movs	r0, r4
 8003e32:	f000 f817 	bl	8003e64 <__sfp>
 8003e36:	2200      	movs	r2, #0
 8003e38:	2104      	movs	r1, #4
 8003e3a:	60e0      	str	r0, [r4, #12]
 8003e3c:	6860      	ldr	r0, [r4, #4]
 8003e3e:	f7ff ff77 	bl	8003d30 <std>
 8003e42:	2201      	movs	r2, #1
 8003e44:	2109      	movs	r1, #9
 8003e46:	68a0      	ldr	r0, [r4, #8]
 8003e48:	f7ff ff72 	bl	8003d30 <std>
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	2112      	movs	r1, #18
 8003e50:	68e0      	ldr	r0, [r4, #12]
 8003e52:	f7ff ff6d 	bl	8003d30 <std>
 8003e56:	2301      	movs	r3, #1
 8003e58:	61a3      	str	r3, [r4, #24]
 8003e5a:	e7d2      	b.n	8003e02 <__sinit+0xe>
 8003e5c:	08004bb4 	.word	0x08004bb4
 8003e60:	08003d79 	.word	0x08003d79

08003e64 <__sfp>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	0007      	movs	r7, r0
 8003e68:	f7ff ffa4 	bl	8003db4 <__sfp_lock_acquire>
 8003e6c:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <__sfp+0x88>)
 8003e6e:	681e      	ldr	r6, [r3, #0]
 8003e70:	69b3      	ldr	r3, [r6, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <__sfp+0x18>
 8003e76:	0030      	movs	r0, r6
 8003e78:	f7ff ffbc 	bl	8003df4 <__sinit>
 8003e7c:	3648      	adds	r6, #72	; 0x48
 8003e7e:	68b4      	ldr	r4, [r6, #8]
 8003e80:	6873      	ldr	r3, [r6, #4]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	d504      	bpl.n	8003e90 <__sfp+0x2c>
 8003e86:	6833      	ldr	r3, [r6, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d022      	beq.n	8003ed2 <__sfp+0x6e>
 8003e8c:	6836      	ldr	r6, [r6, #0]
 8003e8e:	e7f6      	b.n	8003e7e <__sfp+0x1a>
 8003e90:	220c      	movs	r2, #12
 8003e92:	5ea5      	ldrsh	r5, [r4, r2]
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	d11a      	bne.n	8003ece <__sfp+0x6a>
 8003e98:	0020      	movs	r0, r4
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <__sfp+0x8c>)
 8003e9c:	3058      	adds	r0, #88	; 0x58
 8003e9e:	60e3      	str	r3, [r4, #12]
 8003ea0:	6665      	str	r5, [r4, #100]	; 0x64
 8003ea2:	f000 f847 	bl	8003f34 <__retarget_lock_init_recursive>
 8003ea6:	f7ff ff8d 	bl	8003dc4 <__sfp_lock_release>
 8003eaa:	0020      	movs	r0, r4
 8003eac:	2208      	movs	r2, #8
 8003eae:	0029      	movs	r1, r5
 8003eb0:	6025      	str	r5, [r4, #0]
 8003eb2:	60a5      	str	r5, [r4, #8]
 8003eb4:	6065      	str	r5, [r4, #4]
 8003eb6:	6125      	str	r5, [r4, #16]
 8003eb8:	6165      	str	r5, [r4, #20]
 8003eba:	61a5      	str	r5, [r4, #24]
 8003ebc:	305c      	adds	r0, #92	; 0x5c
 8003ebe:	f7ff fc0b 	bl	80036d8 <memset>
 8003ec2:	6365      	str	r5, [r4, #52]	; 0x34
 8003ec4:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ec6:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ec8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003eca:	0020      	movs	r0, r4
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ece:	3468      	adds	r4, #104	; 0x68
 8003ed0:	e7d7      	b.n	8003e82 <__sfp+0x1e>
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	0038      	movs	r0, r7
 8003ed6:	f7ff ff57 	bl	8003d88 <__sfmoreglue>
 8003eda:	1e04      	subs	r4, r0, #0
 8003edc:	6030      	str	r0, [r6, #0]
 8003ede:	d1d5      	bne.n	8003e8c <__sfp+0x28>
 8003ee0:	f7ff ff70 	bl	8003dc4 <__sfp_lock_release>
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	e7ef      	b.n	8003eca <__sfp+0x66>
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	08004bb4 	.word	0x08004bb4
 8003ef0:	ffff0001 	.word	0xffff0001

08003ef4 <_fwalk_reent>:
 8003ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ef6:	0004      	movs	r4, r0
 8003ef8:	0006      	movs	r6, r0
 8003efa:	2700      	movs	r7, #0
 8003efc:	9101      	str	r1, [sp, #4]
 8003efe:	3448      	adds	r4, #72	; 0x48
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	68a5      	ldr	r5, [r4, #8]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	9b00      	ldr	r3, [sp, #0]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	d504      	bpl.n	8003f18 <_fwalk_reent+0x24>
 8003f0e:	6824      	ldr	r4, [r4, #0]
 8003f10:	2c00      	cmp	r4, #0
 8003f12:	d1f5      	bne.n	8003f00 <_fwalk_reent+0xc>
 8003f14:	0038      	movs	r0, r7
 8003f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f18:	89ab      	ldrh	r3, [r5, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d908      	bls.n	8003f30 <_fwalk_reent+0x3c>
 8003f1e:	220e      	movs	r2, #14
 8003f20:	5eab      	ldrsh	r3, [r5, r2]
 8003f22:	3301      	adds	r3, #1
 8003f24:	d004      	beq.n	8003f30 <_fwalk_reent+0x3c>
 8003f26:	0029      	movs	r1, r5
 8003f28:	0030      	movs	r0, r6
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	4307      	orrs	r7, r0
 8003f30:	3568      	adds	r5, #104	; 0x68
 8003f32:	e7e8      	b.n	8003f06 <_fwalk_reent+0x12>

08003f34 <__retarget_lock_init_recursive>:
 8003f34:	4770      	bx	lr

08003f36 <__retarget_lock_acquire_recursive>:
 8003f36:	4770      	bx	lr

08003f38 <__retarget_lock_release_recursive>:
 8003f38:	4770      	bx	lr
	...

08003f3c <__swhatbuf_r>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	000e      	movs	r6, r1
 8003f40:	001d      	movs	r5, r3
 8003f42:	230e      	movs	r3, #14
 8003f44:	5ec9      	ldrsh	r1, [r1, r3]
 8003f46:	0014      	movs	r4, r2
 8003f48:	b096      	sub	sp, #88	; 0x58
 8003f4a:	2900      	cmp	r1, #0
 8003f4c:	da08      	bge.n	8003f60 <__swhatbuf_r+0x24>
 8003f4e:	220c      	movs	r2, #12
 8003f50:	5eb3      	ldrsh	r3, [r6, r2]
 8003f52:	2200      	movs	r2, #0
 8003f54:	602a      	str	r2, [r5, #0]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	d411      	bmi.n	8003f7e <__swhatbuf_r+0x42>
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	e00f      	b.n	8003f80 <__swhatbuf_r+0x44>
 8003f60:	466a      	mov	r2, sp
 8003f62:	f000 fbbd 	bl	80046e0 <_fstat_r>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	dbf1      	blt.n	8003f4e <__swhatbuf_r+0x12>
 8003f6a:	23f0      	movs	r3, #240	; 0xf0
 8003f6c:	9901      	ldr	r1, [sp, #4]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	4019      	ands	r1, r3
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <__swhatbuf_r+0x4c>)
 8003f74:	18c9      	adds	r1, r1, r3
 8003f76:	424b      	negs	r3, r1
 8003f78:	4159      	adcs	r1, r3
 8003f7a:	6029      	str	r1, [r5, #0]
 8003f7c:	e7ed      	b.n	8003f5a <__swhatbuf_r+0x1e>
 8003f7e:	2340      	movs	r3, #64	; 0x40
 8003f80:	2000      	movs	r0, #0
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	b016      	add	sp, #88	; 0x58
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	ffffe000 	.word	0xffffe000

08003f8c <__smakebuf_r>:
 8003f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f8e:	2602      	movs	r6, #2
 8003f90:	898b      	ldrh	r3, [r1, #12]
 8003f92:	0005      	movs	r5, r0
 8003f94:	000c      	movs	r4, r1
 8003f96:	4233      	tst	r3, r6
 8003f98:	d006      	beq.n	8003fa8 <__smakebuf_r+0x1c>
 8003f9a:	0023      	movs	r3, r4
 8003f9c:	3347      	adds	r3, #71	; 0x47
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	6123      	str	r3, [r4, #16]
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	6163      	str	r3, [r4, #20]
 8003fa6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003fa8:	466a      	mov	r2, sp
 8003faa:	ab01      	add	r3, sp, #4
 8003fac:	f7ff ffc6 	bl	8003f3c <__swhatbuf_r>
 8003fb0:	9900      	ldr	r1, [sp, #0]
 8003fb2:	0007      	movs	r7, r0
 8003fb4:	0028      	movs	r0, r5
 8003fb6:	f7ff fc03 	bl	80037c0 <_malloc_r>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d108      	bne.n	8003fd0 <__smakebuf_r+0x44>
 8003fbe:	220c      	movs	r2, #12
 8003fc0:	5ea3      	ldrsh	r3, [r4, r2]
 8003fc2:	059a      	lsls	r2, r3, #22
 8003fc4:	d4ef      	bmi.n	8003fa6 <__smakebuf_r+0x1a>
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	4393      	bics	r3, r2
 8003fca:	431e      	orrs	r6, r3
 8003fcc:	81a6      	strh	r6, [r4, #12]
 8003fce:	e7e4      	b.n	8003f9a <__smakebuf_r+0xe>
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <__smakebuf_r+0x84>)
 8003fd2:	62ab      	str	r3, [r5, #40]	; 0x28
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	89a2      	ldrh	r2, [r4, #12]
 8003fd8:	6020      	str	r0, [r4, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	9b00      	ldr	r3, [sp, #0]
 8003fe0:	6120      	str	r0, [r4, #16]
 8003fe2:	6163      	str	r3, [r4, #20]
 8003fe4:	9b01      	ldr	r3, [sp, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <__smakebuf_r+0x7a>
 8003fea:	0028      	movs	r0, r5
 8003fec:	230e      	movs	r3, #14
 8003fee:	5ee1      	ldrsh	r1, [r4, r3]
 8003ff0:	f000 fb88 	bl	8004704 <_isatty_r>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d006      	beq.n	8004006 <__smakebuf_r+0x7a>
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	001a      	movs	r2, r3
 8004000:	2301      	movs	r3, #1
 8004002:	4313      	orrs	r3, r2
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	89a0      	ldrh	r0, [r4, #12]
 8004008:	4307      	orrs	r7, r0
 800400a:	81a7      	strh	r7, [r4, #12]
 800400c:	e7cb      	b.n	8003fa6 <__smakebuf_r+0x1a>
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	08003d79 	.word	0x08003d79

08004014 <__malloc_lock>:
 8004014:	b510      	push	{r4, lr}
 8004016:	4802      	ldr	r0, [pc, #8]	; (8004020 <__malloc_lock+0xc>)
 8004018:	f7ff ff8d 	bl	8003f36 <__retarget_lock_acquire_recursive>
 800401c:	bd10      	pop	{r4, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	20000240 	.word	0x20000240

08004024 <__malloc_unlock>:
 8004024:	b510      	push	{r4, lr}
 8004026:	4802      	ldr	r0, [pc, #8]	; (8004030 <__malloc_unlock+0xc>)
 8004028:	f7ff ff86 	bl	8003f38 <__retarget_lock_release_recursive>
 800402c:	bd10      	pop	{r4, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	20000240 	.word	0x20000240

08004034 <__sfputc_r>:
 8004034:	6893      	ldr	r3, [r2, #8]
 8004036:	b510      	push	{r4, lr}
 8004038:	3b01      	subs	r3, #1
 800403a:	6093      	str	r3, [r2, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	da04      	bge.n	800404a <__sfputc_r+0x16>
 8004040:	6994      	ldr	r4, [r2, #24]
 8004042:	42a3      	cmp	r3, r4
 8004044:	db07      	blt.n	8004056 <__sfputc_r+0x22>
 8004046:	290a      	cmp	r1, #10
 8004048:	d005      	beq.n	8004056 <__sfputc_r+0x22>
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	1c58      	adds	r0, r3, #1
 800404e:	6010      	str	r0, [r2, #0]
 8004050:	7019      	strb	r1, [r3, #0]
 8004052:	0008      	movs	r0, r1
 8004054:	bd10      	pop	{r4, pc}
 8004056:	f7ff fcd1 	bl	80039fc <__swbuf_r>
 800405a:	0001      	movs	r1, r0
 800405c:	e7f9      	b.n	8004052 <__sfputc_r+0x1e>

0800405e <__sfputs_r>:
 800405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004060:	0006      	movs	r6, r0
 8004062:	000f      	movs	r7, r1
 8004064:	0014      	movs	r4, r2
 8004066:	18d5      	adds	r5, r2, r3
 8004068:	42ac      	cmp	r4, r5
 800406a:	d101      	bne.n	8004070 <__sfputs_r+0x12>
 800406c:	2000      	movs	r0, #0
 800406e:	e007      	b.n	8004080 <__sfputs_r+0x22>
 8004070:	7821      	ldrb	r1, [r4, #0]
 8004072:	003a      	movs	r2, r7
 8004074:	0030      	movs	r0, r6
 8004076:	f7ff ffdd 	bl	8004034 <__sfputc_r>
 800407a:	3401      	adds	r4, #1
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d1f3      	bne.n	8004068 <__sfputs_r+0xa>
 8004080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004084 <_vfiprintf_r>:
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	b0a1      	sub	sp, #132	; 0x84
 8004088:	0006      	movs	r6, r0
 800408a:	000c      	movs	r4, r1
 800408c:	001f      	movs	r7, r3
 800408e:	9203      	str	r2, [sp, #12]
 8004090:	2800      	cmp	r0, #0
 8004092:	d004      	beq.n	800409e <_vfiprintf_r+0x1a>
 8004094:	6983      	ldr	r3, [r0, #24]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <_vfiprintf_r+0x1a>
 800409a:	f7ff feab 	bl	8003df4 <__sinit>
 800409e:	4b8e      	ldr	r3, [pc, #568]	; (80042d8 <_vfiprintf_r+0x254>)
 80040a0:	429c      	cmp	r4, r3
 80040a2:	d11c      	bne.n	80040de <_vfiprintf_r+0x5a>
 80040a4:	6874      	ldr	r4, [r6, #4]
 80040a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a8:	07db      	lsls	r3, r3, #31
 80040aa:	d405      	bmi.n	80040b8 <_vfiprintf_r+0x34>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	059b      	lsls	r3, r3, #22
 80040b0:	d402      	bmi.n	80040b8 <_vfiprintf_r+0x34>
 80040b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040b4:	f7ff ff3f 	bl	8003f36 <__retarget_lock_acquire_recursive>
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	071b      	lsls	r3, r3, #28
 80040bc:	d502      	bpl.n	80040c4 <_vfiprintf_r+0x40>
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d11d      	bne.n	8004100 <_vfiprintf_r+0x7c>
 80040c4:	0021      	movs	r1, r4
 80040c6:	0030      	movs	r0, r6
 80040c8:	f7ff fcee 	bl	8003aa8 <__swsetup_r>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d017      	beq.n	8004100 <_vfiprintf_r+0x7c>
 80040d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040d2:	07db      	lsls	r3, r3, #31
 80040d4:	d50d      	bpl.n	80040f2 <_vfiprintf_r+0x6e>
 80040d6:	2001      	movs	r0, #1
 80040d8:	4240      	negs	r0, r0
 80040da:	b021      	add	sp, #132	; 0x84
 80040dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040de:	4b7f      	ldr	r3, [pc, #508]	; (80042dc <_vfiprintf_r+0x258>)
 80040e0:	429c      	cmp	r4, r3
 80040e2:	d101      	bne.n	80040e8 <_vfiprintf_r+0x64>
 80040e4:	68b4      	ldr	r4, [r6, #8]
 80040e6:	e7de      	b.n	80040a6 <_vfiprintf_r+0x22>
 80040e8:	4b7d      	ldr	r3, [pc, #500]	; (80042e0 <_vfiprintf_r+0x25c>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d1db      	bne.n	80040a6 <_vfiprintf_r+0x22>
 80040ee:	68f4      	ldr	r4, [r6, #12]
 80040f0:	e7d9      	b.n	80040a6 <_vfiprintf_r+0x22>
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	059b      	lsls	r3, r3, #22
 80040f6:	d4ee      	bmi.n	80040d6 <_vfiprintf_r+0x52>
 80040f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040fa:	f7ff ff1d 	bl	8003f38 <__retarget_lock_release_recursive>
 80040fe:	e7ea      	b.n	80040d6 <_vfiprintf_r+0x52>
 8004100:	2300      	movs	r3, #0
 8004102:	ad08      	add	r5, sp, #32
 8004104:	616b      	str	r3, [r5, #20]
 8004106:	3320      	adds	r3, #32
 8004108:	766b      	strb	r3, [r5, #25]
 800410a:	3310      	adds	r3, #16
 800410c:	76ab      	strb	r3, [r5, #26]
 800410e:	9707      	str	r7, [sp, #28]
 8004110:	9f03      	ldr	r7, [sp, #12]
 8004112:	783b      	ldrb	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <_vfiprintf_r+0x98>
 8004118:	2b25      	cmp	r3, #37	; 0x25
 800411a:	d14e      	bne.n	80041ba <_vfiprintf_r+0x136>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	1afb      	subs	r3, r7, r3
 8004120:	9305      	str	r3, [sp, #20]
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	429f      	cmp	r7, r3
 8004126:	d00d      	beq.n	8004144 <_vfiprintf_r+0xc0>
 8004128:	9b05      	ldr	r3, [sp, #20]
 800412a:	0021      	movs	r1, r4
 800412c:	0030      	movs	r0, r6
 800412e:	9a03      	ldr	r2, [sp, #12]
 8004130:	f7ff ff95 	bl	800405e <__sfputs_r>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d100      	bne.n	800413a <_vfiprintf_r+0xb6>
 8004138:	e0b5      	b.n	80042a6 <_vfiprintf_r+0x222>
 800413a:	696a      	ldr	r2, [r5, #20]
 800413c:	9b05      	ldr	r3, [sp, #20]
 800413e:	4694      	mov	ip, r2
 8004140:	4463      	add	r3, ip
 8004142:	616b      	str	r3, [r5, #20]
 8004144:	783b      	ldrb	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d100      	bne.n	800414c <_vfiprintf_r+0xc8>
 800414a:	e0ac      	b.n	80042a6 <_vfiprintf_r+0x222>
 800414c:	2201      	movs	r2, #1
 800414e:	1c7b      	adds	r3, r7, #1
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	2300      	movs	r3, #0
 8004154:	4252      	negs	r2, r2
 8004156:	606a      	str	r2, [r5, #4]
 8004158:	a904      	add	r1, sp, #16
 800415a:	3254      	adds	r2, #84	; 0x54
 800415c:	1852      	adds	r2, r2, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	60eb      	str	r3, [r5, #12]
 8004162:	60ab      	str	r3, [r5, #8]
 8004164:	7013      	strb	r3, [r2, #0]
 8004166:	65ab      	str	r3, [r5, #88]	; 0x58
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	2205      	movs	r2, #5
 800416c:	7819      	ldrb	r1, [r3, #0]
 800416e:	485d      	ldr	r0, [pc, #372]	; (80042e4 <_vfiprintf_r+0x260>)
 8004170:	f000 faee 	bl	8004750 <memchr>
 8004174:	9b03      	ldr	r3, [sp, #12]
 8004176:	1c5f      	adds	r7, r3, #1
 8004178:	2800      	cmp	r0, #0
 800417a:	d120      	bne.n	80041be <_vfiprintf_r+0x13a>
 800417c:	682a      	ldr	r2, [r5, #0]
 800417e:	06d3      	lsls	r3, r2, #27
 8004180:	d504      	bpl.n	800418c <_vfiprintf_r+0x108>
 8004182:	2353      	movs	r3, #83	; 0x53
 8004184:	a904      	add	r1, sp, #16
 8004186:	185b      	adds	r3, r3, r1
 8004188:	2120      	movs	r1, #32
 800418a:	7019      	strb	r1, [r3, #0]
 800418c:	0713      	lsls	r3, r2, #28
 800418e:	d504      	bpl.n	800419a <_vfiprintf_r+0x116>
 8004190:	2353      	movs	r3, #83	; 0x53
 8004192:	a904      	add	r1, sp, #16
 8004194:	185b      	adds	r3, r3, r1
 8004196:	212b      	movs	r1, #43	; 0x2b
 8004198:	7019      	strb	r1, [r3, #0]
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b2a      	cmp	r3, #42	; 0x2a
 80041a0:	d016      	beq.n	80041d0 <_vfiprintf_r+0x14c>
 80041a2:	2100      	movs	r1, #0
 80041a4:	68eb      	ldr	r3, [r5, #12]
 80041a6:	9f03      	ldr	r7, [sp, #12]
 80041a8:	783a      	ldrb	r2, [r7, #0]
 80041aa:	1c78      	adds	r0, r7, #1
 80041ac:	3a30      	subs	r2, #48	; 0x30
 80041ae:	4684      	mov	ip, r0
 80041b0:	2a09      	cmp	r2, #9
 80041b2:	d94f      	bls.n	8004254 <_vfiprintf_r+0x1d0>
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d111      	bne.n	80041dc <_vfiprintf_r+0x158>
 80041b8:	e017      	b.n	80041ea <_vfiprintf_r+0x166>
 80041ba:	3701      	adds	r7, #1
 80041bc:	e7a9      	b.n	8004112 <_vfiprintf_r+0x8e>
 80041be:	4b49      	ldr	r3, [pc, #292]	; (80042e4 <_vfiprintf_r+0x260>)
 80041c0:	682a      	ldr	r2, [r5, #0]
 80041c2:	1ac0      	subs	r0, r0, r3
 80041c4:	2301      	movs	r3, #1
 80041c6:	4083      	lsls	r3, r0
 80041c8:	4313      	orrs	r3, r2
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	9703      	str	r7, [sp, #12]
 80041ce:	e7cb      	b.n	8004168 <_vfiprintf_r+0xe4>
 80041d0:	9b07      	ldr	r3, [sp, #28]
 80041d2:	1d19      	adds	r1, r3, #4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	9107      	str	r1, [sp, #28]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db01      	blt.n	80041e0 <_vfiprintf_r+0x15c>
 80041dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80041de:	e004      	b.n	80041ea <_vfiprintf_r+0x166>
 80041e0:	425b      	negs	r3, r3
 80041e2:	60eb      	str	r3, [r5, #12]
 80041e4:	2302      	movs	r3, #2
 80041e6:	4313      	orrs	r3, r2
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	783b      	ldrb	r3, [r7, #0]
 80041ec:	2b2e      	cmp	r3, #46	; 0x2e
 80041ee:	d10a      	bne.n	8004206 <_vfiprintf_r+0x182>
 80041f0:	787b      	ldrb	r3, [r7, #1]
 80041f2:	2b2a      	cmp	r3, #42	; 0x2a
 80041f4:	d137      	bne.n	8004266 <_vfiprintf_r+0x1e2>
 80041f6:	9b07      	ldr	r3, [sp, #28]
 80041f8:	3702      	adds	r7, #2
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	9207      	str	r2, [sp, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	db2d      	blt.n	8004260 <_vfiprintf_r+0x1dc>
 8004204:	9309      	str	r3, [sp, #36]	; 0x24
 8004206:	2203      	movs	r2, #3
 8004208:	7839      	ldrb	r1, [r7, #0]
 800420a:	4837      	ldr	r0, [pc, #220]	; (80042e8 <_vfiprintf_r+0x264>)
 800420c:	f000 faa0 	bl	8004750 <memchr>
 8004210:	2800      	cmp	r0, #0
 8004212:	d007      	beq.n	8004224 <_vfiprintf_r+0x1a0>
 8004214:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <_vfiprintf_r+0x264>)
 8004216:	682a      	ldr	r2, [r5, #0]
 8004218:	1ac0      	subs	r0, r0, r3
 800421a:	2340      	movs	r3, #64	; 0x40
 800421c:	4083      	lsls	r3, r0
 800421e:	4313      	orrs	r3, r2
 8004220:	3701      	adds	r7, #1
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	7839      	ldrb	r1, [r7, #0]
 8004226:	1c7b      	adds	r3, r7, #1
 8004228:	2206      	movs	r2, #6
 800422a:	4830      	ldr	r0, [pc, #192]	; (80042ec <_vfiprintf_r+0x268>)
 800422c:	9303      	str	r3, [sp, #12]
 800422e:	7629      	strb	r1, [r5, #24]
 8004230:	f000 fa8e 	bl	8004750 <memchr>
 8004234:	2800      	cmp	r0, #0
 8004236:	d045      	beq.n	80042c4 <_vfiprintf_r+0x240>
 8004238:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <_vfiprintf_r+0x26c>)
 800423a:	2b00      	cmp	r3, #0
 800423c:	d127      	bne.n	800428e <_vfiprintf_r+0x20a>
 800423e:	2207      	movs	r2, #7
 8004240:	9b07      	ldr	r3, [sp, #28]
 8004242:	3307      	adds	r3, #7
 8004244:	4393      	bics	r3, r2
 8004246:	3308      	adds	r3, #8
 8004248:	9307      	str	r3, [sp, #28]
 800424a:	696b      	ldr	r3, [r5, #20]
 800424c:	9a04      	ldr	r2, [sp, #16]
 800424e:	189b      	adds	r3, r3, r2
 8004250:	616b      	str	r3, [r5, #20]
 8004252:	e75d      	b.n	8004110 <_vfiprintf_r+0x8c>
 8004254:	210a      	movs	r1, #10
 8004256:	434b      	muls	r3, r1
 8004258:	4667      	mov	r7, ip
 800425a:	189b      	adds	r3, r3, r2
 800425c:	3909      	subs	r1, #9
 800425e:	e7a3      	b.n	80041a8 <_vfiprintf_r+0x124>
 8004260:	2301      	movs	r3, #1
 8004262:	425b      	negs	r3, r3
 8004264:	e7ce      	b.n	8004204 <_vfiprintf_r+0x180>
 8004266:	2300      	movs	r3, #0
 8004268:	001a      	movs	r2, r3
 800426a:	3701      	adds	r7, #1
 800426c:	606b      	str	r3, [r5, #4]
 800426e:	7839      	ldrb	r1, [r7, #0]
 8004270:	1c78      	adds	r0, r7, #1
 8004272:	3930      	subs	r1, #48	; 0x30
 8004274:	4684      	mov	ip, r0
 8004276:	2909      	cmp	r1, #9
 8004278:	d903      	bls.n	8004282 <_vfiprintf_r+0x1fe>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0c3      	beq.n	8004206 <_vfiprintf_r+0x182>
 800427e:	9209      	str	r2, [sp, #36]	; 0x24
 8004280:	e7c1      	b.n	8004206 <_vfiprintf_r+0x182>
 8004282:	230a      	movs	r3, #10
 8004284:	435a      	muls	r2, r3
 8004286:	4667      	mov	r7, ip
 8004288:	1852      	adds	r2, r2, r1
 800428a:	3b09      	subs	r3, #9
 800428c:	e7ef      	b.n	800426e <_vfiprintf_r+0x1ea>
 800428e:	ab07      	add	r3, sp, #28
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	0022      	movs	r2, r4
 8004294:	0029      	movs	r1, r5
 8004296:	0030      	movs	r0, r6
 8004298:	4b16      	ldr	r3, [pc, #88]	; (80042f4 <_vfiprintf_r+0x270>)
 800429a:	e000      	b.n	800429e <_vfiprintf_r+0x21a>
 800429c:	bf00      	nop
 800429e:	9004      	str	r0, [sp, #16]
 80042a0:	9b04      	ldr	r3, [sp, #16]
 80042a2:	3301      	adds	r3, #1
 80042a4:	d1d1      	bne.n	800424a <_vfiprintf_r+0x1c6>
 80042a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042a8:	07db      	lsls	r3, r3, #31
 80042aa:	d405      	bmi.n	80042b8 <_vfiprintf_r+0x234>
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	059b      	lsls	r3, r3, #22
 80042b0:	d402      	bmi.n	80042b8 <_vfiprintf_r+0x234>
 80042b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042b4:	f7ff fe40 	bl	8003f38 <__retarget_lock_release_recursive>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	065b      	lsls	r3, r3, #25
 80042bc:	d500      	bpl.n	80042c0 <_vfiprintf_r+0x23c>
 80042be:	e70a      	b.n	80040d6 <_vfiprintf_r+0x52>
 80042c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042c2:	e70a      	b.n	80040da <_vfiprintf_r+0x56>
 80042c4:	ab07      	add	r3, sp, #28
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	0022      	movs	r2, r4
 80042ca:	0029      	movs	r1, r5
 80042cc:	0030      	movs	r0, r6
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <_vfiprintf_r+0x270>)
 80042d0:	f000 f882 	bl	80043d8 <_printf_i>
 80042d4:	e7e3      	b.n	800429e <_vfiprintf_r+0x21a>
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	08004bd8 	.word	0x08004bd8
 80042dc:	08004bf8 	.word	0x08004bf8
 80042e0:	08004bb8 	.word	0x08004bb8
 80042e4:	08004c18 	.word	0x08004c18
 80042e8:	08004c1e 	.word	0x08004c1e
 80042ec:	08004c22 	.word	0x08004c22
 80042f0:	00000000 	.word	0x00000000
 80042f4:	0800405f 	.word	0x0800405f

080042f8 <_printf_common>:
 80042f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042fa:	0015      	movs	r5, r2
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	688a      	ldr	r2, [r1, #8]
 8004300:	690b      	ldr	r3, [r1, #16]
 8004302:	000c      	movs	r4, r1
 8004304:	9000      	str	r0, [sp, #0]
 8004306:	4293      	cmp	r3, r2
 8004308:	da00      	bge.n	800430c <_printf_common+0x14>
 800430a:	0013      	movs	r3, r2
 800430c:	0022      	movs	r2, r4
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	3243      	adds	r2, #67	; 0x43
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	2a00      	cmp	r2, #0
 8004316:	d001      	beq.n	800431c <_printf_common+0x24>
 8004318:	3301      	adds	r3, #1
 800431a:	602b      	str	r3, [r5, #0]
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	069b      	lsls	r3, r3, #26
 8004320:	d502      	bpl.n	8004328 <_printf_common+0x30>
 8004322:	682b      	ldr	r3, [r5, #0]
 8004324:	3302      	adds	r3, #2
 8004326:	602b      	str	r3, [r5, #0]
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	2306      	movs	r3, #6
 800432c:	0017      	movs	r7, r2
 800432e:	401f      	ands	r7, r3
 8004330:	421a      	tst	r2, r3
 8004332:	d027      	beq.n	8004384 <_printf_common+0x8c>
 8004334:	0023      	movs	r3, r4
 8004336:	3343      	adds	r3, #67	; 0x43
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	1e5a      	subs	r2, r3, #1
 800433c:	4193      	sbcs	r3, r2
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	0692      	lsls	r2, r2, #26
 8004342:	d430      	bmi.n	80043a6 <_printf_common+0xae>
 8004344:	0022      	movs	r2, r4
 8004346:	9901      	ldr	r1, [sp, #4]
 8004348:	9800      	ldr	r0, [sp, #0]
 800434a:	9e08      	ldr	r6, [sp, #32]
 800434c:	3243      	adds	r2, #67	; 0x43
 800434e:	47b0      	blx	r6
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d025      	beq.n	80043a0 <_printf_common+0xa8>
 8004354:	2306      	movs	r3, #6
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	682a      	ldr	r2, [r5, #0]
 800435a:	68e1      	ldr	r1, [r4, #12]
 800435c:	2500      	movs	r5, #0
 800435e:	4003      	ands	r3, r0
 8004360:	2b04      	cmp	r3, #4
 8004362:	d103      	bne.n	800436c <_printf_common+0x74>
 8004364:	1a8d      	subs	r5, r1, r2
 8004366:	43eb      	mvns	r3, r5
 8004368:	17db      	asrs	r3, r3, #31
 800436a:	401d      	ands	r5, r3
 800436c:	68a3      	ldr	r3, [r4, #8]
 800436e:	6922      	ldr	r2, [r4, #16]
 8004370:	4293      	cmp	r3, r2
 8004372:	dd01      	ble.n	8004378 <_printf_common+0x80>
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	18ed      	adds	r5, r5, r3
 8004378:	2700      	movs	r7, #0
 800437a:	42bd      	cmp	r5, r7
 800437c:	d120      	bne.n	80043c0 <_printf_common+0xc8>
 800437e:	2000      	movs	r0, #0
 8004380:	e010      	b.n	80043a4 <_printf_common+0xac>
 8004382:	3701      	adds	r7, #1
 8004384:	68e3      	ldr	r3, [r4, #12]
 8004386:	682a      	ldr	r2, [r5, #0]
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	42bb      	cmp	r3, r7
 800438c:	ddd2      	ble.n	8004334 <_printf_common+0x3c>
 800438e:	0022      	movs	r2, r4
 8004390:	2301      	movs	r3, #1
 8004392:	9901      	ldr	r1, [sp, #4]
 8004394:	9800      	ldr	r0, [sp, #0]
 8004396:	9e08      	ldr	r6, [sp, #32]
 8004398:	3219      	adds	r2, #25
 800439a:	47b0      	blx	r6
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d1f0      	bne.n	8004382 <_printf_common+0x8a>
 80043a0:	2001      	movs	r0, #1
 80043a2:	4240      	negs	r0, r0
 80043a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043a6:	2030      	movs	r0, #48	; 0x30
 80043a8:	18e1      	adds	r1, r4, r3
 80043aa:	3143      	adds	r1, #67	; 0x43
 80043ac:	7008      	strb	r0, [r1, #0]
 80043ae:	0021      	movs	r1, r4
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	3145      	adds	r1, #69	; 0x45
 80043b4:	7809      	ldrb	r1, [r1, #0]
 80043b6:	18a2      	adds	r2, r4, r2
 80043b8:	3243      	adds	r2, #67	; 0x43
 80043ba:	3302      	adds	r3, #2
 80043bc:	7011      	strb	r1, [r2, #0]
 80043be:	e7c1      	b.n	8004344 <_printf_common+0x4c>
 80043c0:	0022      	movs	r2, r4
 80043c2:	2301      	movs	r3, #1
 80043c4:	9901      	ldr	r1, [sp, #4]
 80043c6:	9800      	ldr	r0, [sp, #0]
 80043c8:	9e08      	ldr	r6, [sp, #32]
 80043ca:	321a      	adds	r2, #26
 80043cc:	47b0      	blx	r6
 80043ce:	1c43      	adds	r3, r0, #1
 80043d0:	d0e6      	beq.n	80043a0 <_printf_common+0xa8>
 80043d2:	3701      	adds	r7, #1
 80043d4:	e7d1      	b.n	800437a <_printf_common+0x82>
	...

080043d8 <_printf_i>:
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	b08b      	sub	sp, #44	; 0x2c
 80043dc:	9206      	str	r2, [sp, #24]
 80043de:	000a      	movs	r2, r1
 80043e0:	3243      	adds	r2, #67	; 0x43
 80043e2:	9307      	str	r3, [sp, #28]
 80043e4:	9005      	str	r0, [sp, #20]
 80043e6:	9204      	str	r2, [sp, #16]
 80043e8:	7e0a      	ldrb	r2, [r1, #24]
 80043ea:	000c      	movs	r4, r1
 80043ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043ee:	2a78      	cmp	r2, #120	; 0x78
 80043f0:	d807      	bhi.n	8004402 <_printf_i+0x2a>
 80043f2:	2a62      	cmp	r2, #98	; 0x62
 80043f4:	d809      	bhi.n	800440a <_printf_i+0x32>
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	d100      	bne.n	80043fc <_printf_i+0x24>
 80043fa:	e0c1      	b.n	8004580 <_printf_i+0x1a8>
 80043fc:	2a58      	cmp	r2, #88	; 0x58
 80043fe:	d100      	bne.n	8004402 <_printf_i+0x2a>
 8004400:	e08c      	b.n	800451c <_printf_i+0x144>
 8004402:	0026      	movs	r6, r4
 8004404:	3642      	adds	r6, #66	; 0x42
 8004406:	7032      	strb	r2, [r6, #0]
 8004408:	e022      	b.n	8004450 <_printf_i+0x78>
 800440a:	0010      	movs	r0, r2
 800440c:	3863      	subs	r0, #99	; 0x63
 800440e:	2815      	cmp	r0, #21
 8004410:	d8f7      	bhi.n	8004402 <_printf_i+0x2a>
 8004412:	f7fb fe79 	bl	8000108 <__gnu_thumb1_case_shi>
 8004416:	0016      	.short	0x0016
 8004418:	fff6001f 	.word	0xfff6001f
 800441c:	fff6fff6 	.word	0xfff6fff6
 8004420:	001ffff6 	.word	0x001ffff6
 8004424:	fff6fff6 	.word	0xfff6fff6
 8004428:	fff6fff6 	.word	0xfff6fff6
 800442c:	003600a8 	.word	0x003600a8
 8004430:	fff6009a 	.word	0xfff6009a
 8004434:	00b9fff6 	.word	0x00b9fff6
 8004438:	0036fff6 	.word	0x0036fff6
 800443c:	fff6fff6 	.word	0xfff6fff6
 8004440:	009e      	.short	0x009e
 8004442:	0026      	movs	r6, r4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	3642      	adds	r6, #66	; 0x42
 8004448:	1d11      	adds	r1, r2, #4
 800444a:	6019      	str	r1, [r3, #0]
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	7033      	strb	r3, [r6, #0]
 8004450:	2301      	movs	r3, #1
 8004452:	e0a7      	b.n	80045a4 <_printf_i+0x1cc>
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	1d0a      	adds	r2, r1, #4
 800445a:	0605      	lsls	r5, r0, #24
 800445c:	d50b      	bpl.n	8004476 <_printf_i+0x9e>
 800445e:	680d      	ldr	r5, [r1, #0]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	2d00      	cmp	r5, #0
 8004464:	da03      	bge.n	800446e <_printf_i+0x96>
 8004466:	232d      	movs	r3, #45	; 0x2d
 8004468:	9a04      	ldr	r2, [sp, #16]
 800446a:	426d      	negs	r5, r5
 800446c:	7013      	strb	r3, [r2, #0]
 800446e:	4b61      	ldr	r3, [pc, #388]	; (80045f4 <_printf_i+0x21c>)
 8004470:	270a      	movs	r7, #10
 8004472:	9303      	str	r3, [sp, #12]
 8004474:	e01b      	b.n	80044ae <_printf_i+0xd6>
 8004476:	680d      	ldr	r5, [r1, #0]
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	0641      	lsls	r1, r0, #25
 800447c:	d5f1      	bpl.n	8004462 <_printf_i+0x8a>
 800447e:	b22d      	sxth	r5, r5
 8004480:	e7ef      	b.n	8004462 <_printf_i+0x8a>
 8004482:	680d      	ldr	r5, [r1, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	1d08      	adds	r0, r1, #4
 8004488:	6018      	str	r0, [r3, #0]
 800448a:	062e      	lsls	r6, r5, #24
 800448c:	d501      	bpl.n	8004492 <_printf_i+0xba>
 800448e:	680d      	ldr	r5, [r1, #0]
 8004490:	e003      	b.n	800449a <_printf_i+0xc2>
 8004492:	066d      	lsls	r5, r5, #25
 8004494:	d5fb      	bpl.n	800448e <_printf_i+0xb6>
 8004496:	680d      	ldr	r5, [r1, #0]
 8004498:	b2ad      	uxth	r5, r5
 800449a:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <_printf_i+0x21c>)
 800449c:	2708      	movs	r7, #8
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	2a6f      	cmp	r2, #111	; 0x6f
 80044a2:	d000      	beq.n	80044a6 <_printf_i+0xce>
 80044a4:	3702      	adds	r7, #2
 80044a6:	0023      	movs	r3, r4
 80044a8:	2200      	movs	r2, #0
 80044aa:	3343      	adds	r3, #67	; 0x43
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	6863      	ldr	r3, [r4, #4]
 80044b0:	60a3      	str	r3, [r4, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	db03      	blt.n	80044be <_printf_i+0xe6>
 80044b6:	2204      	movs	r2, #4
 80044b8:	6821      	ldr	r1, [r4, #0]
 80044ba:	4391      	bics	r1, r2
 80044bc:	6021      	str	r1, [r4, #0]
 80044be:	2d00      	cmp	r5, #0
 80044c0:	d102      	bne.n	80044c8 <_printf_i+0xf0>
 80044c2:	9e04      	ldr	r6, [sp, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00c      	beq.n	80044e2 <_printf_i+0x10a>
 80044c8:	9e04      	ldr	r6, [sp, #16]
 80044ca:	0028      	movs	r0, r5
 80044cc:	0039      	movs	r1, r7
 80044ce:	f7fb feab 	bl	8000228 <__aeabi_uidivmod>
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	3e01      	subs	r6, #1
 80044d6:	5c5b      	ldrb	r3, [r3, r1]
 80044d8:	7033      	strb	r3, [r6, #0]
 80044da:	002b      	movs	r3, r5
 80044dc:	0005      	movs	r5, r0
 80044de:	429f      	cmp	r7, r3
 80044e0:	d9f3      	bls.n	80044ca <_printf_i+0xf2>
 80044e2:	2f08      	cmp	r7, #8
 80044e4:	d109      	bne.n	80044fa <_printf_i+0x122>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	07db      	lsls	r3, r3, #31
 80044ea:	d506      	bpl.n	80044fa <_printf_i+0x122>
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	6922      	ldr	r2, [r4, #16]
 80044f0:	4293      	cmp	r3, r2
 80044f2:	dc02      	bgt.n	80044fa <_printf_i+0x122>
 80044f4:	2330      	movs	r3, #48	; 0x30
 80044f6:	3e01      	subs	r6, #1
 80044f8:	7033      	strb	r3, [r6, #0]
 80044fa:	9b04      	ldr	r3, [sp, #16]
 80044fc:	1b9b      	subs	r3, r3, r6
 80044fe:	6123      	str	r3, [r4, #16]
 8004500:	9b07      	ldr	r3, [sp, #28]
 8004502:	0021      	movs	r1, r4
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	9805      	ldr	r0, [sp, #20]
 8004508:	9b06      	ldr	r3, [sp, #24]
 800450a:	aa09      	add	r2, sp, #36	; 0x24
 800450c:	f7ff fef4 	bl	80042f8 <_printf_common>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d14c      	bne.n	80045ae <_printf_i+0x1d6>
 8004514:	2001      	movs	r0, #1
 8004516:	4240      	negs	r0, r0
 8004518:	b00b      	add	sp, #44	; 0x2c
 800451a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800451c:	3145      	adds	r1, #69	; 0x45
 800451e:	700a      	strb	r2, [r1, #0]
 8004520:	4a34      	ldr	r2, [pc, #208]	; (80045f4 <_printf_i+0x21c>)
 8004522:	9203      	str	r2, [sp, #12]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	6821      	ldr	r1, [r4, #0]
 8004528:	ca20      	ldmia	r2!, {r5}
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	0608      	lsls	r0, r1, #24
 800452e:	d516      	bpl.n	800455e <_printf_i+0x186>
 8004530:	07cb      	lsls	r3, r1, #31
 8004532:	d502      	bpl.n	800453a <_printf_i+0x162>
 8004534:	2320      	movs	r3, #32
 8004536:	4319      	orrs	r1, r3
 8004538:	6021      	str	r1, [r4, #0]
 800453a:	2710      	movs	r7, #16
 800453c:	2d00      	cmp	r5, #0
 800453e:	d1b2      	bne.n	80044a6 <_printf_i+0xce>
 8004540:	2320      	movs	r3, #32
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	439a      	bics	r2, r3
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	e7ad      	b.n	80044a6 <_printf_i+0xce>
 800454a:	2220      	movs	r2, #32
 800454c:	6809      	ldr	r1, [r1, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	6022      	str	r2, [r4, #0]
 8004552:	0022      	movs	r2, r4
 8004554:	2178      	movs	r1, #120	; 0x78
 8004556:	3245      	adds	r2, #69	; 0x45
 8004558:	7011      	strb	r1, [r2, #0]
 800455a:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <_printf_i+0x220>)
 800455c:	e7e1      	b.n	8004522 <_printf_i+0x14a>
 800455e:	0648      	lsls	r0, r1, #25
 8004560:	d5e6      	bpl.n	8004530 <_printf_i+0x158>
 8004562:	b2ad      	uxth	r5, r5
 8004564:	e7e4      	b.n	8004530 <_printf_i+0x158>
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	680d      	ldr	r5, [r1, #0]
 800456a:	1d10      	adds	r0, r2, #4
 800456c:	6949      	ldr	r1, [r1, #20]
 800456e:	6018      	str	r0, [r3, #0]
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	062e      	lsls	r6, r5, #24
 8004574:	d501      	bpl.n	800457a <_printf_i+0x1a2>
 8004576:	6019      	str	r1, [r3, #0]
 8004578:	e002      	b.n	8004580 <_printf_i+0x1a8>
 800457a:	066d      	lsls	r5, r5, #25
 800457c:	d5fb      	bpl.n	8004576 <_printf_i+0x19e>
 800457e:	8019      	strh	r1, [r3, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	9e04      	ldr	r6, [sp, #16]
 8004584:	6123      	str	r3, [r4, #16]
 8004586:	e7bb      	b.n	8004500 <_printf_i+0x128>
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	1d11      	adds	r1, r2, #4
 800458c:	6019      	str	r1, [r3, #0]
 800458e:	6816      	ldr	r6, [r2, #0]
 8004590:	2100      	movs	r1, #0
 8004592:	0030      	movs	r0, r6
 8004594:	6862      	ldr	r2, [r4, #4]
 8004596:	f000 f8db 	bl	8004750 <memchr>
 800459a:	2800      	cmp	r0, #0
 800459c:	d001      	beq.n	80045a2 <_printf_i+0x1ca>
 800459e:	1b80      	subs	r0, r0, r6
 80045a0:	6060      	str	r0, [r4, #4]
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9a04      	ldr	r2, [sp, #16]
 80045aa:	7013      	strb	r3, [r2, #0]
 80045ac:	e7a8      	b.n	8004500 <_printf_i+0x128>
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	0032      	movs	r2, r6
 80045b2:	9906      	ldr	r1, [sp, #24]
 80045b4:	9805      	ldr	r0, [sp, #20]
 80045b6:	9d07      	ldr	r5, [sp, #28]
 80045b8:	47a8      	blx	r5
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	d0aa      	beq.n	8004514 <_printf_i+0x13c>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	079b      	lsls	r3, r3, #30
 80045c2:	d415      	bmi.n	80045f0 <_printf_i+0x218>
 80045c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c6:	68e0      	ldr	r0, [r4, #12]
 80045c8:	4298      	cmp	r0, r3
 80045ca:	daa5      	bge.n	8004518 <_printf_i+0x140>
 80045cc:	0018      	movs	r0, r3
 80045ce:	e7a3      	b.n	8004518 <_printf_i+0x140>
 80045d0:	0022      	movs	r2, r4
 80045d2:	2301      	movs	r3, #1
 80045d4:	9906      	ldr	r1, [sp, #24]
 80045d6:	9805      	ldr	r0, [sp, #20]
 80045d8:	9e07      	ldr	r6, [sp, #28]
 80045da:	3219      	adds	r2, #25
 80045dc:	47b0      	blx	r6
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d098      	beq.n	8004514 <_printf_i+0x13c>
 80045e2:	3501      	adds	r5, #1
 80045e4:	68e3      	ldr	r3, [r4, #12]
 80045e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	42ab      	cmp	r3, r5
 80045ec:	dcf0      	bgt.n	80045d0 <_printf_i+0x1f8>
 80045ee:	e7e9      	b.n	80045c4 <_printf_i+0x1ec>
 80045f0:	2500      	movs	r5, #0
 80045f2:	e7f7      	b.n	80045e4 <_printf_i+0x20c>
 80045f4:	08004c29 	.word	0x08004c29
 80045f8:	08004c3a 	.word	0x08004c3a

080045fc <__sread>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	000c      	movs	r4, r1
 8004600:	250e      	movs	r5, #14
 8004602:	5f49      	ldrsh	r1, [r1, r5]
 8004604:	f000 f8b0 	bl	8004768 <_read_r>
 8004608:	2800      	cmp	r0, #0
 800460a:	db03      	blt.n	8004614 <__sread+0x18>
 800460c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800460e:	181b      	adds	r3, r3, r0
 8004610:	6563      	str	r3, [r4, #84]	; 0x54
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	4a02      	ldr	r2, [pc, #8]	; (8004620 <__sread+0x24>)
 8004618:	4013      	ands	r3, r2
 800461a:	81a3      	strh	r3, [r4, #12]
 800461c:	e7f9      	b.n	8004612 <__sread+0x16>
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	ffffefff 	.word	0xffffefff

08004624 <__swrite>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	001f      	movs	r7, r3
 8004628:	898b      	ldrh	r3, [r1, #12]
 800462a:	0005      	movs	r5, r0
 800462c:	000c      	movs	r4, r1
 800462e:	0016      	movs	r6, r2
 8004630:	05db      	lsls	r3, r3, #23
 8004632:	d505      	bpl.n	8004640 <__swrite+0x1c>
 8004634:	230e      	movs	r3, #14
 8004636:	5ec9      	ldrsh	r1, [r1, r3]
 8004638:	2200      	movs	r2, #0
 800463a:	2302      	movs	r3, #2
 800463c:	f000 f874 	bl	8004728 <_lseek_r>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	4a05      	ldr	r2, [pc, #20]	; (8004658 <__swrite+0x34>)
 8004644:	0028      	movs	r0, r5
 8004646:	4013      	ands	r3, r2
 8004648:	81a3      	strh	r3, [r4, #12]
 800464a:	0032      	movs	r2, r6
 800464c:	230e      	movs	r3, #14
 800464e:	5ee1      	ldrsh	r1, [r4, r3]
 8004650:	003b      	movs	r3, r7
 8004652:	f000 f81f 	bl	8004694 <_write_r>
 8004656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004658:	ffffefff 	.word	0xffffefff

0800465c <__sseek>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	000c      	movs	r4, r1
 8004660:	250e      	movs	r5, #14
 8004662:	5f49      	ldrsh	r1, [r1, r5]
 8004664:	f000 f860 	bl	8004728 <_lseek_r>
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	1c42      	adds	r2, r0, #1
 800466c:	d103      	bne.n	8004676 <__sseek+0x1a>
 800466e:	4a05      	ldr	r2, [pc, #20]	; (8004684 <__sseek+0x28>)
 8004670:	4013      	ands	r3, r2
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	2280      	movs	r2, #128	; 0x80
 8004678:	0152      	lsls	r2, r2, #5
 800467a:	4313      	orrs	r3, r2
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	6560      	str	r0, [r4, #84]	; 0x54
 8004680:	e7f8      	b.n	8004674 <__sseek+0x18>
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	ffffefff 	.word	0xffffefff

08004688 <__sclose>:
 8004688:	b510      	push	{r4, lr}
 800468a:	230e      	movs	r3, #14
 800468c:	5ec9      	ldrsh	r1, [r1, r3]
 800468e:	f000 f815 	bl	80046bc <_close_r>
 8004692:	bd10      	pop	{r4, pc}

08004694 <_write_r>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	0004      	movs	r4, r0
 8004698:	0008      	movs	r0, r1
 800469a:	0011      	movs	r1, r2
 800469c:	001a      	movs	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	4d05      	ldr	r5, [pc, #20]	; (80046b8 <_write_r+0x24>)
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc ff14 	bl	80014d0 <_write>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d103      	bne.n	80046b4 <_write_r+0x20>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d000      	beq.n	80046b4 <_write_r+0x20>
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	20000244 	.word	0x20000244

080046bc <_close_r>:
 80046bc:	2300      	movs	r3, #0
 80046be:	b570      	push	{r4, r5, r6, lr}
 80046c0:	4d06      	ldr	r5, [pc, #24]	; (80046dc <_close_r+0x20>)
 80046c2:	0004      	movs	r4, r0
 80046c4:	0008      	movs	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc ff1e 	bl	8001508 <_close>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d103      	bne.n	80046d8 <_close_r+0x1c>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d000      	beq.n	80046d8 <_close_r+0x1c>
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	bd70      	pop	{r4, r5, r6, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	20000244 	.word	0x20000244

080046e0 <_fstat_r>:
 80046e0:	2300      	movs	r3, #0
 80046e2:	b570      	push	{r4, r5, r6, lr}
 80046e4:	4d06      	ldr	r5, [pc, #24]	; (8004700 <_fstat_r+0x20>)
 80046e6:	0004      	movs	r4, r0
 80046e8:	0008      	movs	r0, r1
 80046ea:	0011      	movs	r1, r2
 80046ec:	602b      	str	r3, [r5, #0]
 80046ee:	f7fc ff15 	bl	800151c <_fstat>
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	d103      	bne.n	80046fe <_fstat_r+0x1e>
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d000      	beq.n	80046fe <_fstat_r+0x1e>
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	20000244 	.word	0x20000244

08004704 <_isatty_r>:
 8004704:	2300      	movs	r3, #0
 8004706:	b570      	push	{r4, r5, r6, lr}
 8004708:	4d06      	ldr	r5, [pc, #24]	; (8004724 <_isatty_r+0x20>)
 800470a:	0004      	movs	r4, r0
 800470c:	0008      	movs	r0, r1
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	f7fc ff12 	bl	8001538 <_isatty>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d103      	bne.n	8004720 <_isatty_r+0x1c>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d000      	beq.n	8004720 <_isatty_r+0x1c>
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000244 	.word	0x20000244

08004728 <_lseek_r>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	0004      	movs	r4, r0
 800472c:	0008      	movs	r0, r1
 800472e:	0011      	movs	r1, r2
 8004730:	001a      	movs	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	4d05      	ldr	r5, [pc, #20]	; (800474c <_lseek_r+0x24>)
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc ff07 	bl	800154a <_lseek>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d103      	bne.n	8004748 <_lseek_r+0x20>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d000      	beq.n	8004748 <_lseek_r+0x20>
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	bd70      	pop	{r4, r5, r6, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	20000244 	.word	0x20000244

08004750 <memchr>:
 8004750:	b2c9      	uxtb	r1, r1
 8004752:	1882      	adds	r2, r0, r2
 8004754:	4290      	cmp	r0, r2
 8004756:	d101      	bne.n	800475c <memchr+0xc>
 8004758:	2000      	movs	r0, #0
 800475a:	4770      	bx	lr
 800475c:	7803      	ldrb	r3, [r0, #0]
 800475e:	428b      	cmp	r3, r1
 8004760:	d0fb      	beq.n	800475a <memchr+0xa>
 8004762:	3001      	adds	r0, #1
 8004764:	e7f6      	b.n	8004754 <memchr+0x4>
	...

08004768 <_read_r>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	0004      	movs	r4, r0
 800476c:	0008      	movs	r0, r1
 800476e:	0011      	movs	r1, r2
 8004770:	001a      	movs	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	4d05      	ldr	r5, [pc, #20]	; (800478c <_read_r+0x24>)
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fc fe8d 	bl	8001496 <_read>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d103      	bne.n	8004788 <_read_r+0x20>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d000      	beq.n	8004788 <_read_r+0x20>
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	bd70      	pop	{r4, r5, r6, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	20000244 	.word	0x20000244

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
