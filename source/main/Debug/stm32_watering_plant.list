
stm32_watering_plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f44  08002f44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f44  08002f44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f44  08002f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08002f58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002f58  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e66  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195d  00000000  00000000  00026e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  000287f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00028f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189b9  00000000  00000000  00029530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000906a  00000000  00000000  00041ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc3f  00000000  00000000  0004af53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7b92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001728  00000000  00000000  000d7be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002efc 	.word	0x08002efc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002efc 	.word	0x08002efc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b095      	sub	sp, #84	; 0x54
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	// Wakeup from Stopmode
	  SystemClock_Config();
 8000228:	f000 f92e 	bl	8000488 <SystemClock_Config>
	  HAL_ResumeTick();
 800022c:	f000 fcb8 	bl	8000ba0 <HAL_ResumeTick>

	  RTC_AlarmTypeDef sAlarm;
	  GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000230:	240c      	movs	r4, #12
 8000232:	193b      	adds	r3, r7, r4
 8000234:	2280      	movs	r2, #128	; 0x80
 8000236:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000238:	193b      	adds	r3, r7, r4
 800023a:	2201      	movs	r2, #1
 800023c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023e:	193b      	adds	r3, r7, r4
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	193b      	adds	r3, r7, r4
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024a:	193b      	adds	r3, r7, r4
 800024c:	4a7a      	ldr	r2, [pc, #488]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 800024e:	0019      	movs	r1, r3
 8000250:	0010      	movs	r0, r2
 8000252:	f001 fa61 	bl	8001718 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(pwrADC_3_3v_GPIO_Port, pwrADC_3_3v_Pin, 1);
 8000256:	4b78      	ldr	r3, [pc, #480]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000258:	2201      	movs	r2, #1
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	0018      	movs	r0, r3
 800025e:	f001 fbc3 	bl	80019e8 <HAL_GPIO_WritePin>
	  // Configure PB0 and PB1 as analog inputs
	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	2203      	movs	r2, #3
 8000266:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2203      	movs	r2, #3
 800026c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000274:	193b      	adds	r3, r7, r4
 8000276:	4a70      	ldr	r2, [pc, #448]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000278:	0019      	movs	r1, r3
 800027a:	0010      	movs	r0, r2
 800027c:	f001 fa4c 	bl	8001718 <HAL_GPIO_Init>

	  // Get ADC Moisture Values
	  HAL_ADC_Start(&hadc);
 8000280:	4b6e      	ldr	r3, [pc, #440]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fdda 	bl	8000e3c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000288:	2301      	movs	r3, #1
 800028a:	425a      	negs	r2, r3
 800028c:	4b6b      	ldr	r3, [pc, #428]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 800028e:	0011      	movs	r1, r2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe27 	bl	8000ee4 <HAL_ADC_PollForConversion>
	  int moist_1_sens = HAL_ADC_GetValue(&hadc);
 8000296:	4b69      	ldr	r3, [pc, #420]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 8000298:	0018      	movs	r0, r3
 800029a:	f000 febb 	bl	8001014 <HAL_ADC_GetValue>
 800029e:	0003      	movs	r3, r0
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c

	  HAL_ADC_Start(&hadc);
 80002a2:	4b66      	ldr	r3, [pc, #408]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fdc9 	bl	8000e3c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002aa:	2301      	movs	r3, #1
 80002ac:	425a      	negs	r2, r3
 80002ae:	4b63      	ldr	r3, [pc, #396]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 80002b0:	0011      	movs	r1, r2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fe16 	bl	8000ee4 <HAL_ADC_PollForConversion>
	  int moist_2_sens = HAL_ADC_GetValue(&hadc);
 80002b8:	4b60      	ldr	r3, [pc, #384]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 feaa 	bl	8001014 <HAL_ADC_GetValue>
 80002c0:	0003      	movs	r3, r0
 80002c2:	64bb      	str	r3, [r7, #72]	; 0x48

	  //Activate the pump while the the moisture is to low
	  while(moist_1_sens < 2650 && moist_2_sens < 2500)
 80002c4:	e027      	b.n	8000316 <HAL_RTC_AlarmAEventCallback+0xf6>
	  {
	    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80002c6:	4b5c      	ldr	r3, [pc, #368]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	2108      	movs	r1, #8
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fb8b 	bl	80019e8 <HAL_GPIO_WritePin>
		HAL_ADC_Start(&hadc);
 80002d2:	4b5a      	ldr	r3, [pc, #360]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fdb1 	bl	8000e3c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002da:	2301      	movs	r3, #1
 80002dc:	425a      	negs	r2, r3
 80002de:	4b57      	ldr	r3, [pc, #348]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 80002e0:	0011      	movs	r1, r2
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fdfe 	bl	8000ee4 <HAL_ADC_PollForConversion>
		moist_1_sens = HAL_ADC_GetValue(&hadc);
 80002e8:	4b54      	ldr	r3, [pc, #336]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fe92 	bl	8001014 <HAL_ADC_GetValue>
 80002f0:	0003      	movs	r3, r0
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_ADC_Start(&hadc);
 80002f4:	4b51      	ldr	r3, [pc, #324]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 fda0 	bl	8000e3c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002fc:	2301      	movs	r3, #1
 80002fe:	425a      	negs	r2, r3
 8000300:	4b4e      	ldr	r3, [pc, #312]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 8000302:	0011      	movs	r1, r2
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fded 	bl	8000ee4 <HAL_ADC_PollForConversion>
		moist_2_sens = HAL_ADC_GetValue(&hadc);
 800030a:	4b4c      	ldr	r3, [pc, #304]	; (800043c <HAL_RTC_AlarmAEventCallback+0x21c>)
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fe81 	bl	8001014 <HAL_ADC_GetValue>
 8000312:	0003      	movs	r3, r0
 8000314:	64bb      	str	r3, [r7, #72]	; 0x48
	  while(moist_1_sens < 2650 && moist_2_sens < 2500)
 8000316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000318:	4a49      	ldr	r2, [pc, #292]	; (8000440 <HAL_RTC_AlarmAEventCallback+0x220>)
 800031a:	4293      	cmp	r3, r2
 800031c:	dc03      	bgt.n	8000326 <HAL_RTC_AlarmAEventCallback+0x106>
 800031e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000320:	4a48      	ldr	r2, [pc, #288]	; (8000444 <HAL_RTC_AlarmAEventCallback+0x224>)
 8000322:	4293      	cmp	r3, r2
 8000324:	ddcf      	ble.n	80002c6 <HAL_RTC_AlarmAEventCallback+0xa6>
	  }


	  HAL_GPIO_WritePin(pwrADC_3_3v_GPIO_Port, pwrADC_3_3v_Pin, 0);
 8000326:	4b44      	ldr	r3, [pc, #272]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000328:	2200      	movs	r2, #0
 800032a:	2180      	movs	r1, #128	; 0x80
 800032c:	0018      	movs	r0, r3
 800032e:	f001 fb5b 	bl	80019e8 <HAL_GPIO_WritePin>
	  GPIOB->MODER &= ~(GPIO_MODER_MODER7_Msk); // set mode to input mode (reset state)
 8000332:	4b41      	ldr	r3, [pc, #260]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b40      	ldr	r3, [pc, #256]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000338:	4943      	ldr	r1, [pc, #268]	; (8000448 <HAL_RTC_AlarmAEventCallback+0x228>)
 800033a:	400a      	ands	r2, r1
 800033c:	601a      	str	r2, [r3, #0]
	  GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR7_Msk); // disable pull-up and pull-down resistors
 800033e:	4b3e      	ldr	r3, [pc, #248]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000340:	68da      	ldr	r2, [r3, #12]
 8000342:	4b3d      	ldr	r3, [pc, #244]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000344:	4940      	ldr	r1, [pc, #256]	; (8000448 <HAL_RTC_AlarmAEventCallback+0x228>)
 8000346:	400a      	ands	r2, r1
 8000348:	60da      	str	r2, [r3, #12]
	  // Configure the GPIO pins as analog inputs
	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800034a:	210c      	movs	r1, #12
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2203      	movs	r2, #3
 8000350:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2203      	movs	r2, #3
 8000356:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	187a      	adds	r2, r7, r1
 8000360:	2390      	movs	r3, #144	; 0x90
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	0011      	movs	r1, r2
 8000366:	0018      	movs	r0, r3
 8000368:	f001 f9d6 	bl	8001718 <HAL_GPIO_Init>

	  //Turn on light and stop for 9h or turn of and wakeup for 14
	  if (isLight_On == TRUE)
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <HAL_RTC_AlarmAEventCallback+0x22c>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d12b      	bne.n	80003cc <HAL_RTC_AlarmAEventCallback+0x1ac>
	  {
		  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	005a      	lsls	r2, r3, #1
 8000378:	2420      	movs	r4, #32
 800037a:	1939      	adds	r1, r7, r4
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	2300      	movs	r3, #0
 8000380:	f002 fc0c 	bl	8002b9c <HAL_RTC_GetAlarm>
		  if(sAlarm.AlarmTime.Minutes>55) {
 8000384:	0022      	movs	r2, r4
 8000386:	18bb      	adds	r3, r7, r2
 8000388:	785b      	ldrb	r3, [r3, #1]
 800038a:	2b37      	cmp	r3, #55	; 0x37
 800038c:	d903      	bls.n	8000396 <HAL_RTC_AlarmAEventCallback+0x176>
		    sAlarm.AlarmTime.Minutes=0;
 800038e:	18bb      	adds	r3, r7, r2
 8000390:	2200      	movs	r2, #0
 8000392:	705a      	strb	r2, [r3, #1]
 8000394:	e006      	b.n	80003a4 <HAL_RTC_AlarmAEventCallback+0x184>
		  }else{
		    sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+2;
 8000396:	2120      	movs	r1, #32
 8000398:	187b      	adds	r3, r7, r1
 800039a:	785b      	ldrb	r3, [r3, #1]
 800039c:	3302      	adds	r3, #2
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	705a      	strb	r2, [r3, #1]
		  }
		    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	2320      	movs	r3, #32
 80003a8:	18f9      	adds	r1, r7, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2200      	movs	r2, #0
 80003ae:	0018      	movs	r0, r3
 80003b0:	f002 fafa 	bl	80029a8 <HAL_RTC_SetAlarm_IT>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d1f6      	bne.n	80003a6 <HAL_RTC_AlarmAEventCallback+0x186>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	0018      	movs	r0, r3
 80003c0:	f001 fb12 	bl	80019e8 <HAL_GPIO_WritePin>
		  isLight_On = FALSE;
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <HAL_RTC_AlarmAEventCallback+0x22c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
 80003ca:	e02a      	b.n	8000422 <HAL_RTC_AlarmAEventCallback+0x202>
	  }
	  else
	  {
		  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	005a      	lsls	r2, r3, #1
 80003d0:	2420      	movs	r4, #32
 80003d2:	1939      	adds	r1, r7, r4
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	2300      	movs	r3, #0
 80003d8:	f002 fbe0 	bl	8002b9c <HAL_RTC_GetAlarm>
		  if(sAlarm.AlarmTime.Minutes>55) {
 80003dc:	0022      	movs	r2, r4
 80003de:	18bb      	adds	r3, r7, r2
 80003e0:	785b      	ldrb	r3, [r3, #1]
 80003e2:	2b37      	cmp	r3, #55	; 0x37
 80003e4:	d903      	bls.n	80003ee <HAL_RTC_AlarmAEventCallback+0x1ce>
		    sAlarm.AlarmTime.Minutes=0;
 80003e6:	18bb      	adds	r3, r7, r2
 80003e8:	2200      	movs	r2, #0
 80003ea:	705a      	strb	r2, [r3, #1]
 80003ec:	e006      	b.n	80003fc <HAL_RTC_AlarmAEventCallback+0x1dc>
		  }else{
		    sAlarm.AlarmTime.Minutes=sAlarm.AlarmTime.Minutes+1;
 80003ee:	2120      	movs	r1, #32
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	785b      	ldrb	r3, [r3, #1]
 80003f4:	3301      	adds	r3, #1
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	705a      	strb	r2, [r3, #1]
		  }
		    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	2320      	movs	r3, #32
 8000400:	18f9      	adds	r1, r7, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	0018      	movs	r0, r3
 8000408:	f002 face 	bl	80029a8 <HAL_RTC_SetAlarm_IT>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d1f6      	bne.n	80003fe <HAL_RTC_AlarmAEventCallback+0x1de>

		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000412:	2201      	movs	r2, #1
 8000414:	2110      	movs	r1, #16
 8000416:	0018      	movs	r0, r3
 8000418:	f001 fae6 	bl	80019e8 <HAL_GPIO_WritePin>
		  isLight_On = TRUE;
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <HAL_RTC_AlarmAEventCallback+0x22c>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <HAL_RTC_AlarmAEventCallback+0x218>)
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fadd 	bl	80019e8 <HAL_GPIO_WritePin>

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b015      	add	sp, #84	; 0x54
 8000434:	bd90      	pop	{r4, r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	48000400 	.word	0x48000400
 800043c:	20000028 	.word	0x20000028
 8000440:	00000a59 	.word	0x00000a59
 8000444:	000009c3 	.word	0x000009c3
 8000448:	ffff3fff 	.word	0xffff3fff
 800044c:	200000cd 	.word	0x200000cd

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000454:	f000 fb32 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000458:	f000 f816 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800045c:	f000 f9ae 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000460:	f000 f996 	bl	8000790 <MX_DMA_Init>
  MX_ADC_Init();
 8000464:	f000 f890 	bl	8000588 <MX_ADC_Init>
  MX_RTC_Init();
 8000468:	f000 f8f6 	bl	8000658 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800046c:	f000 f86e 	bl	800054c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  isInit_over = TRUE;
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <main+0x34>)
 8000472:	2201      	movs	r2, #1
 8000474:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_SuspendTick();
 8000476:	f000 fb85 	bl	8000b84 <HAL_SuspendTick>
	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800047a:	2101      	movs	r1, #1
 800047c:	2001      	movs	r0, #1
 800047e:	f001 fad1 	bl	8001a24 <HAL_PWR_EnterSTOPMode>
	    HAL_SuspendTick();
 8000482:	e7f8      	b.n	8000476 <main+0x26>
 8000484:	200000cc 	.word	0x200000cc

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b099      	sub	sp, #100	; 0x64
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	242c      	movs	r4, #44	; 0x2c
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2334      	movs	r3, #52	; 0x34
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f002 fd27 	bl	8002eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049e:	231c      	movs	r3, #28
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	0018      	movs	r0, r3
 80004a4:	2310      	movs	r3, #16
 80004a6:	001a      	movs	r2, r3
 80004a8:	2100      	movs	r1, #0
 80004aa:	f002 fd1f 	bl	8002eec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	0018      	movs	r0, r3
 80004b2:	2318      	movs	r3, #24
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f002 fd18 	bl	8002eec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80004bc:	0021      	movs	r1, r4
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	221a      	movs	r2, #26
 80004c2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2201      	movs	r2, #1
 80004c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2201      	movs	r2, #1
 80004ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2210      	movs	r2, #16
 80004d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2210      	movs	r2, #16
 80004da:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2201      	movs	r2, #1
 80004e0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 face 	bl	8001a8c <HAL_RCC_OscConfig>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80004f4:	f000 f9b0 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	211c      	movs	r1, #28
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2207      	movs	r2, #7
 80004fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2100      	movs	r1, #0
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fe3e 	bl	8002198 <HAL_RCC_ClockConfig>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000520:	f000 f99a 	bl	8000858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0252      	lsls	r2, r2, #9
 800052a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	0018      	movs	r0, r3
 8000538:	f001 ff7a 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000540:	f000 f98a 	bl	8000858 <Error_Handler>
  }
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b019      	add	sp, #100	; 0x64
 800054a:	bd90      	pop	{r4, r7, pc}

0800054c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* RTC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2002      	movs	r0, #2
 8000556:	f000 ffa7 	bl	80014a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 800055a:	2002      	movs	r0, #2
 800055c:	f000 ffb9 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	2004      	movs	r0, #4
 8000566:	f000 ff9f 	bl	80014a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800056a:	2004      	movs	r0, #4
 800056c:	f000 ffb1 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2009      	movs	r0, #9
 8000576:	f000 ff97 	bl	80014a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800057a:	2009      	movs	r0, #9
 800057c:	f000 ffa9 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	0018      	movs	r0, r3
 8000592:	230c      	movs	r3, #12
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 fca8 	bl	8002eec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800059c:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_ADC_Init+0xc8>)
 800059e:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <MX_ADC_Init+0xcc>)
 80005a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_ADC_Init+0xc8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC_Init+0xc8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_ADC_Init+0xc8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC_Init+0xc8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <MX_ADC_Init+0xc8>)
 80005bc:	2204      	movs	r2, #4
 80005be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC_Init+0xc8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_ADC_Init+0xc8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_ADC_Init+0xc8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_ADC_Init+0xc8>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_ADC_Init+0xc8>)
 80005da:	22c2      	movs	r2, #194	; 0xc2
 80005dc:	32ff      	adds	r2, #255	; 0xff
 80005de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_ADC_Init+0xc8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_ADC_Init+0xc8>)
 80005e8:	2224      	movs	r2, #36	; 0x24
 80005ea:	2100      	movs	r1, #0
 80005ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_ADC_Init+0xc8>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_ADC_Init+0xc8>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fae0 	bl	8000bbc <HAL_ADC_Init>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000600:	f000 f92a 	bl	8000858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2208      	movs	r2, #8
 8000608:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	0152      	lsls	r2, r2, #5
 8000610:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	0552      	lsls	r2, r2, #21
 8000618:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800061a:	1d3a      	adds	r2, r7, #4
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_ADC_Init+0xc8>)
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fd03 	bl	800102c <HAL_ADC_ConfigChannel>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800062a:	f000 f915 	bl	8000858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2209      	movs	r2, #9
 8000632:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000634:	1d3a      	adds	r2, r7, #4
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_ADC_Init+0xc8>)
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fcf6 	bl	800102c <HAL_ADC_ConfigChannel>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000644:	f000 f908 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b004      	add	sp, #16
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000028 	.word	0x20000028
 8000654:	40012400 	.word	0x40012400

08000658 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	; 0x40
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800065e:	232c      	movs	r3, #44	; 0x2c
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 fc3f 	bl	8002eec <memset>
  RTC_DateTypeDef sDate = {0};
 800066e:	2328      	movs	r3, #40	; 0x28
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	2328      	movs	r3, #40	; 0x28
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 fc34 	bl	8002eec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <MX_RTC_Init+0x12c>)
 8000686:	4a40      	ldr	r2, [pc, #256]	; (8000788 <MX_RTC_Init+0x130>)
 8000688:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <MX_RTC_Init+0x12c>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000690:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <MX_RTC_Init+0x12c>)
 8000692:	227f      	movs	r2, #127	; 0x7f
 8000694:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000696:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <MX_RTC_Init+0x12c>)
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MX_RTC_Init+0x12c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a2:	4b38      	ldr	r3, [pc, #224]	; (8000784 <MX_RTC_Init+0x12c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <MX_RTC_Init+0x12c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <MX_RTC_Init+0x12c>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 ffab 	bl	800260c <HAL_RTC_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80006ba:	f000 f8cd 	bl	8000858 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006be:	212c      	movs	r1, #44	; 0x2c
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006de:	1879      	adds	r1, r7, r1
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_RTC_Init+0x12c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 f829 	bl	800273c <HAL_RTC_SetTime>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80006ee:	f000 f8b3 	bl	8000858 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006f2:	2128      	movs	r1, #40	; 0x28
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2201      	movs	r2, #1
 8000704:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800070c:	1879      	adds	r1, r7, r1
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_RTC_Init+0x12c>)
 8000710:	2201      	movs	r2, #1
 8000712:	0018      	movs	r0, r3
 8000714:	f002 f8b8 	bl	8002888 <HAL_RTC_SetDate>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800071c:	f000 f89c 	bl	8000858 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000720:	003b      	movs	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000726:	003b      	movs	r3, r7
 8000728:	2201      	movs	r2, #1
 800072a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000738:	003b      	movs	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800073e:	003b      	movs	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000744:	003b      	movs	r3, r7
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <MX_RTC_Init+0x134>)
 8000748:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800074a:	003b      	movs	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000756:	003b      	movs	r3, r7
 8000758:	2220      	movs	r2, #32
 800075a:	2101      	movs	r1, #1
 800075c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800075e:	003b      	movs	r3, r7
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000766:	0039      	movs	r1, r7
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_RTC_Init+0x12c>)
 800076a:	2201      	movs	r2, #1
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f91b 	bl	80029a8 <HAL_RTC_SetAlarm_IT>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_RTC_Init+0x122>
  {
    Error_Handler();
 8000776:	f000 f86f 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b010      	add	sp, #64	; 0x40
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	200000ac 	.word	0x200000ac
 8000788:	40002800 	.word	0x40002800
 800078c:	80800080 	.word	0x80800080

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_DMA_Init+0x28>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_DMA_Init+0x28>)
 800079c:	2101      	movs	r1, #1
 800079e:	430a      	orrs	r2, r1
 80007a0:	615a      	str	r2, [r3, #20]
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_DMA_Init+0x28>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4013      	ands	r3, r2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	240c      	movs	r4, #12
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	0018      	movs	r0, r3
 80007c8:	2314      	movs	r3, #20
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f002 fb8d 	bl	8002eec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_GPIO_Init+0x94>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_GPIO_Init+0x94>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	03c9      	lsls	r1, r1, #15
 80007dc:	430a      	orrs	r2, r1
 80007de:	615a      	str	r2, [r3, #20]
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_GPIO_Init+0x94>)
 80007e2:	695a      	ldr	r2, [r3, #20]
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_GPIO_Init+0x94>)
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_GPIO_Init+0x94>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	02c9      	lsls	r1, r1, #11
 80007f8:	430a      	orrs	r2, r1
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_GPIO_Init+0x94>)
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	02db      	lsls	r3, r3, #11
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_GPIO_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	2118      	movs	r1, #24
 8000810:	0018      	movs	r0, r3
 8000812:	f001 f8e9 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pwrADC_3_3v_GPIO_Port, pwrADC_3_3v_Pin, GPIO_PIN_SET);
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_GPIO_Init+0x98>)
 8000818:	2201      	movs	r2, #1
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	0018      	movs	r0, r3
 800081e:	f001 f8e3 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD4_Pin pwrADC_3_3v_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin|pwrADC_3_3v_Pin;
 8000822:	0021      	movs	r1, r4
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2298      	movs	r2, #152	; 0x98
 8000828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	187b      	adds	r3, r7, r1
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <MX_GPIO_Init+0x98>)
 8000840:	0019      	movs	r1, r3
 8000842:	0010      	movs	r0, r2
 8000844:	f000 ff68 	bl	8001718 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b009      	add	sp, #36	; 0x24
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x44>)
 800086c:	699a      	ldr	r2, [r3, #24]
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_MspInit+0x44>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	619a      	str	r2, [r3, #24]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x44>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x44>)
 8000884:	69da      	ldr	r2, [r3, #28]
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x44>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	0549      	lsls	r1, r1, #21
 800088c:	430a      	orrs	r2, r1
 800088e:	61da      	str	r2, [r3, #28]
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_MspInit+0x44>)
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	055b      	lsls	r3, r3, #21
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	2414      	movs	r4, #20
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	2314      	movs	r3, #20
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f002 fb14 	bl	8002eec <memset>
  if(hadc->Instance==ADC1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a2c      	ldr	r2, [pc, #176]	; (800097c <HAL_ADC_MspInit+0xd0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d152      	bne.n	8000974 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <HAL_ADC_MspInit+0xd4>)
 80008d0:	699a      	ldr	r2, [r3, #24]
 80008d2:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <HAL_ADC_MspInit+0xd4>)
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	0089      	lsls	r1, r1, #2
 80008d8:	430a      	orrs	r2, r1
 80008da:	619a      	str	r2, [r3, #24]
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <HAL_ADC_MspInit+0xd4>)
 80008de:	699a      	ldr	r2, [r3, #24]
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <HAL_ADC_MspInit+0xd4>)
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <HAL_ADC_MspInit+0xd4>)
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	02c9      	lsls	r1, r1, #11
 80008f4:	430a      	orrs	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <HAL_ADC_MspInit+0xd4>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	02db      	lsls	r3, r3, #11
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = ADC_MOIST1_Pin|ADC_MOIST2_Pin;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2203      	movs	r2, #3
 800090a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2203      	movs	r2, #3
 8000910:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	193b      	adds	r3, r7, r4
 800091a:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <HAL_ADC_MspInit+0xd8>)
 800091c:	0019      	movs	r1, r3
 800091e:	0010      	movs	r0, r2
 8000920:	f000 fefa 	bl	8001718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 8000926:	4a19      	ldr	r2, [pc, #100]	; (800098c <HAL_ADC_MspInit+0xe0>)
 8000928:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 800094e:	2220      	movs	r2, #32
 8000950:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fdd6 	bl	800150c <HAL_DMA_Init>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000964:	f7ff ff78 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_ADC_MspInit+0xdc>)
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b00b      	add	sp, #44	; 0x2c
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	40012400 	.word	0x40012400
 8000980:	40021000 	.word	0x40021000
 8000984:	48000400 	.word	0x48000400
 8000988:	20000068 	.word	0x20000068
 800098c:	40020008 	.word	0x40020008

08000990 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_RTC_MspInit+0x28>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d106      	bne.n	80009b0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_RTC_MspInit+0x2c>)
 80009a4:	6a1a      	ldr	r2, [r3, #32]
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_RTC_MspInit+0x2c>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0209      	lsls	r1, r1, #8
 80009ac:	430a      	orrs	r2, r1
 80009ae:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40002800 	.word	0x40002800
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f8b2 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <RTC_IRQHandler+0x14>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 f950 	bl	8002c9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	200000ac 	.word	0x200000ac

08000a08 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <DMA1_Channel1_IRQHandler+0x14>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fdbe 	bl	800159c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000068 	.word	0x20000068

08000a2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a3c:	f7ff fff6 	bl	8000a2c <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <LoopForever+0x6>)
    LDR R1, [R0]
 8000a42:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a44:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <LoopForever+0xa>)
    CMP R1, R2
 8000a48:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a4a:	d105      	bne.n	8000a58 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a4e:	4912      	ldr	r1, [pc, #72]	; (8000a98 <LoopForever+0x12>)
    STR R1, [R0]
 8000a50:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a52:	4812      	ldr	r0, [pc, #72]	; (8000a9c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a54:	4912      	ldr	r1, [pc, #72]	; (8000aa0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a56:	6001      	str	r1, [r0, #0]

08000a58 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a5a:	4913      	ldr	r1, [pc, #76]	; (8000aa8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <LoopForever+0x26>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a70:	4c10      	ldr	r4, [pc, #64]	; (8000ab4 <LoopForever+0x2e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a7e:	f002 fa11 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a82:	f7ff fce5 	bl	8000450 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   r0, =_estack
 8000a88:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a8c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a90:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a94:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a98:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a9c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000aa0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aac:	08002f4c 	.word	0x08002f4c
  ldr r2, =_sbss
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab4:	200000d4 	.word	0x200000d4

08000ab8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC1_IRQHandler>
	...

08000abc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <HAL_Init+0x24>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_Init+0x24>)
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f809 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad2:	f7ff fec7 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x5c>)
 8000aee:	681c      	ldr	r4, [r3, #0]
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_InitTick+0x60>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	0019      	movs	r1, r3
 8000af6:	23fa      	movs	r3, #250	; 0xfa
 8000af8:	0098      	lsls	r0, r3, #2
 8000afa:	f7ff fb05 	bl	8000108 <__udivsi3>
 8000afe:	0003      	movs	r3, r0
 8000b00:	0019      	movs	r1, r3
 8000b02:	0020      	movs	r0, r4
 8000b04:	f7ff fb00 	bl	8000108 <__udivsi3>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fcf1 	bl	80014f2 <HAL_SYSTICK_Config>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e00f      	b.n	8000b38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d80b      	bhi.n	8000b36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fcbe 	bl	80014a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_InitTick+0x64>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b003      	add	sp, #12
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x1c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	001a      	movs	r2, r3
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x20>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_IncTick+0x20>)
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	200000d0 	.word	0x200000d0

08000b70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b02      	ldr	r3, [pc, #8]	; (8000b80 <HAL_GetTick+0x10>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	200000d0 	.word	0x200000d0

08000b84 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <HAL_SuspendTick+0x18>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_SuspendTick+0x18>)
 8000b8e:	2102      	movs	r1, #2
 8000b90:	438a      	bics	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <HAL_ResumeTick+0x18>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_ResumeTick+0x18>)
 8000baa:	2102      	movs	r1, #2
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e125      	b.n	8000e26 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10a      	bne.n	8000bf8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2234      	movs	r2, #52	; 0x34
 8000bec:	2100      	movs	r1, #0
 8000bee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fe5a 	bl	80008ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d000      	beq.n	8000c04 <HAL_ADC_Init+0x48>
 8000c02:	e103      	b.n	8000e0c <HAL_ADC_Init+0x250>
 8000c04:	230f      	movs	r3, #15
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d000      	beq.n	8000c10 <HAL_ADC_Init+0x54>
 8000c0e:	e0fd      	b.n	8000e0c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2204      	movs	r2, #4
 8000c18:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c1a:	d000      	beq.n	8000c1e <HAL_ADC_Init+0x62>
 8000c1c:	e0f6      	b.n	8000e0c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c22:	4a83      	ldr	r2, [pc, #524]	; (8000e30 <HAL_ADC_Init+0x274>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	2202      	movs	r2, #2
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2203      	movs	r2, #3
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d112      	bne.n	8000c62 <HAL_ADC_Init+0xa6>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2201      	movs	r2, #1
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d009      	beq.n	8000c5e <HAL_ADC_Init+0xa2>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	401a      	ands	r2, r3
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0xa6>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <HAL_ADC_Init+0xa8>
 8000c62:	2300      	movs	r3, #0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d116      	bne.n	8000c96 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	2218      	movs	r2, #24
 8000c70:	4393      	bics	r3, r2
 8000c72:	0019      	movs	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	0899      	lsrs	r1, r3, #2
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4964      	ldr	r1, [pc, #400]	; (8000e34 <HAL_ADC_Init+0x278>)
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7e1b      	ldrb	r3, [r3, #24]
 8000caa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e5b      	ldrb	r3, [r3, #25]
 8000cb0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7e9b      	ldrb	r3, [r3, #26]
 8000cb8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d002      	beq.n	8000cca <HAL_ADC_Init+0x10e>
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	015b      	lsls	r3, r3, #5
 8000cc8:	e000      	b.n	8000ccc <HAL_ADC_Init+0x110>
 8000cca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ccc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cd2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d101      	bne.n	8000ce0 <HAL_ADC_Init+0x124>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e000      	b.n	8000ce2 <HAL_ADC_Init+0x126>
 8000ce0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000ce2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2124      	movs	r1, #36	; 0x24
 8000ce8:	5c5b      	ldrb	r3, [r3, r1]
 8000cea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000cec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7edb      	ldrb	r3, [r3, #27]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d115      	bne.n	8000d28 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7e9b      	ldrb	r3, [r3, #26]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d105      	bne.n	8000d10 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	0252      	lsls	r2, r2, #9
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	e00b      	b.n	8000d28 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d14:	2220      	movs	r2, #32
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d20:	2201      	movs	r2, #1
 8000d22:	431a      	orrs	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69da      	ldr	r2, [r3, #28]
 8000d2c:	23c2      	movs	r3, #194	; 0xc2
 8000d2e:	33ff      	adds	r3, #255	; 0xff
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d007      	beq.n	8000d44 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68d9      	ldr	r1, [r3, #12]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	055b      	lsls	r3, r3, #21
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d01b      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d017      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d013      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d00f      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d00b      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d007      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	2b06      	cmp	r3, #6
 8000d8e:	d003      	beq.n	8000d98 <HAL_ADC_Init+0x1dc>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	d112      	bne.n	8000dbe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	695a      	ldr	r2, [r3, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2107      	movs	r1, #7
 8000da4:	438a      	bics	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6959      	ldr	r1, [r3, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db2:	2207      	movs	r2, #7
 8000db4:	401a      	ands	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <HAL_ADC_Init+0x27c>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10b      	bne.n	8000de6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd8:	2203      	movs	r2, #3
 8000dda:	4393      	bics	r3, r2
 8000ddc:	2201      	movs	r2, #1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000de4:	e01c      	b.n	8000e20 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dea:	2212      	movs	r2, #18
 8000dec:	4393      	bics	r3, r2
 8000dee:	2210      	movs	r2, #16
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e0a:	e009      	b.n	8000e20 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e10:	2210      	movs	r2, #16
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	fffffefd 	.word	0xfffffefd
 8000e34:	fffe0219 	.word	0xfffe0219
 8000e38:	833fffe7 	.word	0x833fffe7

08000e3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e44:	230f      	movs	r3, #15
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2204      	movs	r2, #4
 8000e54:	4013      	ands	r3, r2
 8000e56:	d138      	bne.n	8000eca <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2234      	movs	r2, #52	; 0x34
 8000e5c:	5c9b      	ldrb	r3, [r3, r2]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_Start+0x2a>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e038      	b.n	8000ed8 <HAL_ADC_Start+0x9c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2234      	movs	r2, #52	; 0x34
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7e5b      	ldrb	r3, [r3, #25]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d007      	beq.n	8000e86 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e76:	230f      	movs	r3, #15
 8000e78:	18fc      	adds	r4, r7, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 f9e3 	bl	8001248 <ADC_Enable>
 8000e82:	0003      	movs	r3, r0
 8000e84:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e86:	230f      	movs	r3, #15
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d120      	bne.n	8000ed2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_ADC_Start+0xa4>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2234      	movs	r2, #52	; 0x34
 8000eac:	2100      	movs	r1, #0
 8000eae:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	221c      	movs	r2, #28
 8000eb6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e003      	b.n	8000ed2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b005      	add	sp, #20
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	fffff0fe 	.word	0xfffff0fe

08000ee4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	2b08      	cmp	r3, #8
 8000ef4:	d102      	bne.n	8000efc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e014      	b.n	8000f26 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10b      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0e:	2220      	movs	r2, #32
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2234      	movs	r2, #52	; 0x34
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e071      	b.n	8001006 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f22:	230c      	movs	r3, #12
 8000f24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f26:	f7ff fe23 	bl	8000b70 <HAL_GetTick>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f2e:	e01f      	b.n	8000f70 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	d01c      	beq.n	8000f70 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <HAL_ADC_PollForConversion+0x68>
 8000f3c:	f7ff fe18 	bl	8000b70 <HAL_GetTick>
 8000f40:	0002      	movs	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d211      	bcs.n	8000f70 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	d10b      	bne.n	8000f70 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2234      	movs	r2, #52	; 0x34
 8000f68:	2100      	movs	r1, #0
 8000f6a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e04a      	b.n	8001006 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d0d9      	beq.n	8000f30 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	23c0      	movs	r3, #192	; 0xc0
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	d12d      	bne.n	8000ff4 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d129      	bne.n	8000ff4 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d122      	bne.n	8000ff4 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d110      	bne.n	8000fdc <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	210c      	movs	r1, #12
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_ADC_PollForConversion+0x12c>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fda:	e00b      	b.n	8000ff4 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	2201      	movs	r2, #1
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7e1b      	ldrb	r3, [r3, #24]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d103      	bne.n	8001004 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	220c      	movs	r2, #12
 8001002:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	fffffefe 	.word	0xfffffefe

08001014 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001036:	230f      	movs	r3, #15
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	055b      	lsls	r3, r3, #21
 800104a:	429a      	cmp	r2, r3
 800104c:	d011      	beq.n	8001072 <HAL_ADC_ConfigChannel+0x46>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	2b01      	cmp	r3, #1
 8001054:	d00d      	beq.n	8001072 <HAL_ADC_ConfigChannel+0x46>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	2b02      	cmp	r3, #2
 800105c:	d009      	beq.n	8001072 <HAL_ADC_ConfigChannel+0x46>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	2b03      	cmp	r3, #3
 8001064:	d005      	beq.n	8001072 <HAL_ADC_ConfigChannel+0x46>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	2b04      	cmp	r3, #4
 800106c:	d001      	beq.n	8001072 <HAL_ADC_ConfigChannel+0x46>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2234      	movs	r2, #52	; 0x34
 8001076:	5c9b      	ldrb	r3, [r3, r2]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x54>
 800107c:	2302      	movs	r3, #2
 800107e:	e0d0      	b.n	8001222 <HAL_ADC_ConfigChannel+0x1f6>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2234      	movs	r2, #52	; 0x34
 8001084:	2101      	movs	r1, #1
 8001086:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2204      	movs	r2, #4
 8001090:	4013      	ands	r3, r2
 8001092:	d000      	beq.n	8001096 <HAL_ADC_ConfigChannel+0x6a>
 8001094:	e0b4      	b.n	8001200 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a64      	ldr	r2, [pc, #400]	; (800122c <HAL_ADC_ConfigChannel+0x200>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d100      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x76>
 80010a0:	e082      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d037      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d033      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d02f      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d02b      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d027      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d023      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b06      	cmp	r3, #6
 80010f2:	d01f      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	d01b      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	2107      	movs	r1, #7
 8001108:	400b      	ands	r3, r1
 800110a:	429a      	cmp	r2, r3
 800110c:	d012      	beq.n	8001134 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2107      	movs	r1, #7
 800111a:	438a      	bics	r2, r1
 800111c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6959      	ldr	r1, [r3, #20]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2207      	movs	r2, #7
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b10      	cmp	r3, #16
 800113a:	d007      	beq.n	800114c <HAL_ADC_ConfigChannel+0x120>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b11      	cmp	r3, #17
 8001142:	d003      	beq.n	800114c <HAL_ADC_ConfigChannel+0x120>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b12      	cmp	r3, #18
 800114a:	d163      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800114c:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_ADC_ConfigChannel+0x204>)
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b10      	cmp	r3, #16
 8001156:	d009      	beq.n	800116c <HAL_ADC_ConfigChannel+0x140>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b11      	cmp	r3, #17
 800115e:	d102      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x13a>
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	03db      	lsls	r3, r3, #15
 8001164:	e004      	b.n	8001170 <HAL_ADC_ConfigChannel+0x144>
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	045b      	lsls	r3, r3, #17
 800116a:	e001      	b.n	8001170 <HAL_ADC_ConfigChannel+0x144>
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	041b      	lsls	r3, r3, #16
 8001170:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <HAL_ADC_ConfigChannel+0x204>)
 8001172:	430b      	orrs	r3, r1
 8001174:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b10      	cmp	r3, #16
 800117c:	d14a      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_ADC_ConfigChannel+0x208>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	492d      	ldr	r1, [pc, #180]	; (8001238 <HAL_ADC_ConfigChannel+0x20c>)
 8001184:	0018      	movs	r0, r3
 8001186:	f7fe ffbf 	bl	8000108 <__udivsi3>
 800118a:	0003      	movs	r3, r0
 800118c:	001a      	movs	r2, r3
 800118e:	0013      	movs	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	189b      	adds	r3, r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001198:	e002      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3b01      	subs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f9      	bne.n	800119a <HAL_ADC_ConfigChannel+0x16e>
 80011a6:	e035      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2101      	movs	r1, #1
 80011b4:	4099      	lsls	r1, r3
 80011b6:	000b      	movs	r3, r1
 80011b8:	43d9      	mvns	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	400a      	ands	r2, r1
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d007      	beq.n	80011da <HAL_ADC_ConfigChannel+0x1ae>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b11      	cmp	r3, #17
 80011d0:	d003      	beq.n	80011da <HAL_ADC_ConfigChannel+0x1ae>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d11c      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_ADC_ConfigChannel+0x204>)
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d007      	beq.n	80011f6 <HAL_ADC_ConfigChannel+0x1ca>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b11      	cmp	r3, #17
 80011ec:	d101      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x1c6>
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_ADC_ConfigChannel+0x210>)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1cc>
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_ADC_ConfigChannel+0x214>)
 80011f4:	e000      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1cc>
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_ADC_ConfigChannel+0x218>)
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_ADC_ConfigChannel+0x204>)
 80011fa:	400b      	ands	r3, r1
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e009      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	2220      	movs	r2, #32
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2234      	movs	r2, #52	; 0x34
 8001218:	2100      	movs	r1, #0
 800121a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800121c:	230f      	movs	r3, #15
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	781b      	ldrb	r3, [r3, #0]
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	00001001 	.word	0x00001001
 8001230:	40012708 	.word	0x40012708
 8001234:	20000000 	.word	0x20000000
 8001238:	000f4240 	.word	0x000f4240
 800123c:	ffbfffff 	.word	0xffbfffff
 8001240:	feffffff 	.word	0xfeffffff
 8001244:	ff7fffff 	.word	0xff7fffff

08001248 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2203      	movs	r2, #3
 8001260:	4013      	ands	r3, r2
 8001262:	2b01      	cmp	r3, #1
 8001264:	d112      	bne.n	800128c <ADC_Enable+0x44>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2201      	movs	r2, #1
 800126e:	4013      	ands	r3, r2
 8001270:	2b01      	cmp	r3, #1
 8001272:	d009      	beq.n	8001288 <ADC_Enable+0x40>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	401a      	ands	r2, r3
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	429a      	cmp	r2, r3
 8001286:	d101      	bne.n	800128c <ADC_Enable+0x44>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <ADC_Enable+0x46>
 800128c:	2300      	movs	r3, #0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d152      	bne.n	8001338 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4a2a      	ldr	r2, [pc, #168]	; (8001344 <ADC_Enable+0xfc>)
 800129a:	4013      	ands	r3, r2
 800129c:	d00d      	beq.n	80012ba <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	2210      	movs	r2, #16
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ae:	2201      	movs	r2, #1
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e03f      	b.n	800133a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <ADC_Enable+0x100>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	491f      	ldr	r1, [pc, #124]	; (800134c <ADC_Enable+0x104>)
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7fe ff19 	bl	8000108 <__udivsi3>
 80012d6:	0003      	movs	r3, r0
 80012d8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012da:	e002      	b.n	80012e2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3b01      	subs	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f9      	bne.n	80012dc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fc42 	bl	8000b70 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012f0:	e01b      	b.n	800132a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012f2:	f7ff fc3d 	bl	8000b70 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d914      	bls.n	800132a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2201      	movs	r2, #1
 8001308:	4013      	ands	r3, r2
 800130a:	2b01      	cmp	r3, #1
 800130c:	d00d      	beq.n	800132a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	2210      	movs	r2, #16
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	2201      	movs	r2, #1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e007      	b.n	800133a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	2b01      	cmp	r3, #1
 8001336:	d1dc      	bne.n	80012f2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	80000017 	.word	0x80000017
 8001348:	20000000 	.word	0x20000000
 800134c:	000f4240 	.word	0x000f4240

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	0002      	movs	r2, r0
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b7f      	cmp	r3, #127	; 0x7f
 8001362:	d809      	bhi.n	8001378 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	001a      	movs	r2, r3
 800136a:	231f      	movs	r3, #31
 800136c:	401a      	ands	r2, r3
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <__NVIC_EnableIRQ+0x30>)
 8001370:	2101      	movs	r1, #1
 8001372:	4091      	lsls	r1, r2
 8001374:	000a      	movs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]
  }
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b7f      	cmp	r3, #127	; 0x7f
 8001398:	d828      	bhi.n	80013ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139a:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <__NVIC_SetPriority+0xd4>)
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	33c0      	adds	r3, #192	; 0xc0
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	589b      	ldr	r3, [r3, r2]
 80013aa:	1dfa      	adds	r2, r7, #7
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	0011      	movs	r1, r2
 80013b0:	2203      	movs	r2, #3
 80013b2:	400a      	ands	r2, r1
 80013b4:	00d2      	lsls	r2, r2, #3
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	43d2      	mvns	r2, r2
 80013be:	401a      	ands	r2, r3
 80013c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	401a      	ands	r2, r3
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	0018      	movs	r0, r3
 80013d0:	2303      	movs	r3, #3
 80013d2:	4003      	ands	r3, r0
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	481f      	ldr	r0, [pc, #124]	; (8001458 <__NVIC_SetPriority+0xd4>)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	430a      	orrs	r2, r1
 80013e4:	33c0      	adds	r3, #192	; 0xc0
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ea:	e031      	b.n	8001450 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <__NVIC_SetPriority+0xd8>)
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0019      	movs	r1, r3
 80013f4:	230f      	movs	r3, #15
 80013f6:	400b      	ands	r3, r1
 80013f8:	3b08      	subs	r3, #8
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3306      	adds	r3, #6
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	18d3      	adds	r3, r2, r3
 8001402:	3304      	adds	r3, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1dfa      	adds	r2, r7, #7
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	0011      	movs	r1, r2
 800140c:	2203      	movs	r2, #3
 800140e:	400a      	ands	r2, r1
 8001410:	00d2      	lsls	r2, r2, #3
 8001412:	21ff      	movs	r1, #255	; 0xff
 8001414:	4091      	lsls	r1, r2
 8001416:	000a      	movs	r2, r1
 8001418:	43d2      	mvns	r2, r2
 800141a:	401a      	ands	r2, r3
 800141c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	019b      	lsls	r3, r3, #6
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	401a      	ands	r2, r3
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	2303      	movs	r3, #3
 800142e:	4003      	ands	r3, r0
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	001c      	movs	r4, r3
 800143c:	230f      	movs	r3, #15
 800143e:	4023      	ands	r3, r4
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	430a      	orrs	r2, r1
 8001446:	3306      	adds	r3, #6
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	18c3      	adds	r3, r0, r3
 800144c:	3304      	adds	r3, #4
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b003      	add	sp, #12
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	045b      	lsls	r3, r3, #17
 8001470:	429a      	cmp	r2, r3
 8001472:	d301      	bcc.n	8001478 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001474:	2301      	movs	r3, #1
 8001476:	e010      	b.n	800149a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <SysTick_Config+0x44>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	3a01      	subs	r2, #1
 800147e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001480:	2301      	movs	r3, #1
 8001482:	425b      	negs	r3, r3
 8001484:	2103      	movs	r1, #3
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff7c 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x44>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x44>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b002      	add	sp, #8
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	210f      	movs	r1, #15
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	1c02      	adds	r2, r0, #0
 80014b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	0002      	movs	r2, r0
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff33 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ffaf 	bl	8001460 <SysTick_Config>
 8001502:	0003      	movs	r3, r0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e036      	b.n	8001590 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2221      	movs	r2, #33	; 0x21
 8001526:	2102      	movs	r1, #2
 8001528:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_DMA_Init+0x8c>)
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	0018      	movs	r0, r3
 8001574:	f000 f8b4 	bl	80016e0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2221      	movs	r2, #33	; 0x21
 8001582:	2101      	movs	r1, #1
 8001584:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	2100      	movs	r1, #0
 800158c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}
 8001598:	ffffc00f 	.word	0xffffc00f

0800159c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	2204      	movs	r2, #4
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	d024      	beq.n	800160e <HAL_DMA_IRQHandler+0x72>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2204      	movs	r2, #4
 80015c8:	4013      	ands	r3, r2
 80015ca:	d020      	beq.n	800160e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2220      	movs	r2, #32
 80015d4:	4013      	ands	r3, r2
 80015d6:	d107      	bne.n	80015e8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2104      	movs	r1, #4
 80015e4:	438a      	bics	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	2104      	movs	r1, #4
 80015f2:	4091      	lsls	r1, r2
 80015f4:	000a      	movs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d100      	bne.n	8001602 <HAL_DMA_IRQHandler+0x66>
 8001600:	e06a      	b.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	0010      	movs	r0, r2
 800160a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800160c:	e064      	b.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2202      	movs	r2, #2
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	d02b      	beq.n	8001676 <HAL_DMA_IRQHandler+0xda>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d027      	beq.n	8001676 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2220      	movs	r2, #32
 800162e:	4013      	ands	r3, r2
 8001630:	d10b      	bne.n	800164a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	210a      	movs	r1, #10
 800163e:	438a      	bics	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2221      	movs	r2, #33	; 0x21
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	2102      	movs	r1, #2
 8001654:	4091      	lsls	r1, r2
 8001656:	000a      	movs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2220      	movs	r2, #32
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	2b00      	cmp	r3, #0
 8001668:	d036      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	0010      	movs	r0, r2
 8001672:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001674:	e030      	b.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2208      	movs	r2, #8
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	d028      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2208      	movs	r2, #8
 800168a:	4013      	ands	r3, r2
 800168c:	d024      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	210e      	movs	r1, #14
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a6:	2101      	movs	r1, #1
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2221      	movs	r2, #33	; 0x21
 80016b8:	2101      	movs	r1, #1
 80016ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	0010      	movs	r0, r2
 80016d4:	4798      	blx	r3
    }
  }
}
 80016d6:	e7ff      	b.n	80016d8 <HAL_DMA_IRQHandler+0x13c>
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}

080016e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <DMA_CalcBaseAndBitshift+0x30>)
 80016ee:	4694      	mov	ip, r2
 80016f0:	4463      	add	r3, ip
 80016f2:	2114      	movs	r1, #20
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7fe fd07 	bl	8000108 <__udivsi3>
 80016fa:	0003      	movs	r3, r0
 80016fc:	009a      	lsls	r2, r3, #2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <DMA_CalcBaseAndBitshift+0x34>)
 8001706:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}
 8001710:	bffdfff8 	.word	0xbffdfff8
 8001714:	40020000 	.word	0x40020000

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001726:	e149      	b.n	80019bc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4091      	lsls	r1, r2
 8001732:	000a      	movs	r2, r1
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <HAL_GPIO_Init+0x28>
 800173e:	e13a      	b.n	80019b6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	4013      	ands	r3, r2
 8001748:	2b01      	cmp	r3, #1
 800174a:	d005      	beq.n	8001758 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001754:	2b02      	cmp	r3, #2
 8001756:	d130      	bne.n	80017ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	409a      	lsls	r2, r3
 8001766:	0013      	movs	r3, r2
 8001768:	43da      	mvns	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	409a      	lsls	r2, r3
 800177a:	0013      	movs	r3, r2
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178e:	2201      	movs	r2, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	43da      	mvns	r2, r3
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	2201      	movs	r2, #1
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2203      	movs	r2, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d017      	beq.n	80017f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2203      	movs	r2, #3
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d123      	bne.n	800184a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	58d3      	ldr	r3, [r2, r3]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2207      	movs	r2, #7
 8001814:	4013      	ands	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2107      	movs	r1, #7
 800182e:	400b      	ands	r3, r1
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	6939      	ldr	r1, [r7, #16]
 8001848:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2203      	movs	r2, #3
 8001868:	401a      	ands	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	23c0      	movs	r3, #192	; 0xc0
 8001884:	029b      	lsls	r3, r3, #10
 8001886:	4013      	ands	r3, r2
 8001888:	d100      	bne.n	800188c <HAL_GPIO_Init+0x174>
 800188a:	e094      	b.n	80019b6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188c:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <HAL_GPIO_Init+0x2bc>)
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_GPIO_Init+0x2bc>)
 8001892:	2101      	movs	r1, #1
 8001894:	430a      	orrs	r2, r1
 8001896:	619a      	str	r2, [r3, #24]
 8001898:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x2bc>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a4:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_GPIO_Init+0x2c0>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	589b      	ldr	r3, [r3, r2]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2203      	movs	r2, #3
 80018b6:	4013      	ands	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	2390      	movs	r3, #144	; 0x90
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x1d6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a41      	ldr	r2, [pc, #260]	; (80019dc <HAL_GPIO_Init+0x2c4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x1d2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a40      	ldr	r2, [pc, #256]	; (80019e0 <HAL_GPIO_Init+0x2c8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x1ce>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e004      	b.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018ee:	2300      	movs	r3, #0
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	2103      	movs	r1, #3
 80018f4:	400a      	ands	r2, r1
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4093      	lsls	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001900:	4935      	ldr	r1, [pc, #212]	; (80019d8 <HAL_GPIO_Init+0x2c0>)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190e:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43da      	mvns	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	035b      	lsls	r3, r3, #13
 8001926:	4013      	ands	r3, r2
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43da      	mvns	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	039b      	lsls	r3, r3, #14
 8001950:	4013      	ands	r3, r2
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	029b      	lsls	r3, r3, #10
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	40da      	lsrs	r2, r3
 80019c4:	1e13      	subs	r3, r2, #0
 80019c6:	d000      	beq.n	80019ca <HAL_GPIO_Init+0x2b2>
 80019c8:	e6ae      	b.n	8001728 <HAL_GPIO_Init+0x10>
  } 
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b006      	add	sp, #24
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	48000400 	.word	0x48000400
 80019e0:	48000800 	.word	0x48000800
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	0008      	movs	r0, r1
 80019f2:	0011      	movs	r1, r2
 80019f4:	1cbb      	adds	r3, r7, #2
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	801a      	strh	r2, [r3, #0]
 80019fa:	1c7b      	adds	r3, r7, #1
 80019fc:	1c0a      	adds	r2, r1, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a00:	1c7b      	adds	r3, r7, #1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	881a      	ldrh	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	1cfb      	adds	r3, r7, #3
 8001a30:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_PWR_EnterSTOPMode+0x60>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	4393      	bics	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Set LPDS bit according to Regulator value */
  tmpreg |= Regulator;
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_PWR_EnterSTOPMode+0x60>)
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_PWR_EnterSTOPMode+0x64>)
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_PWR_EnterSTOPMode+0x64>)
 8001a58:	2104      	movs	r1, #4
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Select STOP mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001a5e:	1cfb      	adds	r3, r7, #3
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_PWR_EnterSTOPMode+0x46>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001a66:	bf30      	wfi
 8001a68:	e002      	b.n	8001a70 <HAL_PWR_EnterSTOPMode+0x4c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001a6a:	bf40      	sev
    __WFE();
 8001a6c:	bf20      	wfe
    __WFE();
 8001a6e:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_PWR_EnterSTOPMode+0x64>)
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_PWR_EnterSTOPMode+0x64>)
 8001a76:	2104      	movs	r1, #4
 8001a78:	438a      	bics	r2, r1
 8001a7a:	611a      	str	r2, [r3, #16]
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40007000 	.word	0x40007000
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f000 fb76 	bl	800218c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d100      	bne.n	8001aac <HAL_RCC_OscConfig+0x20>
 8001aaa:	e08e      	b.n	8001bca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aac:	4bc5      	ldr	r3, [pc, #788]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	220c      	movs	r2, #12
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab8:	4bc2      	ldr	r3, [pc, #776]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	220c      	movs	r2, #12
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d117      	bne.n	8001af4 <HAL_RCC_OscConfig+0x68>
 8001ac4:	4bbf      	ldr	r3, [pc, #764]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	23c0      	movs	r3, #192	; 0xc0
 8001aca:	025b      	lsls	r3, r3, #9
 8001acc:	401a      	ands	r2, r3
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	025b      	lsls	r3, r3, #9
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d10e      	bne.n	8001af4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4bbb      	ldr	r3, [pc, #748]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x58>
 8001ae2:	e071      	b.n	8001bc8 <HAL_RCC_OscConfig+0x13c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d000      	beq.n	8001aee <HAL_RCC_OscConfig+0x62>
 8001aec:	e06c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f000 fb4c 	bl	800218c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_OscConfig+0x80>
 8001afc:	4bb1      	ldr	r3, [pc, #708]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4bb0      	ldr	r3, [pc, #704]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b02:	2180      	movs	r1, #128	; 0x80
 8001b04:	0249      	lsls	r1, r1, #9
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e02f      	b.n	8001b6c <HAL_RCC_OscConfig+0xe0>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10c      	bne.n	8001b2e <HAL_RCC_OscConfig+0xa2>
 8001b14:	4bab      	ldr	r3, [pc, #684]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4baa      	ldr	r3, [pc, #680]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b1a:	49ab      	ldr	r1, [pc, #684]	; (8001dc8 <HAL_RCC_OscConfig+0x33c>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	4ba8      	ldr	r3, [pc, #672]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4ba7      	ldr	r3, [pc, #668]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b26:	49a9      	ldr	r1, [pc, #676]	; (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e01e      	b.n	8001b6c <HAL_RCC_OscConfig+0xe0>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d10e      	bne.n	8001b54 <HAL_RCC_OscConfig+0xc8>
 8001b36:	4ba3      	ldr	r3, [pc, #652]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4ba2      	ldr	r3, [pc, #648]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	02c9      	lsls	r1, r1, #11
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	4b9f      	ldr	r3, [pc, #636]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b9e      	ldr	r3, [pc, #632]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	0249      	lsls	r1, r1, #9
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xe0>
 8001b54:	4b9b      	ldr	r3, [pc, #620]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b9a      	ldr	r3, [pc, #616]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	499b      	ldr	r1, [pc, #620]	; (8001dc8 <HAL_RCC_OscConfig+0x33c>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	4b98      	ldr	r3, [pc, #608]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b97      	ldr	r3, [pc, #604]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b66:	4999      	ldr	r1, [pc, #612]	; (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d014      	beq.n	8001b9e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7fe fffc 	bl	8000b70 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7fe fff7 	bl	8000b70 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	; 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e2fd      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b90:	4b8c      	ldr	r3, [pc, #560]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0xf2>
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7fe ffe7 	bl	8000b70 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7fe ffe2 	bl	8000b70 <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e2e8      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x11c>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x14a>
 8001bd4:	e06c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd6:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	220c      	movs	r2, #12
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d00e      	beq.n	8001bfe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001be0:	4b78      	ldr	r3, [pc, #480]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	220c      	movs	r2, #12
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d11f      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1a0>
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	23c0      	movs	r3, #192	; 0xc0
 8001bf2:	025b      	lsls	r3, r3, #9
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x188>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e2bb      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	22f8      	movs	r2, #248	; 0xf8
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00da      	lsls	r2, r3, #3
 8001c24:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e041      	b.n	8001cb0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d024      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe ff96 	bl	8000b70 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7fe ff91 	bl	8000b70 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e297      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0f1      	beq.n	8001c4a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	22f8      	movs	r2, #248	; 0xf8
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00da      	lsls	r2, r3, #3
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e018      	b.n	8001cb0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	438a      	bics	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe ff71 	bl	8000b70 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c94:	f7fe ff6c 	bl	8000b70 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e272      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d1f1      	bne.n	8001c94 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d036      	beq.n	8001d28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d019      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7fe ff4f 	bl	8000b70 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ff4a 	bl	8000b70 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e250      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f1      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
 8001cf4:	e018      	b.n	8001d28 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfa:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	438a      	bics	r2, r1
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7fe ff35 	bl	8000b70 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7fe ff30 	bl	8000b70 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e236      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d1f1      	bne.n	8001d0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d100      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2a8>
 8001d32:	e0b5      	b.n	8001ea0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d34:	201f      	movs	r0, #31
 8001d36:	183b      	adds	r3, r7, r0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	69da      	ldr	r2, [r3, #28]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	055b      	lsls	r3, r3, #21
 8001d44:	4013      	ands	r3, r2
 8001d46:	d110      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0549      	lsls	r1, r1, #21
 8001d52:	430a      	orrs	r2, r1
 8001d54:	61da      	str	r2, [r3, #28]
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	055b      	lsls	r3, r3, #21
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_OscConfig+0x344>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d11a      	bne.n	8001dac <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_RCC_OscConfig+0x344>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_RCC_OscConfig+0x344>)
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0049      	lsls	r1, r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d84:	f7fe fef4 	bl	8000b70 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7fe feef 	bl	8000b70 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1f5      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x344>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10f      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x348>
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_RCC_OscConfig+0x338>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	621a      	str	r2, [r3, #32]
 8001dc0:	e036      	b.n	8001e30 <HAL_RCC_OscConfig+0x3a4>
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	fffeffff 	.word	0xfffeffff
 8001dcc:	fffbffff 	.word	0xfffbffff
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x36a>
 8001ddc:	4bca      	ldr	r3, [pc, #808]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001dde:	6a1a      	ldr	r2, [r3, #32]
 8001de0:	4bc9      	ldr	r3, [pc, #804]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001de2:	2101      	movs	r1, #1
 8001de4:	438a      	bics	r2, r1
 8001de6:	621a      	str	r2, [r3, #32]
 8001de8:	4bc7      	ldr	r3, [pc, #796]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	4bc6      	ldr	r3, [pc, #792]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001dee:	2104      	movs	r1, #4
 8001df0:	438a      	bics	r2, r1
 8001df2:	621a      	str	r2, [r3, #32]
 8001df4:	e01c      	b.n	8001e30 <HAL_RCC_OscConfig+0x3a4>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x38c>
 8001dfe:	4bc2      	ldr	r3, [pc, #776]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	4bc1      	ldr	r3, [pc, #772]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e04:	2104      	movs	r1, #4
 8001e06:	430a      	orrs	r2, r1
 8001e08:	621a      	str	r2, [r3, #32]
 8001e0a:	4bbf      	ldr	r3, [pc, #764]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	4bbe      	ldr	r3, [pc, #760]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	621a      	str	r2, [r3, #32]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0x3a4>
 8001e18:	4bbb      	ldr	r3, [pc, #748]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	4bba      	ldr	r3, [pc, #744]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	621a      	str	r2, [r3, #32]
 8001e24:	4bb8      	ldr	r3, [pc, #736]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	4bb7      	ldr	r3, [pc, #732]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d014      	beq.n	8001e62 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7fe fe9a 	bl	8000b70 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe fe95 	bl	8000b70 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4aaf      	ldr	r2, [pc, #700]	; (800210c <HAL_RCC_OscConfig+0x680>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e19a      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e56:	4bac      	ldr	r3, [pc, #688]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x3b6>
 8001e60:	e013      	b.n	8001e8a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fe85 	bl	8000b70 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6a:	e009      	b.n	8001e80 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7fe fe80 	bl	8000b70 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	4aa5      	ldr	r2, [pc, #660]	; (800210c <HAL_RCC_OscConfig+0x680>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e185      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	4ba1      	ldr	r3, [pc, #644]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	2202      	movs	r2, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e8a:	231f      	movs	r3, #31
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e94:	4b9c      	ldr	r3, [pc, #624]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	4b9b      	ldr	r3, [pc, #620]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	499d      	ldr	r1, [pc, #628]	; (8002110 <HAL_RCC_OscConfig+0x684>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d063      	beq.n	8001f72 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d12a      	bne.n	8001f08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eb2:	4b95      	ldr	r3, [pc, #596]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb6:	4b94      	ldr	r3, [pc, #592]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001eb8:	2104      	movs	r1, #4
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ebe:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec2:	4b91      	ldr	r3, [pc, #580]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe fe51 	bl	8000b70 <HAL_GetTick>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ed4:	f7fe fe4c 	bl	8000b70 <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e152      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ee6:	4b88      	ldr	r3, [pc, #544]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0f1      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ef0:	4b85      	ldr	r3, [pc, #532]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	22f8      	movs	r2, #248	; 0xf8
 8001ef6:	4393      	bics	r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	00da      	lsls	r2, r3, #3
 8001f00:	4b81      	ldr	r3, [pc, #516]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34
 8001f06:	e034      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	3305      	adds	r3, #5
 8001f0e:	d111      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f10:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f14:	4b7c      	ldr	r3, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f16:	2104      	movs	r1, #4
 8001f18:	438a      	bics	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f1c:	4b7a      	ldr	r3, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f20:	22f8      	movs	r2, #248	; 0xf8
 8001f22:	4393      	bics	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	00da      	lsls	r2, r3, #3
 8001f2c:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	635a      	str	r2, [r3, #52]	; 0x34
 8001f32:	e01e      	b.n	8001f72 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f34:	4b74      	ldr	r3, [pc, #464]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f38:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f3a:	2104      	movs	r1, #4
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f40:	4b71      	ldr	r3, [pc, #452]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f44:	4b70      	ldr	r3, [pc, #448]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7fe fe10 	bl	8000b70 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f56:	f7fe fe0b 	bl	8000b70 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e111      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f68:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f1      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2220      	movs	r2, #32
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d05c      	beq.n	8002036 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f7c:	4b62      	ldr	r3, [pc, #392]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	220c      	movs	r2, #12
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d00e      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f88:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	220c      	movs	r2, #12
 8001f8e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d114      	bne.n	8001fbe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f94:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	23c0      	movs	r3, #192	; 0xc0
 8001f9a:	025b      	lsls	r3, r3, #9
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	025b      	lsls	r3, r3, #9
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d10b      	bne.n	8001fbe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fa6:	4b58      	ldr	r3, [pc, #352]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d040      	beq.n	8002034 <HAL_RCC_OscConfig+0x5a8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d03c      	beq.n	8002034 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0e6      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01b      	beq.n	8001ffe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fc6:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0249      	lsls	r1, r1, #9
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fdcc 	bl	8000b70 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fde:	f7fe fdc7 	bl	8000b70 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0cd      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ff0:	4b45      	ldr	r3, [pc, #276]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x552>
 8001ffc:	e01b      	b.n	8002036 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ffe:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8002000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8002004:	4943      	ldr	r1, [pc, #268]	; (8002114 <HAL_RCC_OscConfig+0x688>)
 8002006:	400a      	ands	r2, r1
 8002008:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fdb1 	bl	8000b70 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002014:	f7fe fdac 	bl	8000b70 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0b2      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	4013      	ands	r3, r2
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x588>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002034:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d100      	bne.n	8002040 <HAL_RCC_OscConfig+0x5b4>
 800203e:	e0a4      	b.n	800218a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	4b31      	ldr	r3, [pc, #196]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	220c      	movs	r2, #12
 8002046:	4013      	ands	r3, r2
 8002048:	2b08      	cmp	r3, #8
 800204a:	d100      	bne.n	800204e <HAL_RCC_OscConfig+0x5c2>
 800204c:	e078      	b.n	8002140 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b02      	cmp	r3, #2
 8002054:	d14c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 800205c:	492e      	ldr	r1, [pc, #184]	; (8002118 <HAL_RCC_OscConfig+0x68c>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fd85 	bl	8000b70 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe fd80 	bl	8000b70 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e086      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	049b      	lsls	r3, r3, #18
 8002086:	4013      	ands	r3, r2
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	220f      	movs	r2, #15
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 800209a:	430a      	orrs	r2, r1
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_RCC_OscConfig+0x690>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	431a      	orrs	r2, r3
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	0449      	lsls	r1, r1, #17
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fd53 	bl	8000b70 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d0:	f7fe fd4e 	bl	8000b70 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e054      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	049b      	lsls	r3, r3, #18
 80020ea:	4013      	ands	r3, r2
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x644>
 80020ee:	e04c      	b.n	800218a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <HAL_RCC_OscConfig+0x68c>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fd38 	bl	8000b70 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x6a6>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	40021000 	.word	0x40021000
 800210c:	00001388 	.word	0x00001388
 8002110:	efffffff 	.word	0xefffffff
 8002114:	fffeffff 	.word	0xfffeffff
 8002118:	feffffff 	.word	0xfeffffff
 800211c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe fd26 	bl	8000b70 <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e02c      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_RCC_OscConfig+0x708>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	049b      	lsls	r3, r3, #18
 800213a:	4013      	ands	r3, r2
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x694>
 800213e:	e024      	b.n	800218a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e01f      	b.n	800218c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x708>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x708>)
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	23c0      	movs	r3, #192	; 0xc0
 800215c:	025b      	lsls	r3, r3, #9
 800215e:	401a      	ands	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	429a      	cmp	r2, r3
 8002166:	d10e      	bne.n	8002186 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	220f      	movs	r2, #15
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d107      	bne.n	8002186 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	23f0      	movs	r3, #240	; 0xf0
 800217a:	039b      	lsls	r3, r3, #14
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b008      	add	sp, #32
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0bf      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d911      	bls.n	80021de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4393      	bics	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021cc:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0a6      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d015      	beq.n	8002214 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2204      	movs	r2, #4
 80021ee:	4013      	ands	r3, r2
 80021f0:	d006      	beq.n	8002200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021f2:	4b51      	ldr	r3, [pc, #324]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 80021f8:	21e0      	movs	r1, #224	; 0xe0
 80021fa:	00c9      	lsls	r1, r1, #3
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b4d      	ldr	r3, [pc, #308]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	22f0      	movs	r2, #240	; 0xf0
 8002206:	4393      	bics	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	d04c      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b44      	ldr	r3, [pc, #272]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	029b      	lsls	r3, r3, #10
 800222e:	4013      	ands	r3, r2
 8002230:	d120      	bne.n	8002274 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07a      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	049b      	lsls	r3, r3, #18
 8002246:	4013      	ands	r3, r2
 8002248:	d114      	bne.n	8002274 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06e      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	4013      	ands	r3, r2
 8002260:	d108      	bne.n	8002274 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e062      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2202      	movs	r2, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e05b      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2203      	movs	r2, #3
 800227a:	4393      	bics	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002288:	f7fe fc72 	bl	8000b70 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002290:	e009      	b.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002292:	f7fe fc6d 	bl	8000b70 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	4a27      	ldr	r2, [pc, #156]	; (800233c <HAL_RCC_ClockConfig+0x1a4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e042      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	220c      	movs	r2, #12
 80022ac:	401a      	ands	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1ec      	bne.n	8002292 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d211      	bcs.n	80022ea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4393      	bics	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_RCC_ClockConfig+0x19c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2201      	movs	r2, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e020      	b.n	800232c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2204      	movs	r2, #4
 80022f0:	4013      	ands	r3, r2
 80022f2:	d009      	beq.n	8002308 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_RCC_ClockConfig+0x1a8>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002308:	f000 f820 	bl	800234c <HAL_RCC_GetSysClockFreq>
 800230c:	0001      	movs	r1, r0
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x1a0>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	220f      	movs	r2, #15
 8002316:	4013      	ands	r3, r2
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x1ac>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	000a      	movs	r2, r1
 800231e:	40da      	lsrs	r2, r3
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1b0>)
 8002322:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002324:	2003      	movs	r0, #3
 8002326:	f7fe fbdd 	bl	8000ae4 <HAL_InitTick>
  
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	00001388 	.word	0x00001388
 8002340:	fffff8ff 	.word	0xfffff8ff
 8002344:	08002f14 	.word	0x08002f14
 8002348:	20000000 	.word	0x20000000

0800234c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	220c      	movs	r2, #12
 8002370:	4013      	ands	r3, r2
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d046      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0xb8>
 8002376:	d848      	bhi.n	800240a <HAL_RCC_GetSysClockFreq+0xbe>
 8002378:	2b04      	cmp	r3, #4
 800237a:	d002      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0x36>
 800237c:	2b08      	cmp	r3, #8
 800237e:	d003      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x3c>
 8002380:	e043      	b.n	800240a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002384:	613b      	str	r3, [r7, #16]
      break;
 8002386:	e043      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	0c9b      	lsrs	r3, r3, #18
 800238c:	220f      	movs	r2, #15
 800238e:	4013      	ands	r3, r2
 8002390:	4a24      	ldr	r2, [pc, #144]	; (8002424 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	220f      	movs	r2, #15
 800239c:	4013      	ands	r3, r2
 800239e:	4a22      	ldr	r2, [pc, #136]	; (8002428 <HAL_RCC_GetSysClockFreq+0xdc>)
 80023a0:	5cd3      	ldrb	r3, [r2, r3]
 80023a2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	23c0      	movs	r3, #192	; 0xc0
 80023a8:	025b      	lsls	r3, r3, #9
 80023aa:	401a      	ands	r2, r3
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	025b      	lsls	r3, r3, #9
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d109      	bne.n	80023c8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	481a      	ldr	r0, [pc, #104]	; (8002420 <HAL_RCC_GetSysClockFreq+0xd4>)
 80023b8:	f7fd fea6 	bl	8000108 <__udivsi3>
 80023bc:	0003      	movs	r3, r0
 80023be:	001a      	movs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4353      	muls	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e01a      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	401a      	ands	r2, r3
 80023d0:	23c0      	movs	r3, #192	; 0xc0
 80023d2:	025b      	lsls	r3, r3, #9
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d109      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4814      	ldr	r0, [pc, #80]	; (800242c <HAL_RCC_GetSysClockFreq+0xe0>)
 80023dc:	f7fd fe94 	bl	8000108 <__udivsi3>
 80023e0:	0003      	movs	r3, r0
 80023e2:	001a      	movs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4353      	muls	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e008      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	480c      	ldr	r0, [pc, #48]	; (8002420 <HAL_RCC_GetSysClockFreq+0xd4>)
 80023f0:	f7fd fe8a 	bl	8000108 <__udivsi3>
 80023f4:	0003      	movs	r3, r0
 80023f6:	001a      	movs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4353      	muls	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	613b      	str	r3, [r7, #16]
      break;
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002406:	613b      	str	r3, [r7, #16]
      break;
 8002408:	e002      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetSysClockFreq+0xd4>)
 800240c:	613b      	str	r3, [r7, #16]
      break;
 800240e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002410:	693b      	ldr	r3, [r7, #16]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40021000 	.word	0x40021000
 8002420:	007a1200 	.word	0x007a1200
 8002424:	08002f24 	.word	0x08002f24
 8002428:	08002f34 	.word	0x08002f34
 800242c:	02dc6c00 	.word	0x02dc6c00

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	025b      	lsls	r3, r3, #9
 8002448:	4013      	ands	r3, r2
 800244a:	d100      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800244c:	e08e      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2017      	movs	r0, #23
 8002450:	183b      	adds	r3, r7, r0
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	055b      	lsls	r3, r3, #21
 800245e:	4013      	ands	r3, r2
 8002460:	d110      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0549      	lsls	r1, r1, #21
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
 8002470:	4b60      	ldr	r3, [pc, #384]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	055b      	lsls	r3, r3, #21
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	183b      	adds	r3, r7, r0
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d11a      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002490:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0049      	lsls	r1, r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7fe fb67 	bl	8000b70 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	e008      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a8:	f7fe fb62 	bl	8000b70 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e097      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b4f      	ldr	r3, [pc, #316]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024c6:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	23c0      	movs	r3, #192	; 0xc0
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d034      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	23c0      	movs	r3, #192	; 0xc0
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d02c      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a43      	ldr	r2, [pc, #268]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0249      	lsls	r1, r1, #9
 80024fc:	430a      	orrs	r2, r1
 80024fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002500:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002506:	493e      	ldr	r1, [pc, #248]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002508:	400a      	ands	r2, r1
 800250a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe fb29 	bl	8000b70 <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e009      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fe fb24 	bl	8000b70 <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	4a35      	ldr	r2, [pc, #212]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e058      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d0f0      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002548:	4013      	ands	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002552:	430a      	orrs	r2, r1
 8002554:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002556:	2317      	movs	r3, #23
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002566:	4928      	ldr	r1, [pc, #160]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002568:	400a      	ands	r2, r1
 800256a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	2203      	movs	r2, #3
 800257c:	4393      	bics	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002586:	430a      	orrs	r2, r1
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2220      	movs	r2, #32
 8002590:	4013      	ands	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	2210      	movs	r2, #16
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	4013      	ands	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	4393      	bics	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4013      	ands	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	2240      	movs	r2, #64	; 0x40
 80025da:	4393      	bics	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b006      	add	sp, #24
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40007000 	.word	0x40007000
 80025fc:	fffffcff 	.word	0xfffffcff
 8002600:	fffeffff 	.word	0xfffeffff
 8002604:	00001388 	.word	0x00001388
 8002608:	efffffff 	.word	0xefffffff

0800260c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002614:	230f      	movs	r3, #15
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e081      	b.n	800272a <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7f5b      	ldrb	r3, [r3, #29]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d106      	bne.n	800263e <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe f9a9 	bl	8000990 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2210      	movs	r2, #16
 800264c:	4013      	ands	r3, r2
 800264e:	2b10      	cmp	r3, #16
 8002650:	d05c      	beq.n	800270c <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	22ca      	movs	r2, #202	; 0xca
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2253      	movs	r2, #83	; 0x53
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002662:	250f      	movs	r5, #15
 8002664:	197c      	adds	r4, r7, r5
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fb6f 	bl	8002d4c <RTC_EnterInitMode>
 800266e:	0003      	movs	r3, r0
 8002670:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002672:	0028      	movs	r0, r5
 8002674:	183b      	adds	r3, r7, r0
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d12c      	bne.n	80026d6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	492b      	ldr	r1, [pc, #172]	; (8002734 <HAL_RTC_Init+0x128>)
 8002688:	400a      	ands	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	041a      	lsls	r2, r3, #16
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80026c8:	183c      	adds	r4, r7, r0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fb80 	bl	8002dd2 <RTC_ExitInitMode>
 80026d2:	0003      	movs	r3, r0
 80026d4:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80026d6:	230f      	movs	r3, #15
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4913      	ldr	r1, [pc, #76]	; (8002738 <HAL_RTC_Init+0x12c>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
 800270a:	e003      	b.n	8002714 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800270c:	230f      	movs	r3, #15
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002714:	230f      	movs	r3, #15
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002724:	230f      	movs	r3, #15
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	781b      	ldrb	r3, [r3, #0]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bdb0      	pop	{r4, r5, r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	ff8fffbf 	.word	0xff8fffbf
 8002738:	fffbffff 	.word	0xfffbffff

0800273c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	7f1b      	ldrb	r3, [r3, #28]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_RTC_SetTime+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e08e      	b.n	8002876 <HAL_RTC_SetTime+0x13a>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2202      	movs	r2, #2
 8002762:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d125      	bne.n	80027b6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	d102      	bne.n	800277c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2200      	movs	r2, #0
 800277a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 fb4f 	bl	8002e24 <RTC_ByteToBcd2>
 8002786:	0003      	movs	r3, r0
 8002788:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fb48 	bl	8002e24 <RTC_ByteToBcd2>
 8002794:	0003      	movs	r3, r0
 8002796:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002798:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	789b      	ldrb	r3, [r3, #2]
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 fb40 	bl	8002e24 <RTC_ByteToBcd2>
 80027a4:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027a6:	0022      	movs	r2, r4
 80027a8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	78db      	ldrb	r3, [r3, #3]
 80027ae:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e017      	b.n	80027e6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2240      	movs	r2, #64	; 0x40
 80027be:	4013      	ands	r3, r2
 80027c0:	d102      	bne.n	80027c8 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2200      	movs	r2, #0
 80027c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027d4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	78db      	ldrb	r3, [r3, #3]
 80027e0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	22ca      	movs	r2, #202	; 0xca
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2253      	movs	r2, #83	; 0x53
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027f6:	2513      	movs	r5, #19
 80027f8:	197c      	adds	r4, r7, r5
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 faa5 	bl	8002d4c <RTC_EnterInitMode>
 8002802:	0003      	movs	r3, r0
 8002804:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002806:	0028      	movs	r0, r5
 8002808:	183b      	adds	r3, r7, r0
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d120      	bne.n	8002852 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	491a      	ldr	r1, [pc, #104]	; (8002880 <HAL_RTC_SetTime+0x144>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <HAL_RTC_SetTime+0x148>)
 8002828:	400a      	ands	r2, r1
 800282a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	431a      	orrs	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002844:	183c      	adds	r4, r7, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	0018      	movs	r0, r3
 800284a:	f000 fac2 	bl	8002dd2 <RTC_ExitInitMode>
 800284e:	0003      	movs	r3, r0
 8002850:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002852:	2313      	movs	r3, #19
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	22ff      	movs	r2, #255	; 0xff
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]

  return status;
 8002870:	2313      	movs	r3, #19
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	781b      	ldrb	r3, [r3, #0]
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b006      	add	sp, #24
 800287c:	bdb0      	pop	{r4, r5, r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	007f7f7f 	.word	0x007f7f7f
 8002884:	fffbffff 	.word	0xfffbffff

08002888 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	7f1b      	ldrb	r3, [r3, #28]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_RTC_SetDate+0x1c>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e07a      	b.n	800299a <HAL_RTC_SetDate+0x112>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2202      	movs	r2, #2
 80028ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10e      	bne.n	80028d4 <HAL_RTC_SetDate+0x4c>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	001a      	movs	r2, r3
 80028bc:	2310      	movs	r3, #16
 80028be:	4013      	ands	r3, r2
 80028c0:	d008      	beq.n	80028d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2210      	movs	r2, #16
 80028c8:	4393      	bics	r3, r2
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	330a      	adds	r3, #10
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11c      	bne.n	8002914 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	78db      	ldrb	r3, [r3, #3]
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 faa0 	bl	8002e24 <RTC_ByteToBcd2>
 80028e4:	0003      	movs	r3, r0
 80028e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 fa99 	bl	8002e24 <RTC_ByteToBcd2>
 80028f2:	0003      	movs	r3, r0
 80028f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80028f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	789b      	ldrb	r3, [r3, #2]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 fa91 	bl	8002e24 <RTC_ByteToBcd2>
 8002902:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002904:	0022      	movs	r2, r4
 8002906:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00e      	b.n	8002932 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	78db      	ldrb	r3, [r3, #3]
 8002918:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002920:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002926:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	22ca      	movs	r2, #202	; 0xca
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2253      	movs	r2, #83	; 0x53
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002942:	2513      	movs	r5, #19
 8002944:	197c      	adds	r4, r7, r5
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f9ff 	bl	8002d4c <RTC_EnterInitMode>
 800294e:	0003      	movs	r3, r0
 8002950:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002952:	0028      	movs	r0, r5
 8002954:	183b      	adds	r3, r7, r0
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10c      	bne.n	8002976 <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4910      	ldr	r1, [pc, #64]	; (80029a4 <HAL_RTC_SetDate+0x11c>)
 8002964:	400a      	ands	r2, r1
 8002966:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002968:	183c      	adds	r4, r7, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 fa30 	bl	8002dd2 <RTC_ExitInitMode>
 8002972:	0003      	movs	r3, r0
 8002974:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002976:	2313      	movs	r3, #19
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	22ff      	movs	r2, #255	; 0xff
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]

  return status;
 8002994:	2313      	movs	r3, #19
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b006      	add	sp, #24
 80029a0:	bdb0      	pop	{r4, r5, r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	00ffff3f 	.word	0x00ffff3f

080029a8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80029b4:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <HAL_RTC_SetAlarm_IT+0x1e4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	22fa      	movs	r2, #250	; 0xfa
 80029ba:	01d1      	lsls	r1, r2, #7
 80029bc:	0018      	movs	r0, r3
 80029be:	f7fd fba3 	bl	8000108 <__udivsi3>
 80029c2:	0003      	movs	r3, r0
 80029c4:	001a      	movs	r2, r3
 80029c6:	0013      	movs	r3, r2
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	7f1b      	ldrb	r3, [r3, #28]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_RTC_SetAlarm_IT+0x40>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0cd      	b.n	8002b84 <HAL_RTC_SetAlarm_IT+0x1dc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2202      	movs	r2, #2
 80029f2:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d136      	bne.n	8002a68 <HAL_RTC_SetAlarm_IT+0xc0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2240      	movs	r2, #64	; 0x40
 8002a02:	4013      	ands	r3, r2
 8002a04:	d102      	bne.n	8002a0c <HAL_RTC_SetAlarm_IT+0x64>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fa07 	bl	8002e24 <RTC_ByteToBcd2>
 8002a16:	0003      	movs	r3, r0
 8002a18:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fa00 	bl	8002e24 <RTC_ByteToBcd2>
 8002a24:	0003      	movs	r3, r0
 8002a26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002a28:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	789b      	ldrb	r3, [r3, #2]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f9f8 	bl	8002e24 <RTC_ByteToBcd2>
 8002a34:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002a36:	0022      	movs	r2, r4
 8002a38:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	78db      	ldrb	r3, [r3, #3]
 8002a3e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002a40:	431a      	orrs	r2, r3
 8002a42:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2220      	movs	r2, #32
 8002a48:	5c9b      	ldrb	r3, [r3, r2]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f9ea 	bl	8002e24 <RTC_ByteToBcd2>
 8002a50:	0003      	movs	r3, r0
 8002a52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002a54:	0022      	movs	r2, r4
 8002a56:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002a5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e022      	b.n	8002aae <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2240      	movs	r2, #64	; 0x40
 8002a70:	4013      	ands	r3, r2
 8002a72:	d102      	bne.n	8002a7a <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a86:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002a8c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	78db      	ldrb	r3, [r3, #3]
 8002a92:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002a94:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2120      	movs	r1, #32
 8002a9a:	5c5b      	ldrb	r3, [r3, r1]
 8002a9c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002a9e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002aa4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	22ca      	movs	r2, #202	; 0xca
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2253      	movs	r2, #83	; 0x53
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	492e      	ldr	r1, [pc, #184]	; (8002b90 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	492a      	ldr	r1, [pc, #168]	; (8002b94 <HAL_RTC_SetAlarm_IT+0x1ec>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10b      	bne.n	8002b12 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	22ff      	movs	r2, #255	; 0xff
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2203      	movs	r2, #3
 8002b06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e038      	b.n	8002b84 <HAL_RTC_SetAlarm_IT+0x1dc>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d0e7      	beq.n	8002aee <HAL_RTC_SetAlarm_IT+0x146>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	0049      	lsls	r1, r1, #1
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2180      	movs	r1, #128	; 0x80
 8002b4c:	0149      	lsls	r1, r1, #5
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	0289      	lsls	r1, r1, #10
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8002b66:	2180      	movs	r1, #128	; 0x80
 8002b68:	0289      	lsls	r1, r1, #10
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b009      	add	sp, #36	; 0x24
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	fffffeff 	.word	0xfffffeff
 8002b94:	fffffe7f 	.word	0xfffffe7f
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  sAlarm->Alarm = RTC_ALARM_A;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2280      	movs	r2, #128	; 0x80
 8002bb6:	0052      	lsls	r2, r2, #1
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	617b      	str	r3, [r7, #20]
  subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	045b      	lsls	r3, r3, #17
 8002bca:	0c5b      	lsrs	r3, r3, #17
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	223f      	movs	r2, #63	; 0x3f
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	227f      	movs	r2, #127	; 0x7f
 8002be6:	4013      	ands	r3, r2
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	227f      	movs	r2, #127	; 0x7f
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	0d9b      	lsrs	r3, r3, #22
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2201      	movs	r2, #1
 8002c04:	4013      	ands	r3, r2
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	0e1b      	lsrs	r3, r3, #24
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	223f      	movs	r2, #63	; 0x3f
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	b2d9      	uxtb	r1, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2220      	movs	r2, #32
 8002c22:	5499      	strb	r1, [r3, r2]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_RTC_GetAlarm+0xfc>)
 8002c34:	401a      	ands	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d125      	bne.n	8002c8c <HAL_RTC_GetAlarm+0xf0>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 f90e 	bl	8002e66 <RTC_Bcd2ToByte>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f905 	bl	8002e66 <RTC_Bcd2ToByte>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	001a      	movs	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	789b      	ldrb	r3, [r3, #2]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f8fc 	bl	8002e66 <RTC_Bcd2ToByte>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	001a      	movs	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	5c9b      	ldrb	r3, [r3, r2]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f8f2 	bl	8002e66 <RTC_Bcd2ToByte>
 8002c82:	0003      	movs	r3, r0
 8002c84:	0019      	movs	r1, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b006      	add	sp, #24
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	80808080 	.word	0x80808080

08002c9c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_RTC_AlarmIRQHandler+0x58>)
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	0292      	lsls	r2, r2, #10
 8002caa:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	015b      	lsls	r3, r3, #5
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d014      	beq.n	8002ce4 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7fd fa9e 	bl	8000220 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	775a      	strb	r2, [r3, #29]
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40010400 	.word	0x40010400
 8002cf8:	fffffe7f 	.word	0xfffffe7f

08002cfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_RTC_WaitForSynchro+0x4c>)
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d10:	f7fd ff2e 	bl	8000b70 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d18:	e00a      	b.n	8002d30 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d1a:	f7fd ff29 	bl	8000b70 <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	23fa      	movs	r3, #250	; 0xfa
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d901      	bls.n	8002d30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e006      	b.n	8002d3e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d0ee      	beq.n	8002d1a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	00017959 	.word	0x00017959

08002d4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	230f      	movs	r3, #15
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d12b      	bne.n	8002dc4 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d7c:	f7fd fef8 	bl	8000b70 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d84:	e013      	b.n	8002dae <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d86:	f7fd fef3 	bl	8000b70 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	200f      	movs	r0, #15
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	1839      	adds	r1, r7, r0
 8002d96:	7809      	ldrb	r1, [r1, #0]
 8002d98:	7019      	strb	r1, [r3, #0]
 8002d9a:	23fa      	movs	r3, #250	; 0xfa
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d905      	bls.n	8002dae <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2240      	movs	r2, #64	; 0x40
 8002db6:	4013      	ands	r3, r2
 8002db8:	d104      	bne.n	8002dc4 <RTC_EnterInitMode+0x78>
 8002dba:	230f      	movs	r3, #15
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d1e0      	bne.n	8002d86 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	240f      	movs	r4, #15
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	438a      	bics	r2, r1
 8002df0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d10b      	bne.n	8002e16 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff ff7b 	bl	8002cfc <HAL_RTC_WaitForSynchro>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d005      	beq.n	8002e16 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002e10:	193b      	adds	r3, r7, r4
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b005      	add	sp, #20
 8002e22:	bd90      	pop	{r4, r7, pc}

08002e24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	1dfb      	adds	r3, r7, #7
 8002e2e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002e34:	e007      	b.n	8002e46 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	1dfa      	adds	r2, r7, #7
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	3a0a      	subs	r2, #10
 8002e44:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b09      	cmp	r3, #9
 8002e4c:	d8f3      	bhi.n	8002e36 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	b2db      	uxtb	r3, r3
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002e76:	1dfb      	adds	r3, r7, #7
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	001a      	movs	r2, r3
 8002e80:	0013      	movs	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	210f      	movs	r1, #15
 8002e94:	400b      	ands	r3, r1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	18d3      	adds	r3, r2, r3
 8002e9a:	b2db      	uxtb	r3, r3
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	4d0c      	ldr	r5, [pc, #48]	; (8002edc <__libc_init_array+0x38>)
 8002eaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	42a6      	cmp	r6, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	f000 f821 	bl	8002efc <_init>
 8002eba:	4d0a      	ldr	r5, [pc, #40]	; (8002ee4 <__libc_init_array+0x40>)
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	; (8002ee8 <__libc_init_array+0x44>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	42a6      	cmp	r6, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	00b3      	lsls	r3, r6, #2
 8002eca:	58eb      	ldr	r3, [r5, r3]
 8002ecc:	4798      	blx	r3
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	00b3      	lsls	r3, r6, #2
 8002ed4:	58eb      	ldr	r3, [r5, r3]
 8002ed6:	4798      	blx	r3
 8002ed8:	3601      	adds	r6, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08002f44 	.word	0x08002f44
 8002ee0:	08002f44 	.word	0x08002f44
 8002ee4:	08002f44 	.word	0x08002f44
 8002ee8:	08002f48 	.word	0x08002f48

08002eec <memset>:
 8002eec:	0003      	movs	r3, r0
 8002eee:	1882      	adds	r2, r0, r2
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <memset+0xa>
 8002ef4:	4770      	bx	lr
 8002ef6:	7019      	strb	r1, [r3, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	e7f9      	b.n	8002ef0 <memset+0x4>

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
