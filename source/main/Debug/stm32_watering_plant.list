
stm32_watering_plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d20  08005d20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d20  08005d20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d20  08005d20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000070  08005d98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005d98  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b15  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241d  00000000  00000000  00030bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00032fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00033f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae53  00000000  00000000  00034dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a8  00000000  00000000  0004fc2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b023  00000000  00000000  00061cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fccf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004118  00000000  00000000  000fcd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bd0 	.word	0x08005bd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005bd0 	.word	0x08005bd0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit( &huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY );
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <_write+0x28>)
 800024c:	f003 fe5a 	bl	8003f04 <HAL_UART_Transmit>
	return len;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000218 	.word	0x20000218

08000260 <HAL_TIM_PeriodElapsedCallback>:


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b091      	sub	sp, #68	; 0x44
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint32_t delay_tick;

  //Check is ready to work
  if(isInit_over)
 8000268:	4b8d      	ldr	r3, [pc, #564]	; (80004a0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d100      	bne.n	8000272 <HAL_TIM_PeriodElapsedCallback+0x12>
 8000270:	e111      	b.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x236>
  {
	  // Check which version of the timer triggered this callback and toggle LED
	  if (htim == &htim16 )
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	4b8b      	ldr	r3, [pc, #556]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000276:	429a      	cmp	r2, r3
 8000278:	d000      	beq.n	800027c <HAL_TIM_PeriodElapsedCallback+0x1c>
 800027a:	e079      	b.n	8000370 <HAL_TIM_PeriodElapsedCallback+0x110>
	  {
	  /**
	   * test soil moisture
		*/
		  // get raw data from sensors
		  HAL_ADC_Start(&hadc);
 800027c:	4b8a      	ldr	r3, [pc, #552]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800027e:	0018      	movs	r0, r3
 8000280:	f001 f8ae 	bl	80013e0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000284:	2301      	movs	r3, #1
 8000286:	425a      	negs	r2, r3
 8000288:	4b87      	ldr	r3, [pc, #540]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800028a:	0011      	movs	r1, r2
 800028c:	0018      	movs	r0, r3
 800028e:	f001 f8fb 	bl	8001488 <HAL_ADC_PollForConversion>
		  int moist_1_sens = HAL_ADC_GetValue(&hadc);
 8000292:	4b85      	ldr	r3, [pc, #532]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000294:	0018      	movs	r0, r3
 8000296:	f001 f98f 	bl	80015b8 <HAL_ADC_GetValue>
 800029a:	0003      	movs	r3, r0
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
		  HAL_ADC_Start(&hadc);
 800029e:	4b82      	ldr	r3, [pc, #520]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80002a0:	0018      	movs	r0, r3
 80002a2:	f001 f89d 	bl	80013e0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80002a6:	2301      	movs	r3, #1
 80002a8:	425a      	negs	r2, r3
 80002aa:	4b7f      	ldr	r3, [pc, #508]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80002ac:	0011      	movs	r1, r2
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 f8ea 	bl	8001488 <HAL_ADC_PollForConversion>
		  int moist_2_sens = HAL_ADC_GetValue(&hadc);
 80002b4:	4b7c      	ldr	r3, [pc, #496]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f97e 	bl	80015b8 <HAL_ADC_GetValue>
 80002bc:	0003      	movs	r3, r0
 80002be:	637b      	str	r3, [r7, #52]	; 0x34
		  //convert values to readable ones
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80002c0:	497a      	ldr	r1, [pc, #488]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002c2:	4b7b      	ldr	r3, [pc, #492]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f002 fde2 	bl	8002e90 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80002cc:	4979      	ldr	r1, [pc, #484]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002ce:	4b78      	ldr	r3, [pc, #480]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f002 feca 	bl	800306c <HAL_RTC_GetDate>
		  printf("Timer16\r\n");
 80002d8:	4b77      	ldr	r3, [pc, #476]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f004 fada 	bl	8004894 <puts>
		  printf("Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 80002e0:	4b74      	ldr	r3, [pc, #464]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002e2:	789b      	ldrb	r3, [r3, #2]
 80002e4:	0019      	movs	r1, r3
 80002e6:	4b73      	ldr	r3, [pc, #460]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002e8:	785b      	ldrb	r3, [r3, #1]
 80002ea:	001a      	movs	r2, r3
 80002ec:	4b71      	ldr	r3, [pc, #452]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80002ee:	78db      	ldrb	r3, [r3, #3]
 80002f0:	4872      	ldr	r0, [pc, #456]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80002f2:	f004 fa43 	bl	800477c <iprintf>
		  printf("Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 80002f6:	4b6d      	ldr	r3, [pc, #436]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	0019      	movs	r1, r3
 80002fc:	4b6b      	ldr	r3, [pc, #428]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	001a      	movs	r2, r3
 8000302:	4b6a      	ldr	r3, [pc, #424]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000304:	789b      	ldrb	r3, [r3, #2]
 8000306:	486e      	ldr	r0, [pc, #440]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000308:	f004 fa38 	bl	800477c <iprintf>
		  delay_tick = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  while((moist_1_sens > 2000 && moist_2_sens > 2000) && delay_tick < 20000-1)
 8000310:	e008      	b.n	8000324 <HAL_TIM_PeriodElapsedCallback+0xc4>
		  {
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000312:	4b6c      	ldr	r3, [pc, #432]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000314:	2201      	movs	r2, #1
 8000316:	2108      	movs	r1, #8
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fe37 	bl	8001f8c <HAL_GPIO_WritePin>
			  delay_tick++;
 800031e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000320:	3301      	adds	r3, #1
 8000322:	63fb      	str	r3, [r7, #60]	; 0x3c
		  while((moist_1_sens > 2000 && moist_2_sens > 2000) && delay_tick < 20000-1)
 8000324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000326:	23fa      	movs	r3, #250	; 0xfa
 8000328:	00db      	lsls	r3, r3, #3
 800032a:	429a      	cmp	r2, r3
 800032c:	dd08      	ble.n	8000340 <HAL_TIM_PeriodElapsedCallback+0xe0>
 800032e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000330:	23fa      	movs	r3, #250	; 0xfa
 8000332:	00db      	lsls	r3, r3, #3
 8000334:	429a      	cmp	r2, r3
 8000336:	dd03      	ble.n	8000340 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8000338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800033a:	4a63      	ldr	r2, [pc, #396]	; (80004c8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d9e8      	bls.n	8000312 <HAL_TIM_PeriodElapsedCallback+0xb2>
		  }
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000340:	495a      	ldr	r1, [pc, #360]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000342:	4b5b      	ldr	r3, [pc, #364]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000344:	2200      	movs	r2, #0
 8000346:	0018      	movs	r0, r3
 8000348:	f002 fda2 	bl	8002e90 <HAL_RTC_GetTime>
		  printf("\t\tTime: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800034c:	4b57      	ldr	r3, [pc, #348]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	0019      	movs	r1, r3
 8000352:	4b56      	ldr	r3, [pc, #344]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000354:	785b      	ldrb	r3, [r3, #1]
 8000356:	001a      	movs	r2, r3
 8000358:	4b54      	ldr	r3, [pc, #336]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800035a:	789b      	ldrb	r3, [r3, #2]
 800035c:	485b      	ldr	r0, [pc, #364]	; (80004cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800035e:	f004 fa0d 	bl	800477c <iprintf>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000362:	4b58      	ldr	r3, [pc, #352]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000364:	2200      	movs	r2, #0
 8000366:	2108      	movs	r1, #8
 8000368:	0018      	movs	r0, r3
 800036a:	f001 fe0f 	bl	8001f8c <HAL_GPIO_WritePin>
  }
  else
  {

  }
}
 800036e:	e092      	b.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x236>
	  else if (htim == &htim2)
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4b57      	ldr	r3, [pc, #348]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000374:	429a      	cmp	r2, r3
 8000376:	d000      	beq.n	800037a <HAL_TIM_PeriodElapsedCallback+0x11a>
 8000378:	e08d      	b.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x236>
		    HAL_TIM_Base_Stop_IT(&htim2);
 800037a:	4b55      	ldr	r3, [pc, #340]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800037c:	0018      	movs	r0, r3
 800037e:	f003 f9bd 	bl	80036fc <HAL_TIM_Base_Stop_IT>
		    HAL_TIM_Base_Stop_IT(&htim16);
 8000382:	4b48      	ldr	r3, [pc, #288]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000384:	0018      	movs	r0, r3
 8000386:	f003 f9b9 	bl	80036fc <HAL_TIM_Base_Stop_IT>
			  RTC_AlarmTypeDef sAlarm = {0};
 800038a:	240c      	movs	r4, #12
 800038c:	193b      	adds	r3, r7, r4
 800038e:	0018      	movs	r0, r3
 8000390:	2328      	movs	r3, #40	; 0x28
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f004 f9e9 	bl	800476c <memset>
			  sAlarm.AlarmTime.Hours = 0x0;
 800039a:	0021      	movs	r1, r4
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
			  sAlarm.AlarmTime.Minutes = 0x5;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2205      	movs	r2, #5
 80003a6:	705a      	strb	r2, [r3, #1]
			  sAlarm.AlarmTime.Seconds = 0x0;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	709a      	strb	r2, [r3, #2]
			  sAlarm.AlarmTime.SubSeconds = 0x0;
 80003ae:	0008      	movs	r0, r1
 80003b0:	183b      	adds	r3, r7, r0
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
			  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003b6:	183b      	adds	r3, r7, r0
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
			  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003bc:	183b      	adds	r3, r7, r0
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
			  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES;
 80003c2:	183b      	adds	r3, r7, r0
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0212      	lsls	r2, r2, #8
 80003c8:	615a      	str	r2, [r3, #20]
			  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80003ca:	183b      	adds	r3, r7, r0
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
			  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80003d0:	183b      	adds	r3, r7, r0
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
			  sAlarm.AlarmDateWeekDay = 0x1;
 80003d6:	183b      	adds	r3, r7, r0
 80003d8:	2220      	movs	r2, #32
 80003da:	2101      	movs	r1, #1
 80003dc:	5499      	strb	r1, [r3, r2]
			  sAlarm.Alarm = RTC_ALARM_A;
 80003de:	0001      	movs	r1, r0
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	0052      	lsls	r2, r2, #1
 80003e6:	625a      	str	r2, [r3, #36]	; 0x24
			  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	4b31      	ldr	r3, [pc, #196]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	0018      	movs	r0, r3
 80003f0:	f002 fe8c 	bl	800310c <HAL_RTC_SetAlarm_IT>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <HAL_TIM_PeriodElapsedCallback+0x19c>
				Error_Handler();
 80003f8:	f000 fbe6 	bl	8000bc8 <Error_Handler>
		    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fdf1 	bl	8001fe8 <HAL_PWR_DisableWakeUpPin>
		    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fdec 	bl	8001fe8 <HAL_PWR_DisableWakeUpPin>
		    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN4);
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	011b      	lsls	r3, r3, #4
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fde7 	bl	8001fe8 <HAL_PWR_DisableWakeUpPin>
		    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN6);
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	019b      	lsls	r3, r3, #6
 800041e:	0018      	movs	r0, r3
 8000420:	f001 fde2 	bl	8001fe8 <HAL_PWR_DisableWakeUpPin>
		    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN7);
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	01db      	lsls	r3, r3, #7
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fddd 	bl	8001fe8 <HAL_PWR_DisableWakeUpPin>
		    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800042e:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000430:	2200      	movs	r2, #0
 8000432:	2108      	movs	r1, #8
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fda9 	bl	8001f8c <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 800043a:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800043c:	2200      	movs	r2, #0
 800043e:	2110      	movs	r1, #16
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fda3 	bl	8001f8c <HAL_GPIO_WritePin>
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000446:	4919      	ldr	r1, [pc, #100]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800044a:	2200      	movs	r2, #0
 800044c:	0018      	movs	r0, r3
 800044e:	f002 fd1f 	bl	8002e90 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000452:	4918      	ldr	r1, [pc, #96]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000456:	2200      	movs	r2, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f002 fe07 	bl	800306c <HAL_RTC_GetDate>
			printf("Timer2\r\n");
 800045e:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000460:	0018      	movs	r0, r3
 8000462:	f004 fa17 	bl	8004894 <puts>
			printf("Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000468:	789b      	ldrb	r3, [r3, #2]
 800046a:	0019      	movs	r1, r3
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800046e:	785b      	ldrb	r3, [r3, #1]
 8000470:	001a      	movs	r2, r3
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000474:	78db      	ldrb	r3, [r3, #3]
 8000476:	4811      	ldr	r0, [pc, #68]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000478:	f004 f980 	bl	800477c <iprintf>
			printf("Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	0019      	movs	r1, r3
 8000482:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000484:	785b      	ldrb	r3, [r3, #1]
 8000486:	001a      	movs	r2, r3
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	480c      	ldr	r0, [pc, #48]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800048e:	f004 f975 	bl	800477c <iprintf>
		    HAL_PWR_EnterSTANDBYMode();
 8000492:	f001 fdbb 	bl	800200c <HAL_PWR_EnterSTANDBYMode>
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	b011      	add	sp, #68	; 0x44
 800049c:	bd90      	pop	{r4, r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	200002a0 	.word	0x200002a0
 80004a4:	200001d0 	.word	0x200001d0
 80004a8:	200000e4 	.word	0x200000e4
 80004ac:	200000cc 	.word	0x200000cc
 80004b0:	20000168 	.word	0x20000168
 80004b4:	200000e0 	.word	0x200000e0
 80004b8:	08005be8 	.word	0x08005be8
 80004bc:	08005bf4 	.word	0x08005bf4
 80004c0:	08005c0c 	.word	0x08005c0c
 80004c4:	48000400 	.word	0x48000400
 80004c8:	00004e1e 	.word	0x00004e1e
 80004cc:	08005c24 	.word	0x08005c24
 80004d0:	20000188 	.word	0x20000188
 80004d4:	08005c40 	.word	0x08005c40

080004d8 <HAL_RTC_AlarmAEventCallback>:

/**
 * Start normal routine
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	  /* Exit standby mode */
	  /* Clear the RTC Alarm interrupt flag */
	  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	22ff      	movs	r2, #255	; 0xff
 80004e8:	401a      	ands	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4928      	ldr	r1, [pc, #160]	; (8000590 <HAL_RTC_AlarmAEventCallback+0xb8>)
 80004f0:	430a      	orrs	r2, r1
 80004f2:	60da      	str	r2, [r3, #12]

	  // Re-enable all wake-up pins
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 fd65 	bl	8001fc8 <HAL_PWR_EnableWakeUpPin>
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	0018      	movs	r0, r3
 8000504:	f001 fd60 	bl	8001fc8 <HAL_PWR_EnableWakeUpPin>
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN4);
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fd5b 	bl	8001fc8 <HAL_PWR_EnableWakeUpPin>
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN6);
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	019b      	lsls	r3, r3, #6
 8000516:	0018      	movs	r0, r3
 8000518:	f001 fd56 	bl	8001fc8 <HAL_PWR_EnableWakeUpPin>
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN7);
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	01db      	lsls	r3, r3, #7
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fd51 	bl	8001fc8 <HAL_PWR_EnableWakeUpPin>


	  /* Disable SleepOnExit bit */
	  HAL_PWR_DisableSleepOnExit();
 8000526:	f001 fd87 	bl	8002038 <HAL_PWR_DisableSleepOnExit>

	  /* Disable the Alarm */
	  HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 800052a:	2380      	movs	r3, #128	; 0x80
 800052c:	005a      	lsls	r2, r3, #1
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fee4 	bl	8003300 <HAL_RTC_DeactivateAlarm>

	  /* Start a second timer interrupt to enter standby mode again */
	  HAL_TIM_Base_Start_IT(&htim2);
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <HAL_RTC_AlarmAEventCallback+0xbc>)
 800053a:	0018      	movs	r0, r3
 800053c:	f003 f892 	bl	8003664 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim16);
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000542:	0018      	movs	r0, r3
 8000544:	f003 f88e 	bl	8003664 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_RTC_AlarmAEventCallback+0xc4>)
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	0018      	movs	r0, r3
 8000550:	f001 fd1c 	bl	8001f8c <HAL_GPIO_WritePin>
	  printf("RTC\r\n");
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_RTC_AlarmAEventCallback+0xc8>)
 8000556:	0018      	movs	r0, r3
 8000558:	f004 f99c 	bl	8004894 <puts>
	  printf("Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <HAL_RTC_AlarmAEventCallback+0xcc>)
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	0019      	movs	r1, r3
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <HAL_RTC_AlarmAEventCallback+0xcc>)
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	001a      	movs	r2, r3
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_RTC_AlarmAEventCallback+0xcc>)
 800056a:	78db      	ldrb	r3, [r3, #3]
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <HAL_RTC_AlarmAEventCallback+0xd0>)
 800056e:	f004 f905 	bl	800477c <iprintf>
	  printf("Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_RTC_AlarmAEventCallback+0xd4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	0019      	movs	r1, r3
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_RTC_AlarmAEventCallback+0xd4>)
 800057a:	785b      	ldrb	r3, [r3, #1]
 800057c:	001a      	movs	r2, r3
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <HAL_RTC_AlarmAEventCallback+0xd4>)
 8000580:	789b      	ldrb	r3, [r3, #2]
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <HAL_RTC_AlarmAEventCallback+0xd8>)
 8000584:	f004 f8fa 	bl	800477c <iprintf>

}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b002      	add	sp, #8
 800058e:	bd80      	pop	{r7, pc}
 8000590:	fffffe7f 	.word	0xfffffe7f
 8000594:	20000188 	.word	0x20000188
 8000598:	200001d0 	.word	0x200001d0
 800059c:	48000400 	.word	0x48000400
 80005a0:	08005c48 	.word	0x08005c48
 80005a4:	200000e0 	.word	0x200000e0
 80005a8:	08005bf4 	.word	0x08005bf4
 80005ac:	200000cc 	.word	0x200000cc
 80005b0:	08005c0c 	.word	0x08005c0c

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fd6d 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f87b 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 faab 	bl	8000b1c <MX_GPIO_Init>
  MX_DMA_Init();
 80005c6:	f000 fa8b 	bl	8000ae0 <MX_DMA_Init>
  MX_ADC_Init();
 80005ca:	f000 f8d7 	bl	800077c <MX_ADC_Init>
  MX_RTC_Init();
 80005ce:	f000 f93d 	bl	800084c <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 fa55 	bl	8000a80 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80005d6:	f000 fa29 	bl	8000a2c <MX_TIM16_Init>
  MX_TIM2_Init();
 80005da:	f000 f9d1 	bl	8000980 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <main+0xd8>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f003 f83f 	bl	8003664 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <main+0xdc>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f003 f83b 	bl	8003664 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80005ee:	4b29      	ldr	r3, [pc, #164]	; (8000694 <main+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fcc9 	bl	8001f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80005fa:	4b26      	ldr	r3, [pc, #152]	; (8000694 <main+0xe0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fcc3 	bl	8001f8c <HAL_GPIO_WritePin>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000606:	4924      	ldr	r1, [pc, #144]	; (8000698 <main+0xe4>)
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <main+0xe8>)
 800060a:	2200      	movs	r2, #0
 800060c:	0018      	movs	r0, r3
 800060e:	f002 fc3f 	bl	8002e90 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000612:	4923      	ldr	r1, [pc, #140]	; (80006a0 <main+0xec>)
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <main+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f002 fd27 	bl	800306c <HAL_RTC_GetDate>
  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <main+0xec>)
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	001a      	movs	r2, r3
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <main+0xec>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	001c      	movs	r4, r3
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <main+0xec>)
 800062c:	78db      	ldrb	r3, [r3, #3]
 800062e:	491d      	ldr	r1, [pc, #116]	; (80006a4 <main+0xf0>)
 8000630:	481d      	ldr	r0, [pc, #116]	; (80006a8 <main+0xf4>)
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	0023      	movs	r3, r4
 8000636:	f004 f937 	bl	80048a8 <siprintf>
  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <main+0xe4>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	001a      	movs	r2, r3
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <main+0xe4>)
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	001c      	movs	r4, r3
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <main+0xe4>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	4918      	ldr	r1, [pc, #96]	; (80006ac <main+0xf8>)
 800064c:	4818      	ldr	r0, [pc, #96]	; (80006b0 <main+0xfc>)
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	0023      	movs	r3, r4
 8000652:	f004 f929 	bl	80048a8 <siprintf>
  printf("Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <main+0xec>)
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	0019      	movs	r1, r3
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <main+0xec>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	001a      	movs	r2, r3
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <main+0xec>)
 8000664:	78db      	ldrb	r3, [r3, #3]
 8000666:	480f      	ldr	r0, [pc, #60]	; (80006a4 <main+0xf0>)
 8000668:	f004 f888 	bl	800477c <iprintf>
  printf("Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <main+0xe4>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	0019      	movs	r1, r3
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <main+0xe4>)
 8000674:	785b      	ldrb	r3, [r3, #1]
 8000676:	001a      	movs	r2, r3
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <main+0xe4>)
 800067a:	789b      	ldrb	r3, [r3, #2]
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <main+0xf8>)
 800067e:	f004 f87d 	bl	800477c <iprintf>

  isInit_over = TRUE;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <main+0x100>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0xd4>
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	200001d0 	.word	0x200001d0
 8000690:	20000188 	.word	0x20000188
 8000694:	48000400 	.word	0x48000400
 8000698:	200000cc 	.word	0x200000cc
 800069c:	20000168 	.word	0x20000168
 80006a0:	200000e0 	.word	0x200000e0
 80006a4:	08005bf4 	.word	0x08005bf4
 80006a8:	200000ac 	.word	0x200000ac
 80006ac:	08005c0c 	.word	0x08005c0c
 80006b0:	2000008c 	.word	0x2000008c
 80006b4:	200002a0 	.word	0x200002a0

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b099      	sub	sp, #100	; 0x64
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	242c      	movs	r4, #44	; 0x2c
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2334      	movs	r3, #52	; 0x34
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f004 f84f 	bl	800476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	231c      	movs	r3, #28
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	0018      	movs	r0, r3
 80006d4:	2310      	movs	r3, #16
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f004 f847 	bl	800476c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	0018      	movs	r0, r3
 80006e2:	2318      	movs	r3, #24
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f004 f840 	bl	800476c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	221a      	movs	r2, #26
 80006f2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2210      	movs	r2, #16
 8000704:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2210      	movs	r2, #16
 800070a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	187b      	adds	r3, r7, r1
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fc9a 	bl	8002054 <HAL_RCC_OscConfig>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000724:	f000 fa50 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	211c      	movs	r1, #28
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2100      	movs	r1, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f002 f80a 	bl	8002760 <HAL_RCC_ClockConfig>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000750:	f000 fa3a 	bl	8000bc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0252      	lsls	r2, r2, #9
 800075a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	0018      	movs	r0, r3
 8000768:	f002 f966 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000770:	f000 fa2a 	bl	8000bc8 <Error_Handler>
  }
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b019      	add	sp, #100	; 0x64
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	0018      	movs	r0, r3
 8000786:	230c      	movs	r3, #12
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f003 ffee 	bl	800476c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_ADC_Init+0xc8>)
 8000792:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <MX_ADC_Init+0xcc>)
 8000794:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <MX_ADC_Init+0xc8>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_ADC_Init+0xc8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <MX_ADC_Init+0xc8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_ADC_Init+0xc8>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <MX_ADC_Init+0xc8>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_ADC_Init+0xc8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_ADC_Init+0xc8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_ADC_Init+0xc8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ADC_Init+0xc8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ADC_Init+0xc8>)
 80007ce:	22c2      	movs	r2, #194	; 0xc2
 80007d0:	32ff      	adds	r2, #255	; 0xff
 80007d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ADC_Init+0xc8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ADC_Init+0xc8>)
 80007dc:	2224      	movs	r2, #36	; 0x24
 80007de:	2100      	movs	r1, #0
 80007e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ADC_Init+0xc8>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC_Init+0xc8>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 fcb8 	bl	8001160 <HAL_ADC_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f9e8 	bl	8000bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2208      	movs	r2, #8
 80007fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0152      	lsls	r2, r2, #5
 8000804:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	0552      	lsls	r2, r2, #21
 800080c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_ADC_Init+0xc8>)
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fedb 	bl	80015d0 <HAL_ADC_ConfigChannel>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800081e:	f000 f9d3 	bl	8000bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2209      	movs	r2, #9
 8000826:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000828:	1d3a      	adds	r2, r7, #4
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_ADC_Init+0xc8>)
 800082c:	0011      	movs	r1, r2
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fece 	bl	80015d0 <HAL_ADC_ConfigChannel>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000838:	f000 f9c6 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000e4 	.word	0x200000e4
 8000848:	40012400 	.word	0x40012400

0800084c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b090      	sub	sp, #64	; 0x40
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000852:	232c      	movs	r3, #44	; 0x2c
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 ff85 	bl	800476c <memset>
  RTC_DateTypeDef sDate = {0};
 8000862:	2328      	movs	r3, #40	; 0x28
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800086a:	003b      	movs	r3, r7
 800086c:	0018      	movs	r0, r3
 800086e:	2328      	movs	r3, #40	; 0x28
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f003 ff7a 	bl	800476c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000878:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <MX_RTC_Init+0x12c>)
 800087a:	4a40      	ldr	r2, [pc, #256]	; (800097c <MX_RTC_Init+0x130>)
 800087c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <MX_RTC_Init+0x12c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000884:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <MX_RTC_Init+0x12c>)
 8000886:	227f      	movs	r2, #127	; 0x7f
 8000888:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <MX_RTC_Init+0x12c>)
 800088c:	22ff      	movs	r2, #255	; 0xff
 800088e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000890:	4b39      	ldr	r3, [pc, #228]	; (8000978 <MX_RTC_Init+0x12c>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000896:	4b38      	ldr	r3, [pc, #224]	; (8000978 <MX_RTC_Init+0x12c>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089c:	4b36      	ldr	r3, [pc, #216]	; (8000978 <MX_RTC_Init+0x12c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <MX_RTC_Init+0x12c>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 f9b5 	bl	8002c14 <HAL_RTC_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80008ae:	f000 f98b 	bl	8000bc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008b2:	212c      	movs	r1, #44	; 0x2c
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008d2:	1879      	adds	r1, r7, r1
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_RTC_Init+0x12c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 fa33 	bl	8002d44 <HAL_RTC_SetTime>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80008e2:	f000 f971 	bl	8000bc8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008e6:	2128      	movs	r1, #40	; 0x28
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2201      	movs	r2, #1
 80008f2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x1;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000900:	1879      	adds	r1, r7, r1
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_RTC_Init+0x12c>)
 8000904:	2201      	movs	r2, #1
 8000906:	0018      	movs	r0, r3
 8000908:	f002 fb20 	bl	8002f4c <HAL_RTC_SetDate>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000910:	f000 f95a 	bl	8000bc8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x5;
 800091a:	003b      	movs	r3, r7
 800091c:	2205      	movs	r2, #5
 800091e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000920:	003b      	movs	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000926:	003b      	movs	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800092c:	003b      	movs	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000932:	003b      	movs	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES;
 8000938:	003b      	movs	r3, r7
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	0212      	lsls	r2, r2, #8
 800093e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000940:	003b      	movs	r3, r7
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000946:	003b      	movs	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800094c:	003b      	movs	r3, r7
 800094e:	2220      	movs	r2, #32
 8000950:	2101      	movs	r1, #1
 8000952:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000954:	003b      	movs	r3, r7
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800095c:	0039      	movs	r1, r7
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_RTC_Init+0x12c>)
 8000960:	2201      	movs	r2, #1
 8000962:	0018      	movs	r0, r3
 8000964:	f002 fbd2 	bl	800310c <HAL_RTC_SetAlarm_IT>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800096c:	f000 f92c 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b010      	add	sp, #64	; 0x40
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000168 	.word	0x20000168
 800097c:	40002800 	.word	0x40002800

08000980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	2308      	movs	r3, #8
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	2310      	movs	r3, #16
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f003 feeb 	bl	800476c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000996:	003b      	movs	r3, r7
 8000998:	0018      	movs	r0, r3
 800099a:	2308      	movs	r3, #8
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f003 fee4 	bl	800476c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	05d2      	lsls	r2, r2, #23
 80009aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000-1;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <MX_TIM2_Init+0xa4>)
 80009b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000-1;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009ba:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_TIM2_Init+0xa8>)
 80009bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 fdf9 	bl	80035c4 <HAL_TIM_Base_Init>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009d6:	f000 f8f7 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009da:	2108      	movs	r1, #8
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	0152      	lsls	r2, r2, #5
 80009e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e4:	187a      	adds	r2, r7, r1
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_TIM2_Init+0xa0>)
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 ffca 	bl	8003984 <HAL_TIM_ConfigClockSource>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009f4:	f000 f8e8 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	003b      	movs	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	003b      	movs	r3, r7
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a04:	003a      	movs	r2, r7
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_TIM2_Init+0xa0>)
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f003 f9be 	bl	8003d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a14:	f000 f8d8 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000188 	.word	0x20000188
 8000a24:	00000bb7 	.word	0x00000bb7
 8000a28:	0000752f 	.word	0x0000752f

08000a2c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <MX_TIM16_Init+0x48>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000-1;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <MX_TIM16_Init+0x4c>)
 8000a3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <MX_TIM16_Init+0x50>)
 8000a46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <MX_TIM16_Init+0x44>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f002 fdb1 	bl	80035c4 <HAL_TIM_Base_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000a66:	f000 f8af 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200001d0 	.word	0x200001d0
 8000a74:	40014400 	.word	0x40014400
 8000a78:	000003e7 	.word	0x000003e7
 8000a7c:	0000270f 	.word	0x0000270f

08000a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_USART2_UART_Init+0x5c>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2296      	movs	r2, #150	; 0x96
 8000a8e:	0212      	lsls	r2, r2, #8
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f003 f9c9 	bl	8003e5c <HAL_UART_Init>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 f87b 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000218 	.word	0x20000218
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_DMA_Init+0x38>)
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_DMA_Init+0x38>)
 8000aec:	2101      	movs	r1, #1
 8000aee:	430a      	orrs	r2, r1
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_DMA_Init+0x38>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4013      	ands	r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2009      	movs	r0, #9
 8000b04:	f000 ffa2 	bl	8001a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b08:	2009      	movs	r0, #9
 8000b0a:	f000 ffb4 	bl	8001a76 <HAL_NVIC_EnableIRQ>

}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	240c      	movs	r4, #12
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	0018      	movs	r0, r3
 8000b28:	2314      	movs	r3, #20
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f003 fe1d 	bl	800476c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b34:	695a      	ldr	r2, [r3, #20]
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	03c9      	lsls	r1, r1, #15
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	615a      	str	r2, [r3, #20]
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b42:	695a      	ldr	r2, [r3, #20]
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	03db      	lsls	r3, r3, #15
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0289      	lsls	r1, r1, #10
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	029b      	lsls	r3, r3, #10
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	02c9      	lsls	r1, r1, #11
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_GPIO_Init+0xa4>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	02db      	lsls	r3, r3, #11
 8000b80:	4013      	ands	r3, r2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_GPIO_Init+0xa8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2118      	movs	r1, #24
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 f9fd 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b92:	0021      	movs	r1, r4
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2218      	movs	r2, #24
 8000b98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <MX_GPIO_Init+0xa8>)
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	f001 f882 	bl	8001cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b009      	add	sp, #36	; 0x24
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_MspInit+0x54>)
 8000bdc:	699a      	ldr	r2, [r3, #24]
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_MspInit+0x54>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	619a      	str	r2, [r3, #24]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x54>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	2201      	movs	r2, #1
 8000bec:	4013      	ands	r3, r2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x54>)
 8000bf4:	69da      	ldr	r2, [r3, #28]
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x54>)
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	0549      	lsls	r1, r1, #21
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	61da      	str	r2, [r3, #28]
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x54>)
 8000c02:	69da      	ldr	r2, [r3, #28]
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	055b      	lsls	r3, r3, #21
 8000c08:	4013      	ands	r3, r2
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2004      	movs	r0, #4
 8000c14:	f000 ff1a 	bl	8001a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f000 ff2c 	bl	8001a76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b08b      	sub	sp, #44	; 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2414      	movs	r4, #20
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 fd94 	bl	800476c <memset>
  if(hadc->Instance==ADC1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a2c      	ldr	r2, [pc, #176]	; (8000cfc <HAL_ADC_MspInit+0xd0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d152      	bne.n	8000cf4 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <HAL_ADC_MspInit+0xd4>)
 8000c50:	699a      	ldr	r2, [r3, #24]
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <HAL_ADC_MspInit+0xd4>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0089      	lsls	r1, r1, #2
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	619a      	str	r2, [r3, #24]
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <HAL_ADC_MspInit+0xd4>)
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <HAL_ADC_MspInit+0xd4>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_ADC_MspInit+0xd4>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	02c9      	lsls	r1, r1, #11
 8000c74:	430a      	orrs	r2, r1
 8000c76:	615a      	str	r2, [r3, #20]
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_ADC_MspInit+0xd4>)
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	02db      	lsls	r3, r3, #11
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = ADC_MOIST1_Pin|ADC_MOIST2_Pin;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2203      	movs	r2, #3
 8000c8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2203      	movs	r2, #3
 8000c90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <HAL_ADC_MspInit+0xd8>)
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	0010      	movs	r0, r2
 8000ca0:	f001 f80c 	bl	8001cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000ca6:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_ADC_MspInit+0xe0>)
 8000ca8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	0052      	lsls	r2, r2, #1
 8000cc2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cce:	2220      	movs	r2, #32
 8000cd0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 fee8 	bl	8001ab0 <HAL_DMA_Init>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000ce4:	f7ff ff70 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cec:	631a      	str	r2, [r3, #48]	; 0x30
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_ADC_MspInit+0xdc>)
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00b      	add	sp, #44	; 0x2c
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	40012400 	.word	0x40012400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400
 8000d08:	20000124 	.word	0x20000124
 8000d0c:	40020008 	.word	0x40020008

08000d10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_RTC_MspInit+0x38>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10e      	bne.n	8000d40 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_RTC_MspInit+0x3c>)
 8000d24:	6a1a      	ldr	r2, [r3, #32]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_RTC_MspInit+0x3c>)
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	0209      	lsls	r1, r1, #8
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2002      	movs	r0, #2
 8000d36:	f000 fe89 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f000 fe9b 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40002800 	.word	0x40002800
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d114      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_TIM_Base_MspInit+0x7c>)
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_TIM_Base_MspInit+0x7c>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	61da      	str	r2, [r3, #28]
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_TIM_Base_MspInit+0x7c>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	2201      	movs	r2, #1
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	200f      	movs	r0, #15
 8000d82:	f000 fe63 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f000 fe75 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d8c:	e01a      	b.n	8000dc4 <HAL_TIM_Base_MspInit+0x74>
  else if(htim_base->Instance==TIM16)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_TIM_Base_MspInit+0x80>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d115      	bne.n	8000dc4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_TIM_Base_MspInit+0x7c>)
 8000d9a:	699a      	ldr	r2, [r3, #24]
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_TIM_Base_MspInit+0x7c>)
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	0289      	lsls	r1, r1, #10
 8000da2:	430a      	orrs	r2, r1
 8000da4:	619a      	str	r2, [r3, #24]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0x7c>)
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2015      	movs	r0, #21
 8000dba:	f000 fe47 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000dbe:	2015      	movs	r0, #21
 8000dc0:	f000 fe59 	bl	8001a76 <HAL_NVIC_EnableIRQ>
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b004      	add	sp, #16
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40014400 	.word	0x40014400

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2414      	movs	r4, #20
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	2314      	movs	r3, #20
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f003 fcc0 	bl	800476c <memset>
  if(huart->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_UART_MspInit+0x90>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d132      	bne.n	8000e5c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_UART_MspInit+0x94>)
 8000df8:	69da      	ldr	r2, [r3, #28]
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0x94>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	0289      	lsls	r1, r1, #10
 8000e00:	430a      	orrs	r2, r1
 8000e02:	61da      	str	r2, [r3, #28]
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_UART_MspInit+0x94>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0x94>)
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0x94>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	0289      	lsls	r1, r1, #10
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0x94>)
 8000e22:	695a      	ldr	r2, [r3, #20]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e2e:	0021      	movs	r1, r4
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2203      	movs	r2, #3
 8000e46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	187a      	adds	r2, r7, r1
 8000e50:	2390      	movs	r3, #144	; 0x90
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 ff30 	bl	8001cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b00b      	add	sp, #44	; 0x2c
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40021000 	.word	0x40021000

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f94a 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <RTC_IRQHandler+0x14>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f002 fa8a 	bl	80033bc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000168 	.word	0x20000168

08000eb4 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <DMA1_Channel1_IRQHandler+0x14>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 fe3a 	bl	8001b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	20000124 	.word	0x20000124

08000ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <TIM2_IRQHandler+0x14>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f002 fc3a 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000188 	.word	0x20000188

08000ef0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <TIM16_IRQHandler+0x14>)
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f002 fc2e 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	200001d0 	.word	0x200001d0

08000f08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	e000      	b.n	8000f1e <_read+0x16>
 8000f1c:	bf00      	nop
 8000f1e:	0001      	movs	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b006      	add	sp, #24
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	425b      	negs	r3, r3
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	0192      	lsls	r2, r2, #6
 8000f66:	605a      	str	r2, [r3, #4]
  return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_isatty>:

int _isatty(int file)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f003 fba4 	bl	8004718 <__errno>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	425b      	negs	r3, r3
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	18d2      	adds	r2, r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20001800 	.word	0x20001800
 8000ffc:	00000400 	.word	0x00000400
 8001000:	200002a4 	.word	0x200002a4
 8001004:	200002c0 	.word	0x200002c0

08001008 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff fff6 	bl	8001008 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800101c:	4812      	ldr	r0, [pc, #72]	; (8001068 <LoopForever+0x6>)
    LDR R1, [R0]
 800101e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001020:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <LoopForever+0xa>)
    CMP R1, R2
 8001024:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001026:	d105      	bne.n	8001034 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001028:	4811      	ldr	r0, [pc, #68]	; (8001070 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800102a:	4912      	ldr	r1, [pc, #72]	; (8001074 <LoopForever+0x12>)
    STR R1, [R0]
 800102c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001030:	4912      	ldr	r1, [pc, #72]	; (800107c <LoopForever+0x1a>)
    STR R1, [R0]
 8001032:	6001      	str	r1, [r0, #0]

08001034 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001036:	4913      	ldr	r1, [pc, #76]	; (8001084 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <LoopForever+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800104c:	4c10      	ldr	r4, [pc, #64]	; (8001090 <LoopForever+0x2e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800105a:	f003 fb63 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105e:	f7ff faa9 	bl	80005b4 <main>

08001062 <LoopForever>:

LoopForever:
    b LoopForever
 8001062:	e7fe      	b.n	8001062 <LoopForever>
  ldr   r0, =_estack
 8001064:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001068:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800106c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001070:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001074:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001078:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800107c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001088:	08005d28 	.word	0x08005d28
  ldr r2, =_sbss
 800108c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001090:	200002bc 	.word	0x200002bc

08001094 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_IRQHandler>
	...

08001098 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_Init+0x24>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_Init+0x24>)
 80010a2:	2110      	movs	r1, #16
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f809 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ae:	f7ff fd91 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_InitTick+0x5c>)
 80010ca:	681c      	ldr	r4, [r3, #0]
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	0019      	movs	r1, r3
 80010d2:	23fa      	movs	r3, #250	; 0xfa
 80010d4:	0098      	lsls	r0, r3, #2
 80010d6:	f7ff f821 	bl	800011c <__udivsi3>
 80010da:	0003      	movs	r3, r0
 80010dc:	0019      	movs	r1, r3
 80010de:	0020      	movs	r0, r4
 80010e0:	f7ff f81c 	bl	800011c <__udivsi3>
 80010e4:	0003      	movs	r3, r0
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 fcd5 	bl	8001a96 <HAL_SYSTICK_Config>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e00f      	b.n	8001114 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d80b      	bhi.n	8001112 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	2301      	movs	r3, #1
 80010fe:	425b      	negs	r3, r3
 8001100:	2200      	movs	r2, #0
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fca2 	bl	8001a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_InitTick+0x64>)
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b003      	add	sp, #12
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	001a      	movs	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	18d2      	adds	r2, r2, r3
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_IncTick+0x20>)
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000008 	.word	0x20000008
 8001148:	200002a8 	.word	0x200002a8

0800114c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	200002a8 	.word	0x200002a8

08001160 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001168:	230f      	movs	r3, #15
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e125      	b.n	80013ca <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10a      	bne.n	800119c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2234      	movs	r2, #52	; 0x34
 8001190:	2100      	movs	r1, #0
 8001192:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff fd48 	bl	8000c2c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a0:	2210      	movs	r2, #16
 80011a2:	4013      	ands	r3, r2
 80011a4:	d000      	beq.n	80011a8 <HAL_ADC_Init+0x48>
 80011a6:	e103      	b.n	80013b0 <HAL_ADC_Init+0x250>
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d000      	beq.n	80011b4 <HAL_ADC_Init+0x54>
 80011b2:	e0fd      	b.n	80013b0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2204      	movs	r2, #4
 80011bc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80011be:	d000      	beq.n	80011c2 <HAL_ADC_Init+0x62>
 80011c0:	e0f6      	b.n	80013b0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c6:	4a83      	ldr	r2, [pc, #524]	; (80013d4 <HAL_ADC_Init+0x274>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	2202      	movs	r2, #2
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d112      	bne.n	8001206 <HAL_ADC_Init+0xa6>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d009      	beq.n	8001202 <HAL_ADC_Init+0xa2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	401a      	ands	r2, r3
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	429a      	cmp	r2, r3
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0xa6>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_ADC_Init+0xa8>
 8001206:	2300      	movs	r3, #0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d116      	bne.n	800123a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2218      	movs	r2, #24
 8001214:	4393      	bics	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	0899      	lsrs	r1, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4964      	ldr	r1, [pc, #400]	; (80013d8 <HAL_ADC_Init+0x278>)
 8001246:	400a      	ands	r2, r1
 8001248:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7e1b      	ldrb	r3, [r3, #24]
 800124e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7e5b      	ldrb	r3, [r3, #25]
 8001254:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001256:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7e9b      	ldrb	r3, [r3, #26]
 800125c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800125e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	2b01      	cmp	r3, #1
 8001266:	d002      	beq.n	800126e <HAL_ADC_Init+0x10e>
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	e000      	b.n	8001270 <HAL_ADC_Init+0x110>
 800126e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001270:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001276:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d101      	bne.n	8001284 <HAL_ADC_Init+0x124>
 8001280:	2304      	movs	r3, #4
 8001282:	e000      	b.n	8001286 <HAL_ADC_Init+0x126>
 8001284:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001286:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2124      	movs	r1, #36	; 0x24
 800128c:	5c5b      	ldrb	r3, [r3, r1]
 800128e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001290:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4313      	orrs	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7edb      	ldrb	r3, [r3, #27]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d115      	bne.n	80012cc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7e9b      	ldrb	r3, [r3, #26]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	0252      	lsls	r2, r2, #9
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	e00b      	b.n	80012cc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b8:	2220      	movs	r2, #32
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c4:	2201      	movs	r2, #1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69da      	ldr	r2, [r3, #28]
 80012d0:	23c2      	movs	r3, #194	; 0xc2
 80012d2:	33ff      	adds	r3, #255	; 0xff
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d007      	beq.n	80012e8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80012e0:	4313      	orrs	r3, r2
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	055b      	lsls	r3, r3, #21
 8001300:	429a      	cmp	r2, r3
 8001302:	d01b      	beq.n	800133c <HAL_ADC_Init+0x1dc>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	2b01      	cmp	r3, #1
 800130a:	d017      	beq.n	800133c <HAL_ADC_Init+0x1dc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	2b02      	cmp	r3, #2
 8001312:	d013      	beq.n	800133c <HAL_ADC_Init+0x1dc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	2b03      	cmp	r3, #3
 800131a:	d00f      	beq.n	800133c <HAL_ADC_Init+0x1dc>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2b04      	cmp	r3, #4
 8001322:	d00b      	beq.n	800133c <HAL_ADC_Init+0x1dc>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	2b05      	cmp	r3, #5
 800132a:	d007      	beq.n	800133c <HAL_ADC_Init+0x1dc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	2b06      	cmp	r3, #6
 8001332:	d003      	beq.n	800133c <HAL_ADC_Init+0x1dc>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b07      	cmp	r3, #7
 800133a:	d112      	bne.n	8001362 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2107      	movs	r1, #7
 8001348:	438a      	bics	r2, r1
 800134a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6959      	ldr	r1, [r3, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	2207      	movs	r2, #7
 8001358:	401a      	ands	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <HAL_ADC_Init+0x27c>)
 800136a:	4013      	ands	r3, r2
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	429a      	cmp	r2, r3
 8001370:	d10b      	bne.n	800138a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137c:	2203      	movs	r2, #3
 800137e:	4393      	bics	r3, r2
 8001380:	2201      	movs	r2, #1
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001388:	e01c      	b.n	80013c4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	2212      	movs	r2, #18
 8001390:	4393      	bics	r3, r2
 8001392:	2210      	movs	r2, #16
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139e:	2201      	movs	r2, #1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013ae:	e009      	b.n	80013c4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b4:	2210      	movs	r2, #16
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80013bc:	230f      	movs	r3, #15
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013c4:	230f      	movs	r3, #15
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	781b      	ldrb	r3, [r3, #0]
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b004      	add	sp, #16
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	fffffefd 	.word	0xfffffefd
 80013d8:	fffe0219 	.word	0xfffe0219
 80013dc:	833fffe7 	.word	0x833fffe7

080013e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
 80013fa:	d138      	bne.n	800146e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2234      	movs	r2, #52	; 0x34
 8001400:	5c9b      	ldrb	r3, [r3, r2]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_ADC_Start+0x2a>
 8001406:	2302      	movs	r3, #2
 8001408:	e038      	b.n	800147c <HAL_ADC_Start+0x9c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d007      	beq.n	800142a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800141a:	230f      	movs	r3, #15
 800141c:	18fc      	adds	r4, r7, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	0018      	movs	r0, r3
 8001422:	f000 f9e3 	bl	80017ec <ADC_Enable>
 8001426:	0003      	movs	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800142a:	230f      	movs	r3, #15
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d120      	bne.n	8001476 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <HAL_ADC_Start+0xa4>)
 800143a:	4013      	ands	r3, r2
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	0052      	lsls	r2, r2, #1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2234      	movs	r2, #52	; 0x34
 8001450:	2100      	movs	r1, #0
 8001452:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	221c      	movs	r2, #28
 800145a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2104      	movs	r1, #4
 8001468:	430a      	orrs	r2, r1
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	e003      	b.n	8001476 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800146e:	230f      	movs	r3, #15
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2202      	movs	r2, #2
 8001474:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001476:	230f      	movs	r3, #15
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b005      	add	sp, #20
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	fffff0fe 	.word	0xfffff0fe

08001488 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b08      	cmp	r3, #8
 8001498:	d102      	bne.n	80014a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800149a:	2308      	movs	r3, #8
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e014      	b.n	80014ca <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d10b      	bne.n	80014c6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	2220      	movs	r2, #32
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2234      	movs	r2, #52	; 0x34
 80014be:	2100      	movs	r1, #0
 80014c0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e071      	b.n	80015aa <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014c6:	230c      	movs	r3, #12
 80014c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014ca:	f7ff fe3f 	bl	800114c <HAL_GetTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014d2:	e01f      	b.n	8001514 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	d01c      	beq.n	8001514 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <HAL_ADC_PollForConversion+0x68>
 80014e0:	f7ff fe34 	bl	800114c <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d211      	bcs.n	8001514 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	d10b      	bne.n	8001514 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	2204      	movs	r2, #4
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2234      	movs	r2, #52	; 0x34
 800150c:	2100      	movs	r1, #0
 800150e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e04a      	b.n	80015aa <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	d0d9      	beq.n	80014d4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	23c0      	movs	r3, #192	; 0xc0
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4013      	ands	r3, r2
 800153a:	d12d      	bne.n	8001598 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001540:	2b00      	cmp	r3, #0
 8001542:	d129      	bne.n	8001598 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2208      	movs	r2, #8
 800154c:	4013      	ands	r3, r2
 800154e:	2b08      	cmp	r3, #8
 8001550:	d122      	bne.n	8001598 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2204      	movs	r2, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d110      	bne.n	8001580 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	210c      	movs	r1, #12
 800156a:	438a      	bics	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <HAL_ADC_PollForConversion+0x12c>)
 8001574:	4013      	ands	r3, r2
 8001576:	2201      	movs	r2, #1
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
 800157e:	e00b      	b.n	8001598 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001584:	2220      	movs	r2, #32
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	2201      	movs	r2, #1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7e1b      	ldrb	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d103      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	220c      	movs	r2, #12
 80015a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b004      	add	sp, #16
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	fffffefe 	.word	0xfffffefe

080015b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	055b      	lsls	r3, r3, #21
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d011      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x46>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d00d      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x46>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d009      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x46>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	2b03      	cmp	r3, #3
 8001608:	d005      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x46>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	2b04      	cmp	r3, #4
 8001610:	d001      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x46>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2234      	movs	r2, #52	; 0x34
 800161a:	5c9b      	ldrb	r3, [r3, r2]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x54>
 8001620:	2302      	movs	r3, #2
 8001622:	e0d0      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x1f6>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2234      	movs	r2, #52	; 0x34
 8001628:	2101      	movs	r1, #1
 800162a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2204      	movs	r2, #4
 8001634:	4013      	ands	r3, r2
 8001636:	d000      	beq.n	800163a <HAL_ADC_ConfigChannel+0x6a>
 8001638:	e0b4      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a64      	ldr	r2, [pc, #400]	; (80017d0 <HAL_ADC_ConfigChannel+0x200>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d100      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x76>
 8001644:	e082      	b.n	800174c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	409a      	lsls	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	429a      	cmp	r2, r3
 8001666:	d037      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b01      	cmp	r3, #1
 800166e:	d033      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	2b02      	cmp	r3, #2
 8001676:	d02f      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b03      	cmp	r3, #3
 800167e:	d02b      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2b04      	cmp	r3, #4
 8001686:	d027      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	2b05      	cmp	r3, #5
 800168e:	d023      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	2b06      	cmp	r3, #6
 8001696:	d01f      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	2b07      	cmp	r3, #7
 800169e:	d01b      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	2107      	movs	r1, #7
 80016ac:	400b      	ands	r3, r1
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d012      	beq.n	80016d8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2107      	movs	r1, #7
 80016be:	438a      	bics	r2, r1
 80016c0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6959      	ldr	r1, [r3, #20]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2207      	movs	r2, #7
 80016ce:	401a      	ands	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d007      	beq.n	80016f0 <HAL_ADC_ConfigChannel+0x120>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b11      	cmp	r3, #17
 80016e6:	d003      	beq.n	80016f0 <HAL_ADC_ConfigChannel+0x120>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b12      	cmp	r3, #18
 80016ee:	d163      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_ADC_ConfigChannel+0x204>)
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d009      	beq.n	8001710 <HAL_ADC_ConfigChannel+0x140>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b11      	cmp	r3, #17
 8001702:	d102      	bne.n	800170a <HAL_ADC_ConfigChannel+0x13a>
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	03db      	lsls	r3, r3, #15
 8001708:	e004      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	045b      	lsls	r3, r3, #17
 800170e:	e001      	b.n	8001714 <HAL_ADC_ConfigChannel+0x144>
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <HAL_ADC_ConfigChannel+0x204>)
 8001716:	430b      	orrs	r3, r1
 8001718:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b10      	cmp	r3, #16
 8001720:	d14a      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_ADC_ConfigChannel+0x208>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	492d      	ldr	r1, [pc, #180]	; (80017dc <HAL_ADC_ConfigChannel+0x20c>)
 8001728:	0018      	movs	r0, r3
 800172a:	f7fe fcf7 	bl	800011c <__udivsi3>
 800172e:	0003      	movs	r3, r0
 8001730:	001a      	movs	r2, r3
 8001732:	0013      	movs	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	189b      	adds	r3, r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800173c:	e002      	b.n	8001744 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3b01      	subs	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f9      	bne.n	800173e <HAL_ADC_ConfigChannel+0x16e>
 800174a:	e035      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2101      	movs	r1, #1
 8001758:	4099      	lsls	r1, r3
 800175a:	000b      	movs	r3, r1
 800175c:	43d9      	mvns	r1, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d007      	beq.n	800177e <HAL_ADC_ConfigChannel+0x1ae>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b11      	cmp	r3, #17
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x1ae>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b12      	cmp	r3, #18
 800177c:	d11c      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_ADC_ConfigChannel+0x204>)
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b10      	cmp	r3, #16
 8001788:	d007      	beq.n	800179a <HAL_ADC_ConfigChannel+0x1ca>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b11      	cmp	r3, #17
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x1c6>
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_ADC_ConfigChannel+0x210>)
 8001794:	e002      	b.n	800179c <HAL_ADC_ConfigChannel+0x1cc>
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_ADC_ConfigChannel+0x214>)
 8001798:	e000      	b.n	800179c <HAL_ADC_ConfigChannel+0x1cc>
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_ADC_ConfigChannel+0x218>)
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_ADC_ConfigChannel+0x204>)
 800179e:	400b      	ands	r3, r1
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e009      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	2220      	movs	r2, #32
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80017b0:	230f      	movs	r3, #15
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2234      	movs	r2, #52	; 0x34
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80017c0:	230f      	movs	r3, #15
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	781b      	ldrb	r3, [r3, #0]
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b004      	add	sp, #16
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	00001001 	.word	0x00001001
 80017d4:	40012708 	.word	0x40012708
 80017d8:	20000000 	.word	0x20000000
 80017dc:	000f4240 	.word	0x000f4240
 80017e0:	ffbfffff 	.word	0xffbfffff
 80017e4:	feffffff 	.word	0xfeffffff
 80017e8:	ff7fffff 	.word	0xff7fffff

080017ec <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	2b01      	cmp	r3, #1
 8001808:	d112      	bne.n	8001830 <ADC_Enable+0x44>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	2b01      	cmp	r3, #1
 8001816:	d009      	beq.n	800182c <ADC_Enable+0x40>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	401a      	ands	r2, r3
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	429a      	cmp	r2, r3
 800182a:	d101      	bne.n	8001830 <ADC_Enable+0x44>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <ADC_Enable+0x46>
 8001830:	2300      	movs	r3, #0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d152      	bne.n	80018dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <ADC_Enable+0xfc>)
 800183e:	4013      	ands	r3, r2
 8001840:	d00d      	beq.n	800185e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	2210      	movs	r2, #16
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001852:	2201      	movs	r2, #1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e03f      	b.n	80018de <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <ADC_Enable+0x100>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	491f      	ldr	r1, [pc, #124]	; (80018f0 <ADC_Enable+0x104>)
 8001874:	0018      	movs	r0, r3
 8001876:	f7fe fc51 	bl	800011c <__udivsi3>
 800187a:	0003      	movs	r3, r0
 800187c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800187e:	e002      	b.n	8001886 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3b01      	subs	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f9      	bne.n	8001880 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800188c:	f7ff fc5e 	bl	800114c <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001894:	e01b      	b.n	80018ce <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001896:	f7ff fc59 	bl	800114c <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d914      	bls.n	80018ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d00d      	beq.n	80018ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	2210      	movs	r2, #16
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	2201      	movs	r2, #1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e007      	b.n	80018de <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d1dc      	bne.n	8001896 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	80000017 	.word	0x80000017
 80018ec:	20000000 	.word	0x20000000
 80018f0:	000f4240 	.word	0x000f4240

080018f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	0002      	movs	r2, r0
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001900:	1dfb      	adds	r3, r7, #7
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b7f      	cmp	r3, #127	; 0x7f
 8001906:	d809      	bhi.n	800191c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001908:	1dfb      	adds	r3, r7, #7
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	001a      	movs	r2, r3
 800190e:	231f      	movs	r3, #31
 8001910:	401a      	ands	r2, r3
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_EnableIRQ+0x30>)
 8001914:	2101      	movs	r1, #1
 8001916:	4091      	lsls	r1, r2
 8001918:	000a      	movs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
  }
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	0002      	movs	r2, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b7f      	cmp	r3, #127	; 0x7f
 800193c:	d828      	bhi.n	8001990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193e:	4a2f      	ldr	r2, [pc, #188]	; (80019fc <__NVIC_SetPriority+0xd4>)
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b25b      	sxtb	r3, r3
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	33c0      	adds	r3, #192	; 0xc0
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	589b      	ldr	r3, [r3, r2]
 800194e:	1dfa      	adds	r2, r7, #7
 8001950:	7812      	ldrb	r2, [r2, #0]
 8001952:	0011      	movs	r1, r2
 8001954:	2203      	movs	r2, #3
 8001956:	400a      	ands	r2, r1
 8001958:	00d2      	lsls	r2, r2, #3
 800195a:	21ff      	movs	r1, #255	; 0xff
 800195c:	4091      	lsls	r1, r2
 800195e:	000a      	movs	r2, r1
 8001960:	43d2      	mvns	r2, r2
 8001962:	401a      	ands	r2, r3
 8001964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	401a      	ands	r2, r3
 800196e:	1dfb      	adds	r3, r7, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	0018      	movs	r0, r3
 8001974:	2303      	movs	r3, #3
 8001976:	4003      	ands	r3, r0
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800197c:	481f      	ldr	r0, [pc, #124]	; (80019fc <__NVIC_SetPriority+0xd4>)
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b25b      	sxtb	r3, r3
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	430a      	orrs	r2, r1
 8001988:	33c0      	adds	r3, #192	; 0xc0
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198e:	e031      	b.n	80019f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001990:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <__NVIC_SetPriority+0xd8>)
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	0019      	movs	r1, r3
 8001998:	230f      	movs	r3, #15
 800199a:	400b      	ands	r3, r1
 800199c:	3b08      	subs	r3, #8
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3306      	adds	r3, #6
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	3304      	adds	r3, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	1dfa      	adds	r2, r7, #7
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	0011      	movs	r1, r2
 80019b0:	2203      	movs	r2, #3
 80019b2:	400a      	ands	r2, r1
 80019b4:	00d2      	lsls	r2, r2, #3
 80019b6:	21ff      	movs	r1, #255	; 0xff
 80019b8:	4091      	lsls	r1, r2
 80019ba:	000a      	movs	r2, r1
 80019bc:	43d2      	mvns	r2, r2
 80019be:	401a      	ands	r2, r3
 80019c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	22ff      	movs	r2, #255	; 0xff
 80019c8:	401a      	ands	r2, r3
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	0018      	movs	r0, r3
 80019d0:	2303      	movs	r3, #3
 80019d2:	4003      	ands	r3, r0
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <__NVIC_SetPriority+0xd8>)
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	001c      	movs	r4, r3
 80019e0:	230f      	movs	r3, #15
 80019e2:	4023      	ands	r3, r4
 80019e4:	3b08      	subs	r3, #8
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	430a      	orrs	r2, r1
 80019ea:	3306      	adds	r3, #6
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	18c3      	adds	r3, r0, r3
 80019f0:	3304      	adds	r3, #4
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b003      	add	sp, #12
 80019fa:	bd90      	pop	{r4, r7, pc}
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	045b      	lsls	r3, r3, #17
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d301      	bcc.n	8001a1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e010      	b.n	8001a3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <SysTick_Config+0x44>)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	3a01      	subs	r2, #1
 8001a22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a24:	2301      	movs	r3, #1
 8001a26:	425b      	negs	r3, r3
 8001a28:	2103      	movs	r1, #3
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff ff7c 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SysTick_Config+0x44>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SysTick_Config+0x44>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	210f      	movs	r1, #15
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	1c02      	adds	r2, r0, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b004      	add	sp, #16
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff ff33 	bl	80018f4 <__NVIC_EnableIRQ>
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff ffaf 	bl	8001a04 <SysTick_Config>
 8001aa6:	0003      	movs	r3, r0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e036      	b.n	8001b34 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2221      	movs	r2, #33	; 0x21
 8001aca:	2102      	movs	r1, #2
 8001acc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_DMA_Init+0x8c>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f8b4 	bl	8001c84 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2221      	movs	r2, #33	; 0x21
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	ffffc00f 	.word	0xffffc00f

08001b40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	d024      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x72>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d020      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2220      	movs	r2, #32
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d107      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2104      	movs	r1, #4
 8001b88:	438a      	bics	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b94:	2104      	movs	r1, #4
 8001b96:	4091      	lsls	r1, r2
 8001b98:	000a      	movs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d100      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x66>
 8001ba4:	e06a      	b.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	0010      	movs	r0, r2
 8001bae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bb0:	e064      	b.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	0013      	movs	r3, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d02b      	beq.n	8001c1a <HAL_DMA_IRQHandler+0xda>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d027      	beq.n	8001c1a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d10b      	bne.n	8001bee <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	210a      	movs	r1, #10
 8001be2:	438a      	bics	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2221      	movs	r2, #33	; 0x21
 8001bea:	2101      	movs	r1, #1
 8001bec:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4091      	lsls	r1, r2
 8001bfa:	000a      	movs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d036      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	0010      	movs	r0, r2
 8001c16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c18:	e030      	b.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2208      	movs	r2, #8
 8001c20:	409a      	lsls	r2, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	d028      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d024      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	210e      	movs	r1, #14
 8001c3e:	438a      	bics	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	000a      	movs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2221      	movs	r2, #33	; 0x21
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	0010      	movs	r0, r2
 8001c78:	4798      	blx	r3
    }
  }
}
 8001c7a:	e7ff      	b.n	8001c7c <HAL_DMA_IRQHandler+0x13c>
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <DMA_CalcBaseAndBitshift+0x30>)
 8001c92:	4694      	mov	ip, r2
 8001c94:	4463      	add	r3, ip
 8001c96:	2114      	movs	r1, #20
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe fa3f 	bl	800011c <__udivsi3>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	009a      	lsls	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <DMA_CalcBaseAndBitshift+0x34>)
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	bffdfff8 	.word	0xbffdfff8
 8001cb8:	40020000 	.word	0x40020000

08001cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	e149      	b.n	8001f60 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4091      	lsls	r1, r2
 8001cd6:	000a      	movs	r2, r1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d100      	bne.n	8001ce4 <HAL_GPIO_Init+0x28>
 8001ce2:	e13a      	b.n	8001f5a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d005      	beq.n	8001cfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	0013      	movs	r3, r2
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	2201      	movs	r2, #1
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	0013      	movs	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d017      	beq.n	8001d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	409a      	lsls	r2, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2203      	movs	r2, #3
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d123      	bne.n	8001dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	58d3      	ldr	r3, [r2, r3]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2207      	movs	r2, #7
 8001db8:	4013      	ands	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2107      	movs	r1, #7
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	0013      	movs	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	0092      	lsls	r2, r2, #2
 8001dea:	6939      	ldr	r1, [r7, #16]
 8001dec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_GPIO_Init+0x174>
 8001e2e:	e094      	b.n	8001f5a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e30:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_GPIO_Init+0x2bc>)
 8001e32:	699a      	ldr	r2, [r3, #24]
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_GPIO_Init+0x2bc>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	619a      	str	r2, [r3, #24]
 8001e3c:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HAL_GPIO_Init+0x2bc>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e48:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_GPIO_Init+0x2c0>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	589b      	ldr	r3, [r3, r2]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	409a      	lsls	r2, r3
 8001e62:	0013      	movs	r3, r2
 8001e64:	43da      	mvns	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	2390      	movs	r3, #144	; 0x90
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x1d6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <HAL_GPIO_Init+0x2c4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x1d2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a40      	ldr	r2, [pc, #256]	; (8001f84 <HAL_GPIO_Init+0x2c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x1ce>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x1d8>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x1d8>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x1d8>
 8001e92:	2300      	movs	r3, #0
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	2103      	movs	r1, #3
 8001e98:	400a      	ands	r2, r1
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x2c0>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	035b      	lsls	r3, r3, #13
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	039b      	lsls	r3, r3, #14
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	029b      	lsls	r3, r3, #10
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_GPIO_Init+0x2cc>)
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	40da      	lsrs	r2, r3
 8001f68:	1e13      	subs	r3, r2, #0
 8001f6a:	d000      	beq.n	8001f6e <HAL_GPIO_Init+0x2b2>
 8001f6c:	e6ae      	b.n	8001ccc <HAL_GPIO_Init+0x10>
  } 
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	48000400 	.word	0x48000400
 8001f84:	48000800 	.word	0x48000800
 8001f88:	40010400 	.word	0x40010400

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	0008      	movs	r0, r1
 8001f96:	0011      	movs	r1, r2
 8001f98:	1cbb      	adds	r3, r7, #2
 8001f9a:	1c02      	adds	r2, r0, #0
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	1c7b      	adds	r3, r7, #1
 8001fa0:	1c0a      	adds	r2, r1, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa4:	1c7b      	adds	r3, r7, #1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fac:	1cbb      	adds	r3, r7, #2
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb6:	1cbb      	adds	r3, r7, #2
 8001fb8:	881a      	ldrh	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_PWR_EnableWakeUpPin>:
  *         This parameter can be value of :
  *           @ref PWREx_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be values of :
  *           @ref PWREx_WakeUp_Pins
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_PWR_DisableWakeUpPin+0x20>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_PWR_DisableWakeUpPin+0x20>)
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	40007000 	.word	0x40007000

0800200c <HAL_PWR_EnterSTANDBYMode>:
  *            not used and the core is supplied directly from an external source.
  *            Consequently, the Standby mode is not available on those devices.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= (uint32_t)PWR_CR_PDDS;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002016:	2102      	movs	r1, #2
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002022:	2104      	movs	r1, #4
 8002024:	430a      	orrs	r2, r1
 8002026:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002028:	bf30      	wfi
}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40007000 	.word	0x40007000
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_PWR_DisableSleepOnExit+0x18>)
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_PWR_DisableSleepOnExit+0x18>)
 8002042:	2102      	movs	r1, #2
 8002044:	438a      	bics	r2, r1
 8002046:	611a      	str	r2, [r3, #16]
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 fb76 	bl	8002754 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d100      	bne.n	8002074 <HAL_RCC_OscConfig+0x20>
 8002072:	e08e      	b.n	8002192 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002074:	4bc5      	ldr	r3, [pc, #788]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	220c      	movs	r2, #12
 800207a:	4013      	ands	r3, r2
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00e      	beq.n	800209e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002080:	4bc2      	ldr	r3, [pc, #776]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	220c      	movs	r2, #12
 8002086:	4013      	ands	r3, r2
 8002088:	2b08      	cmp	r3, #8
 800208a:	d117      	bne.n	80020bc <HAL_RCC_OscConfig+0x68>
 800208c:	4bbf      	ldr	r3, [pc, #764]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23c0      	movs	r3, #192	; 0xc0
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	401a      	ands	r2, r3
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	429a      	cmp	r2, r3
 800209c:	d10e      	bne.n	80020bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209e:	4bbb      	ldr	r3, [pc, #748]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	029b      	lsls	r3, r3, #10
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_RCC_OscConfig+0x58>
 80020aa:	e071      	b.n	8002190 <HAL_RCC_OscConfig+0x13c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d000      	beq.n	80020b6 <HAL_RCC_OscConfig+0x62>
 80020b4:	e06c      	b.n	8002190 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f000 fb4c 	bl	8002754 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x80>
 80020c4:	4bb1      	ldr	r3, [pc, #708]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4bb0      	ldr	r3, [pc, #704]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	0249      	lsls	r1, r1, #9
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e02f      	b.n	8002134 <HAL_RCC_OscConfig+0xe0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10c      	bne.n	80020f6 <HAL_RCC_OscConfig+0xa2>
 80020dc:	4bab      	ldr	r3, [pc, #684]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4baa      	ldr	r3, [pc, #680]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020e2:	49ab      	ldr	r1, [pc, #684]	; (8002390 <HAL_RCC_OscConfig+0x33c>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	4ba8      	ldr	r3, [pc, #672]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4ba7      	ldr	r3, [pc, #668]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020ee:	49a9      	ldr	r1, [pc, #676]	; (8002394 <HAL_RCC_OscConfig+0x340>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e01e      	b.n	8002134 <HAL_RCC_OscConfig+0xe0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d10e      	bne.n	800211c <HAL_RCC_OscConfig+0xc8>
 80020fe:	4ba3      	ldr	r3, [pc, #652]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4ba2      	ldr	r3, [pc, #648]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	02c9      	lsls	r1, r1, #11
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	4b9f      	ldr	r3, [pc, #636]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b9e      	ldr	r3, [pc, #632]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0249      	lsls	r1, r1, #9
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xe0>
 800211c:	4b9b      	ldr	r3, [pc, #620]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b9a      	ldr	r3, [pc, #616]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002122:	499b      	ldr	r1, [pc, #620]	; (8002390 <HAL_RCC_OscConfig+0x33c>)
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b98      	ldr	r3, [pc, #608]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b97      	ldr	r3, [pc, #604]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800212e:	4999      	ldr	r1, [pc, #612]	; (8002394 <HAL_RCC_OscConfig+0x340>)
 8002130:	400a      	ands	r2, r1
 8002132:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d014      	beq.n	8002166 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff f806 	bl	800114c <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002146:	f7ff f801 	bl	800114c <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e2fd      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	4b8c      	ldr	r3, [pc, #560]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	4013      	ands	r3, r2
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0xf2>
 8002164:	e015      	b.n	8002192 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7fe fff1 	bl	800114c <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe ffec 	bl	800114c <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e2e8      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b82      	ldr	r3, [pc, #520]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	4013      	ands	r3, r2
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x11c>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	d100      	bne.n	800219e <HAL_RCC_OscConfig+0x14a>
 800219c:	e06c      	b.n	8002278 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800219e:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	220c      	movs	r2, #12
 80021a4:	4013      	ands	r3, r2
 80021a6:	d00e      	beq.n	80021c6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021a8:	4b78      	ldr	r3, [pc, #480]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	220c      	movs	r2, #12
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d11f      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1a0>
 80021b4:	4b75      	ldr	r3, [pc, #468]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	23c0      	movs	r3, #192	; 0xc0
 80021ba:	025b      	lsls	r3, r3, #9
 80021bc:	401a      	ands	r2, r3
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b71      	ldr	r3, [pc, #452]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2202      	movs	r2, #2
 80021cc:	4013      	ands	r3, r2
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_OscConfig+0x188>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e2bb      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b6b      	ldr	r3, [pc, #428]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	22f8      	movs	r2, #248	; 0xf8
 80021e2:	4393      	bics	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00da      	lsls	r2, r3, #3
 80021ec:	4b67      	ldr	r3, [pc, #412]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e041      	b.n	8002278 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d024      	beq.n	8002246 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002202:	2101      	movs	r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe ffa0 	bl	800114c <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002212:	f7fe ff9b 	bl	800114c <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e297      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d0f1      	beq.n	8002212 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	22f8      	movs	r2, #248	; 0xf8
 8002234:	4393      	bics	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	00da      	lsls	r2, r3, #3
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e018      	b.n	8002278 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002246:	4b51      	ldr	r3, [pc, #324]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800224c:	2101      	movs	r1, #1
 800224e:	438a      	bics	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7fe ff7b 	bl	800114c <HAL_GetTick>
 8002256:	0003      	movs	r3, r0
 8002258:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225c:	f7fe ff76 	bl	800114c <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e272      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2202      	movs	r2, #2
 8002274:	4013      	ands	r3, r2
 8002276:	d1f1      	bne.n	800225c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2208      	movs	r2, #8
 800227e:	4013      	ands	r3, r2
 8002280:	d036      	beq.n	80022f0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d019      	beq.n	80022be <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228a:	4b40      	ldr	r3, [pc, #256]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800228c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228e:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002290:	2101      	movs	r1, #1
 8002292:	430a      	orrs	r2, r1
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe ff59 	bl	800114c <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe ff54 	bl	800114c <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e250      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d0f1      	beq.n	80022a0 <HAL_RCC_OscConfig+0x24c>
 80022bc:	e018      	b.n	80022f0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022be:	4b33      	ldr	r3, [pc, #204]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80022c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c2:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80022c4:	2101      	movs	r1, #1
 80022c6:	438a      	bics	r2, r1
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7fe ff3f 	bl	800114c <HAL_GetTick>
 80022ce:	0003      	movs	r3, r0
 80022d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe ff3a 	bl	800114c <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e236      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2202      	movs	r2, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	d1f1      	bne.n	80022d4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2204      	movs	r2, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	d100      	bne.n	80022fc <HAL_RCC_OscConfig+0x2a8>
 80022fa:	e0b5      	b.n	8002468 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	201f      	movs	r0, #31
 80022fe:	183b      	adds	r3, r7, r0
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	055b      	lsls	r3, r3, #21
 800230c:	4013      	ands	r3, r2
 800230e:	d110      	bne.n	8002332 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	0549      	lsls	r1, r1, #21
 800231a:	430a      	orrs	r2, r1
 800231c:	61da      	str	r2, [r3, #28]
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	055b      	lsls	r3, r3, #21
 8002326:	4013      	ands	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800232c:	183b      	adds	r3, r7, r0
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_OscConfig+0x344>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4013      	ands	r3, r2
 800233c:	d11a      	bne.n	8002374 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_RCC_OscConfig+0x344>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_RCC_OscConfig+0x344>)
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	0049      	lsls	r1, r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234c:	f7fe fefe 	bl	800114c <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7fe fef9 	bl	800114c <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	; 0x64
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1f5      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x344>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10f      	bne.n	800239c <HAL_RCC_OscConfig+0x348>
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <HAL_RCC_OscConfig+0x338>)
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	621a      	str	r2, [r3, #32]
 8002388:	e036      	b.n	80023f8 <HAL_RCC_OscConfig+0x3a4>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	40021000 	.word	0x40021000
 8002390:	fffeffff 	.word	0xfffeffff
 8002394:	fffbffff 	.word	0xfffbffff
 8002398:	40007000 	.word	0x40007000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x36a>
 80023a4:	4bca      	ldr	r3, [pc, #808]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	4bc9      	ldr	r3, [pc, #804]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	438a      	bics	r2, r1
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	4bc7      	ldr	r3, [pc, #796]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	4bc6      	ldr	r3, [pc, #792]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023b6:	2104      	movs	r1, #4
 80023b8:	438a      	bics	r2, r1
 80023ba:	621a      	str	r2, [r3, #32]
 80023bc:	e01c      	b.n	80023f8 <HAL_RCC_OscConfig+0x3a4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x38c>
 80023c6:	4bc2      	ldr	r3, [pc, #776]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	4bc1      	ldr	r3, [pc, #772]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023cc:	2104      	movs	r1, #4
 80023ce:	430a      	orrs	r2, r1
 80023d0:	621a      	str	r2, [r3, #32]
 80023d2:	4bbf      	ldr	r3, [pc, #764]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	4bbe      	ldr	r3, [pc, #760]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023d8:	2101      	movs	r1, #1
 80023da:	430a      	orrs	r2, r1
 80023dc:	621a      	str	r2, [r3, #32]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0x3a4>
 80023e0:	4bbb      	ldr	r3, [pc, #748]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	4bba      	ldr	r3, [pc, #744]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	438a      	bics	r2, r1
 80023ea:	621a      	str	r2, [r3, #32]
 80023ec:	4bb8      	ldr	r3, [pc, #736]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	4bb7      	ldr	r3, [pc, #732]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80023f2:	2104      	movs	r1, #4
 80023f4:	438a      	bics	r2, r1
 80023f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d014      	beq.n	800242a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002400:	f7fe fea4 	bl	800114c <HAL_GetTick>
 8002404:	0003      	movs	r3, r0
 8002406:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e009      	b.n	800241e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fe9f 	bl	800114c <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4aaf      	ldr	r2, [pc, #700]	; (80026d4 <HAL_RCC_OscConfig+0x680>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e19a      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	4bac      	ldr	r3, [pc, #688]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x3b6>
 8002428:	e013      	b.n	8002452 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fe8f 	bl	800114c <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002432:	e009      	b.n	8002448 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fe8a 	bl	800114c <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	4aa5      	ldr	r2, [pc, #660]	; (80026d4 <HAL_RCC_OscConfig+0x680>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e185      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	4ba1      	ldr	r3, [pc, #644]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002452:	231f      	movs	r3, #31
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b9c      	ldr	r3, [pc, #624]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	4b9b      	ldr	r3, [pc, #620]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002462:	499d      	ldr	r1, [pc, #628]	; (80026d8 <HAL_RCC_OscConfig+0x684>)
 8002464:	400a      	ands	r2, r1
 8002466:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2210      	movs	r2, #16
 800246e:	4013      	ands	r3, r2
 8002470:	d063      	beq.n	800253a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d12a      	bne.n	80024d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800247a:	4b95      	ldr	r3, [pc, #596]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247e:	4b94      	ldr	r3, [pc, #592]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002480:	2104      	movs	r1, #4
 8002482:	430a      	orrs	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002486:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248a:	4b91      	ldr	r3, [pc, #580]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800248c:	2101      	movs	r1, #1
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fe5b 	bl	800114c <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800249c:	f7fe fe56 	bl	800114c <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e152      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	2202      	movs	r2, #2
 80024b4:	4013      	ands	r3, r2
 80024b6:	d0f1      	beq.n	800249c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024b8:	4b85      	ldr	r3, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024bc:	22f8      	movs	r2, #248	; 0xf8
 80024be:	4393      	bics	r3, r2
 80024c0:	0019      	movs	r1, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	00da      	lsls	r2, r3, #3
 80024c8:	4b81      	ldr	r3, [pc, #516]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024ca:	430a      	orrs	r2, r1
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
 80024ce:	e034      	b.n	800253a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	3305      	adds	r3, #5
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024d8:	4b7d      	ldr	r3, [pc, #500]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024dc:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024de:	2104      	movs	r1, #4
 80024e0:	438a      	bics	r2, r1
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024e4:	4b7a      	ldr	r3, [pc, #488]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	22f8      	movs	r2, #248	; 0xf8
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	00da      	lsls	r2, r3, #3
 80024f4:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
 80024fa:	e01e      	b.n	800253a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fc:	4b74      	ldr	r3, [pc, #464]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80024fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002500:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002502:	2104      	movs	r1, #4
 8002504:	430a      	orrs	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002508:	4b71      	ldr	r3, [pc, #452]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800250a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250c:	4b70      	ldr	r3, [pc, #448]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7fe fe1a 	bl	800114c <HAL_GetTick>
 8002518:	0003      	movs	r3, r0
 800251a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800251e:	f7fe fe15 	bl	800114c <HAL_GetTick>
 8002522:	0002      	movs	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e111      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002530:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	d1f1      	bne.n	800251e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2220      	movs	r2, #32
 8002540:	4013      	ands	r3, r2
 8002542:	d05c      	beq.n	80025fe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002544:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	220c      	movs	r2, #12
 800254a:	4013      	ands	r3, r2
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d00e      	beq.n	800256e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002550:	4b5f      	ldr	r3, [pc, #380]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	220c      	movs	r2, #12
 8002556:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002558:	2b08      	cmp	r3, #8
 800255a:	d114      	bne.n	8002586 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800255c:	4b5c      	ldr	r3, [pc, #368]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	23c0      	movs	r3, #192	; 0xc0
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	401a      	ands	r2, r3
 8002566:	23c0      	movs	r3, #192	; 0xc0
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	429a      	cmp	r2, r3
 800256c:	d10b      	bne.n	8002586 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800256e:	4b58      	ldr	r3, [pc, #352]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4013      	ands	r3, r2
 8002578:	d040      	beq.n	80025fc <HAL_RCC_OscConfig+0x5a8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d03c      	beq.n	80025fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0e6      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01b      	beq.n	80025c6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800258e:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002592:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0249      	lsls	r1, r1, #9
 8002598:	430a      	orrs	r2, r1
 800259a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fdd6 	bl	800114c <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a6:	f7fe fdd1 	bl	800114c <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0cd      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025b8:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80025ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	4013      	ands	r3, r2
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x552>
 80025c4:	e01b      	b.n	80025fe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80025c6:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80025c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80025cc:	4943      	ldr	r1, [pc, #268]	; (80026dc <HAL_RCC_OscConfig+0x688>)
 80025ce:	400a      	ands	r2, r1
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe fdbb 	bl	800114c <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025dc:	f7fe fdb6 	bl	800114c <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0b2      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80025f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	029b      	lsls	r3, r3, #10
 80025f6:	4013      	ands	r3, r2
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x588>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025fc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	2b00      	cmp	r3, #0
 8002604:	d100      	bne.n	8002608 <HAL_RCC_OscConfig+0x5b4>
 8002606:	e0a4      	b.n	8002752 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	220c      	movs	r2, #12
 800260e:	4013      	ands	r3, r2
 8002610:	2b08      	cmp	r3, #8
 8002612:	d100      	bne.n	8002616 <HAL_RCC_OscConfig+0x5c2>
 8002614:	e078      	b.n	8002708 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b02      	cmp	r3, #2
 800261c:	d14c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002624:	492e      	ldr	r1, [pc, #184]	; (80026e0 <HAL_RCC_OscConfig+0x68c>)
 8002626:	400a      	ands	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe fd8f 	bl	800114c <HAL_GetTick>
 800262e:	0003      	movs	r3, r0
 8002630:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fd8a 	bl	800114c <HAL_GetTick>
 8002638:	0002      	movs	r2, r0
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e086      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	049b      	lsls	r3, r3, #18
 800264e:	4013      	ands	r3, r2
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	220f      	movs	r2, #15
 8002658:	4393      	bics	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002662:	430a      	orrs	r2, r1
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_RCC_OscConfig+0x690>)
 800266c:	4013      	ands	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	431a      	orrs	r2, r3
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	0449      	lsls	r1, r1, #17
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fd5d 	bl	800114c <HAL_GetTick>
 8002692:	0003      	movs	r3, r0
 8002694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fd58 	bl	800114c <HAL_GetTick>
 800269c:	0002      	movs	r2, r0
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e054      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	049b      	lsls	r3, r3, #18
 80026b2:	4013      	ands	r3, r2
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x644>
 80026b6:	e04c      	b.n	8002752 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_RCC_OscConfig+0x67c>)
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <HAL_RCC_OscConfig+0x68c>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fd42 	bl	800114c <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x6a6>
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	40021000 	.word	0x40021000
 80026d4:	00001388 	.word	0x00001388
 80026d8:	efffffff 	.word	0xefffffff
 80026dc:	fffeffff 	.word	0xfffeffff
 80026e0:	feffffff 	.word	0xfeffffff
 80026e4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fd30 	bl	800114c <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e02c      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_RCC_OscConfig+0x708>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	049b      	lsls	r3, r3, #18
 8002702:	4013      	ands	r3, r2
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x694>
 8002706:	e024      	b.n	8002752 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e01f      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_OscConfig+0x708>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x708>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	23c0      	movs	r3, #192	; 0xc0
 8002724:	025b      	lsls	r3, r3, #9
 8002726:	401a      	ands	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	429a      	cmp	r2, r3
 800272e:	d10e      	bne.n	800274e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	220f      	movs	r2, #15
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d107      	bne.n	800274e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	23f0      	movs	r3, #240	; 0xf0
 8002742:	039b      	lsls	r3, r3, #14
 8002744:	401a      	ands	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b008      	add	sp, #32
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0bf      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b61      	ldr	r3, [pc, #388]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	4013      	ands	r3, r2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d911      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2201      	movs	r2, #1
 8002788:	4393      	bics	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0a6      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2204      	movs	r2, #4
 80027b6:	4013      	ands	r3, r2
 80027b8:	d006      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027ba:	4b51      	ldr	r3, [pc, #324]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80027c0:	21e0      	movs	r1, #224	; 0xe0
 80027c2:	00c9      	lsls	r1, r1, #3
 80027c4:	430a      	orrs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	22f0      	movs	r2, #240	; 0xf0
 80027ce:	4393      	bics	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d04c      	beq.n	8002880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	029b      	lsls	r3, r3, #10
 80027f6:	4013      	ands	r3, r2
 80027f8:	d120      	bne.n	800283c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07a      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	049b      	lsls	r3, r3, #18
 800280e:	4013      	ands	r3, r2
 8002810:	d114      	bne.n	800283c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06e      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 8002820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	4013      	ands	r3, r2
 8002828:	d108      	bne.n	800283c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e062      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e05b      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283c:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	4393      	bics	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002850:	f7fe fc7c 	bl	800114c <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002858:	e009      	b.n	800286e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285a:	f7fe fc77 	bl	800114c <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_RCC_ClockConfig+0x1a4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e042      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	220c      	movs	r2, #12
 8002874:	401a      	ands	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	429a      	cmp	r2, r3
 800287e:	d1ec      	bne.n	800285a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d211      	bcs.n	80028b2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2201      	movs	r2, #1
 8002894:	4393      	bics	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x19c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2201      	movs	r2, #1
 80028a6:	4013      	ands	r3, r2
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e020      	b.n	80028f4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2204      	movs	r2, #4
 80028b8:	4013      	ands	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a11      	ldr	r2, [pc, #68]	; (8002908 <HAL_RCC_ClockConfig+0x1a8>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	0019      	movs	r1, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028d0:	f000 f820 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d4:	0001      	movs	r1, r0
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1a0>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	220f      	movs	r2, #15
 80028de:	4013      	ands	r3, r2
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_RCC_ClockConfig+0x1ac>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	000a      	movs	r2, r1
 80028e6:	40da      	lsrs	r2, r3
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1b0>)
 80028ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028ec:	2003      	movs	r0, #3
 80028ee:	f7fe fbe7 	bl	80010c0 <HAL_InitTick>
  
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b004      	add	sp, #16
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40022000 	.word	0x40022000
 8002900:	40021000 	.word	0x40021000
 8002904:	00001388 	.word	0x00001388
 8002908:	fffff8ff 	.word	0xfffff8ff
 800290c:	08005c50 	.word	0x08005c50
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	220c      	movs	r2, #12
 8002938:	4013      	ands	r3, r2
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d046      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0xb8>
 800293e:	d848      	bhi.n	80029d2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002940:	2b04      	cmp	r3, #4
 8002942:	d002      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x36>
 8002944:	2b08      	cmp	r3, #8
 8002946:	d003      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x3c>
 8002948:	e043      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800294c:	613b      	str	r3, [r7, #16]
      break;
 800294e:	e043      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	220f      	movs	r2, #15
 8002956:	4013      	ands	r3, r2
 8002958:	4a24      	ldr	r2, [pc, #144]	; (80029ec <HAL_RCC_GetSysClockFreq+0xd8>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	220f      	movs	r2, #15
 8002964:	4013      	ands	r3, r2
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	23c0      	movs	r3, #192	; 0xc0
 8002970:	025b      	lsls	r3, r3, #9
 8002972:	401a      	ands	r2, r3
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	025b      	lsls	r3, r3, #9
 8002978:	429a      	cmp	r2, r3
 800297a:	d109      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	481a      	ldr	r0, [pc, #104]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002980:	f7fd fbcc 	bl	800011c <__udivsi3>
 8002984:	0003      	movs	r3, r0
 8002986:	001a      	movs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4353      	muls	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e01a      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	23c0      	movs	r3, #192	; 0xc0
 8002994:	025b      	lsls	r3, r3, #9
 8002996:	401a      	ands	r2, r3
 8002998:	23c0      	movs	r3, #192	; 0xc0
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	429a      	cmp	r2, r3
 800299e:	d109      	bne.n	80029b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	4814      	ldr	r0, [pc, #80]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80029a4:	f7fd fbba 	bl	800011c <__udivsi3>
 80029a8:	0003      	movs	r3, r0
 80029aa:	001a      	movs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4353      	muls	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	480c      	ldr	r0, [pc, #48]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029b8:	f7fd fbb0 	bl	800011c <__udivsi3>
 80029bc:	0003      	movs	r3, r0
 80029be:	001a      	movs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4353      	muls	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	613b      	str	r3, [r7, #16]
      break;
 80029ca:	e005      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80029ce:	613b      	str	r3, [r7, #16]
      break;
 80029d0:	e002      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029d4:	613b      	str	r3, [r7, #16]
      break;
 80029d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029d8:	693b      	ldr	r3, [r7, #16]
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b006      	add	sp, #24
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000
 80029e8:	007a1200 	.word	0x007a1200
 80029ec:	08005c68 	.word	0x08005c68
 80029f0:	08005c78 	.word	0x08005c78
 80029f4:	02dc6c00 	.word	0x02dc6c00

080029f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b02      	ldr	r3, [pc, #8]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	20000000 	.word	0x20000000

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a10:	f7ff fff2 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a14:	0001      	movs	r1, r0
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	4013      	ands	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	40d9      	lsrs	r1, r3
 8002a26:	000b      	movs	r3, r1
}    
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40021000 	.word	0x40021000
 8002a34:	08005c60 	.word	0x08005c60

08002a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	4013      	ands	r3, r2
 8002a52:	d100      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a54:	e08e      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2017      	movs	r0, #23
 8002a58:	183b      	adds	r3, r7, r0
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	4013      	ands	r3, r2
 8002a68:	d110      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	0549      	lsls	r1, r1, #21
 8002a74:	430a      	orrs	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
 8002a78:	4b60      	ldr	r3, [pc, #384]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	055b      	lsls	r3, r3, #21
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a86:	183b      	adds	r3, r7, r0
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b5c      	ldr	r3, [pc, #368]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d11a      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a98:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b58      	ldr	r3, [pc, #352]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	0049      	lsls	r1, r1, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fb51 	bl	800114c <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	e008      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7fe fb4c 	bl	800114c <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e097      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ace:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ad0:	6a1a      	ldr	r2, [r3, #32]
 8002ad2:	23c0      	movs	r3, #192	; 0xc0
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d034      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	23c0      	movs	r3, #192	; 0xc0
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d02c      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a43      	ldr	r2, [pc, #268]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afa:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0249      	lsls	r1, r1, #9
 8002b04:	430a      	orrs	r2, r1
 8002b06:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b08:	4b3c      	ldr	r3, [pc, #240]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b0a:	6a1a      	ldr	r2, [r3, #32]
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b0e:	493e      	ldr	r1, [pc, #248]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe fb13 	bl	800114c <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e009      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fb0e 	bl	800114c <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	4a35      	ldr	r2, [pc, #212]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e058      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4a:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4a2d      	ldr	r2, [pc, #180]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b5e:	2317      	movs	r3, #23
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b6e:	4928      	ldr	r1, [pc, #160]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	2203      	movs	r2, #3
 8002b84:	4393      	bics	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2220      	movs	r2, #32
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b9c:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bac:	430a      	orrs	r2, r1
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	029b      	lsls	r3, r3, #10
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	2240      	movs	r2, #64	; 0x40
 8002be2:	4393      	bics	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b006      	add	sp, #24
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	fffffcff 	.word	0xfffffcff
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	00001388 	.word	0x00001388
 8002c10:	efffffff 	.word	0xefffffff

08002c14 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c1c:	230f      	movs	r3, #15
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e081      	b.n	8002d32 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7f5b      	ldrb	r3, [r3, #29]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fe f865 	bl	8000d10 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2210      	movs	r2, #16
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b10      	cmp	r3, #16
 8002c58:	d05c      	beq.n	8002d14 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	22ca      	movs	r2, #202	; 0xca
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2253      	movs	r2, #83	; 0x53
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c6a:	250f      	movs	r5, #15
 8002c6c:	197c      	adds	r4, r7, r5
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fbfb 	bl	800346c <RTC_EnterInitMode>
 8002c76:	0003      	movs	r3, r0
 8002c78:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002c7a:	0028      	movs	r0, r5
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12c      	bne.n	8002cde <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	492b      	ldr	r1, [pc, #172]	; (8002d3c <HAL_RTC_Init+0x128>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6919      	ldr	r1, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	041a      	lsls	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002cd0:	183c      	adds	r4, r7, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fc0c 	bl	80034f2 <RTC_ExitInitMode>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002cde:	230f      	movs	r3, #15
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d110      	bne.n	8002d0a <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4913      	ldr	r1, [pc, #76]	; (8002d40 <HAL_RTC_Init+0x12c>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	22ff      	movs	r2, #255	; 0xff
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
 8002d12:	e003      	b.n	8002d1c <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002d14:	230f      	movs	r3, #15
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002d1c:	230f      	movs	r3, #15
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	781b      	ldrb	r3, [r3, #0]
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	ff8fffbf 	.word	0xff8fffbf
 8002d40:	fffbffff 	.word	0xfffbffff

08002d44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d44:	b5b0      	push	{r4, r5, r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	7f1b      	ldrb	r3, [r3, #28]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_RTC_SetTime+0x1c>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e08e      	b.n	8002e7e <HAL_RTC_SetTime+0x13a>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d125      	bne.n	8002dbe <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2240      	movs	r2, #64	; 0x40
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d102      	bne.n	8002d84 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 fbdb 	bl	8003544 <RTC_ByteToBcd2>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 fbd4 	bl	8003544 <RTC_ByteToBcd2>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002da0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fbcc 	bl	8003544 <RTC_ByteToBcd2>
 8002dac:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dae:	0022      	movs	r2, r4
 8002db0:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	78db      	ldrb	r3, [r3, #3]
 8002db6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e017      	b.n	8002dee <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ddc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002de2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	78db      	ldrb	r3, [r3, #3]
 8002de8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	22ca      	movs	r2, #202	; 0xca
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2253      	movs	r2, #83	; 0x53
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dfe:	2513      	movs	r5, #19
 8002e00:	197c      	adds	r4, r7, r5
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fb31 	bl	800346c <RTC_EnterInitMode>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002e0e:	0028      	movs	r0, r5
 8002e10:	183b      	adds	r3, r7, r0
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d120      	bne.n	8002e5a <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	491a      	ldr	r1, [pc, #104]	; (8002e88 <HAL_RTC_SetTime+0x144>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4917      	ldr	r1, [pc, #92]	; (8002e8c <HAL_RTC_SetTime+0x148>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e4c:	183c      	adds	r4, r7, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 fb4e 	bl	80034f2 <RTC_ExitInitMode>
 8002e56:	0003      	movs	r3, r0
 8002e58:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002e5a:	2313      	movs	r3, #19
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	22ff      	movs	r2, #255	; 0xff
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]

  return status;
 8002e78:	2313      	movs	r3, #19
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b006      	add	sp, #24
 8002e84:	bdb0      	pop	{r4, r5, r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	007f7f7f 	.word	0x007f7f7f
 8002e8c:	fffbffff 	.word	0xfffbffff

08002e90 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	045b      	lsls	r3, r3, #17
 8002eb2:	0c5a      	lsrs	r2, r3, #17
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_RTC_GetTime+0xb8>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	223f      	movs	r2, #63	; 0x3f
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	227f      	movs	r2, #127	; 0x7f
 8002edc:	4013      	ands	r3, r2
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	227f      	movs	r2, #127	; 0x7f
 8002eea:	4013      	ands	r3, r2
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	0d9b      	lsrs	r3, r3, #22
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11a      	bne.n	8002f3e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 fb3a 	bl	8003586 <RTC_Bcd2ToByte>
 8002f12:	0003      	movs	r3, r0
 8002f14:	001a      	movs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fb31 	bl	8003586 <RTC_Bcd2ToByte>
 8002f24:	0003      	movs	r3, r0
 8002f26:	001a      	movs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	789b      	ldrb	r3, [r3, #2]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 fb28 	bl	8003586 <RTC_Bcd2ToByte>
 8002f36:	0003      	movs	r3, r0
 8002f38:	001a      	movs	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	007f7f7f 	.word	0x007f7f7f

08002f4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	7f1b      	ldrb	r3, [r3, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_RTC_SetDate+0x1c>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e07a      	b.n	800305e <HAL_RTC_SetDate+0x112>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2202      	movs	r2, #2
 8002f72:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <HAL_RTC_SetDate+0x4c>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	001a      	movs	r2, r3
 8002f80:	2310      	movs	r3, #16
 8002f82:	4013      	ands	r3, r2
 8002f84:	d008      	beq.n	8002f98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	330a      	adds	r3, #10
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 face 	bl	8003544 <RTC_ByteToBcd2>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fac7 	bl	8003544 <RTC_ByteToBcd2>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	789b      	ldrb	r3, [r3, #2]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 fabf 	bl	8003544 <RTC_ByteToBcd2>
 8002fc6:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fc8:	0022      	movs	r2, r4
 8002fca:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e00e      	b.n	8002ff6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	78db      	ldrb	r3, [r3, #3]
 8002fdc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fe4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	22ca      	movs	r2, #202	; 0xca
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2253      	movs	r2, #83	; 0x53
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003006:	2513      	movs	r5, #19
 8003008:	197c      	adds	r4, r7, r5
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 fa2d 	bl	800346c <RTC_EnterInitMode>
 8003012:	0003      	movs	r3, r0
 8003014:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003016:	0028      	movs	r0, r5
 8003018:	183b      	adds	r3, r7, r0
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10c      	bne.n	800303a <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4910      	ldr	r1, [pc, #64]	; (8003068 <HAL_RTC_SetDate+0x11c>)
 8003028:	400a      	ands	r2, r1
 800302a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800302c:	183c      	adds	r4, r7, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0018      	movs	r0, r3
 8003032:	f000 fa5e 	bl	80034f2 <RTC_ExitInitMode>
 8003036:	0003      	movs	r3, r0
 8003038:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800303a:	2313      	movs	r3, #19
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]

  return status;
 8003058:	2313      	movs	r3, #19
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	781b      	ldrb	r3, [r3, #0]
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b006      	add	sp, #24
 8003064:	bdb0      	pop	{r4, r5, r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	00ffff3f 	.word	0x00ffff3f

0800306c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a21      	ldr	r2, [pc, #132]	; (8003108 <HAL_RTC_GetDate+0x9c>)
 8003084:	4013      	ands	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	b2db      	uxtb	r3, r3
 8003098:	221f      	movs	r2, #31
 800309a:	4013      	ands	r3, r2
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	223f      	movs	r2, #63	; 0x3f
 80030a8:	4013      	ands	r3, r2
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2207      	movs	r2, #7
 80030b8:	4013      	ands	r3, r2
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11a      	bne.n	80030fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	78db      	ldrb	r3, [r3, #3]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 fa5b 	bl	8003586 <RTC_Bcd2ToByte>
 80030d0:	0003      	movs	r3, r0
 80030d2:	001a      	movs	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 fa52 	bl	8003586 <RTC_Bcd2ToByte>
 80030e2:	0003      	movs	r3, r0
 80030e4:	001a      	movs	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	789b      	ldrb	r3, [r3, #2]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 fa49 	bl	8003586 <RTC_Bcd2ToByte>
 80030f4:	0003      	movs	r3, r0
 80030f6:	001a      	movs	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b006      	add	sp, #24
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	00ffff3f 	.word	0x00ffff3f

0800310c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003118:	4b75      	ldr	r3, [pc, #468]	; (80032f0 <HAL_RTC_SetAlarm_IT+0x1e4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	22fa      	movs	r2, #250	; 0xfa
 800311e:	01d1      	lsls	r1, r2, #7
 8003120:	0018      	movs	r0, r3
 8003122:	f7fc fffb 	bl	800011c <__udivsi3>
 8003126:	0003      	movs	r3, r0
 8003128:	001a      	movs	r2, r3
 800312a:	0013      	movs	r3, r2
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	189b      	adds	r3, r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	7f1b      	ldrb	r3, [r3, #28]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_RTC_SetAlarm_IT+0x40>
 8003148:	2302      	movs	r3, #2
 800314a:	e0cd      	b.n	80032e8 <HAL_RTC_SetAlarm_IT+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2202      	movs	r2, #2
 8003156:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d136      	bne.n	80031cc <HAL_RTC_SetAlarm_IT+0xc0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2240      	movs	r2, #64	; 0x40
 8003166:	4013      	ands	r3, r2
 8003168:	d102      	bne.n	8003170 <HAL_RTC_SetAlarm_IT+0x64>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	0018      	movs	r0, r3
 8003176:	f000 f9e5 	bl	8003544 <RTC_ByteToBcd2>
 800317a:	0003      	movs	r3, r0
 800317c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f9de 	bl	8003544 <RTC_ByteToBcd2>
 8003188:	0003      	movs	r3, r0
 800318a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800318c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	789b      	ldrb	r3, [r3, #2]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f9d6 	bl	8003544 <RTC_ByteToBcd2>
 8003198:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800319a:	0022      	movs	r2, r4
 800319c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	78db      	ldrb	r3, [r3, #3]
 80031a2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80031a4:	431a      	orrs	r2, r3
 80031a6:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2220      	movs	r2, #32
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f000 f9c8 	bl	8003544 <RTC_ByteToBcd2>
 80031b4:	0003      	movs	r3, r0
 80031b6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80031b8:	0022      	movs	r2, r4
 80031ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80031c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e022      	b.n	8003212 <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	4013      	ands	r3, r2
 80031d6:	d102      	bne.n	80031de <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80031ea:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80031f0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80031f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2120      	movs	r1, #32
 80031fe:	5c5b      	ldrb	r3, [r3, r1]
 8003200:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003202:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003208:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800320e:	4313      	orrs	r3, r2
 8003210:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	22ca      	movs	r2, #202	; 0xca
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2253      	movs	r2, #83	; 0x53
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	492e      	ldr	r1, [pc, #184]	; (80032f4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 800323a:	400a      	ands	r2, r1
 800323c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	401a      	ands	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	492a      	ldr	r1, [pc, #168]	; (80032f8 <HAL_RTC_SetAlarm_IT+0x1ec>)
 800324e:	430a      	orrs	r2, r1
 8003250:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3b01      	subs	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	22ff      	movs	r2, #255	; 0xff
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2203      	movs	r2, #3
 800326a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e038      	b.n	80032e8 <HAL_RTC_SetAlarm_IT+0x1dc>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	d0e7      	beq.n	8003252 <HAL_RTC_SetAlarm_IT+0x146>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	0049      	lsls	r1, r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0149      	lsls	r1, r1, #5
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RTC_SetAlarm_IT+0x1f0>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_RTC_SetAlarm_IT+0x1f0>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0289      	lsls	r1, r1, #10
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RTC_SetAlarm_IT+0x1f0>)
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_RTC_SetAlarm_IT+0x1f0>)
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	0289      	lsls	r1, r1, #10
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	22ff      	movs	r2, #255	; 0xff
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b009      	add	sp, #36	; 0x24
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	20000000 	.word	0x20000000
 80032f4:	fffffeff 	.word	0xfffffeff
 80032f8:	fffffe7f 	.word	0xfffffe7f
 80032fc:	40010400 	.word	0x40010400

08003300 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be:
  *            @arg RTC_ALARM_A: Alarm A
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7f1b      	ldrb	r3, [r3, #28]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_RTC_DeactivateAlarm+0x1a>
 8003316:	2302      	movs	r3, #2
 8003318:	e048      	b.n	80033ac <HAL_RTC_DeactivateAlarm+0xac>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	22ca      	movs	r2, #202	; 0xca
 800332c:	625a      	str	r2, [r3, #36]	; 0x24
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2253      	movs	r2, #83	; 0x53
 8003334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	491c      	ldr	r1, [pc, #112]	; (80033b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003342:	400a      	ands	r2, r1
 8003344:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4919      	ldr	r1, [pc, #100]	; (80033b8 <HAL_RTC_DeactivateAlarm+0xb8>)
 8003352:	400a      	ands	r2, r1
 8003354:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003356:	f7fd fef9 	bl	800114c <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800335e:	e014      	b.n	800338a <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003360:	f7fd fef4 	bl	800114c <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad2      	subs	r2, r2, r3
 800336a:	23fa      	movs	r3, #250	; 0xfa
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	429a      	cmp	r2, r3
 8003370:	d90b      	bls.n	800338a <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	22ff      	movs	r2, #255	; 0xff
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2203      	movs	r2, #3
 800337e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e010      	b.n	80033ac <HAL_RTC_DeactivateAlarm+0xac>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d0e4      	beq.n	8003360 <HAL_RTC_DeactivateAlarm+0x60>
      }
    }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	22ff      	movs	r2, #255	; 0xff
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	fffffeff 	.word	0xfffffeff
 80033b8:	ffffefff 	.word	0xffffefff

080033bc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RTC_AlarmIRQHandler+0x58>)
 80033c6:	2280      	movs	r2, #128	; 0x80
 80033c8:	0292      	lsls	r2, r2, #10
 80033ca:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	015b      	lsls	r3, r3, #5
 80033d6:	4013      	ands	r3, r2
 80033d8:	d014      	beq.n	8003404 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00d      	beq.n	8003404 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	22ff      	movs	r2, #255	; 0xff
 80033f0:	401a      	ands	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4908      	ldr	r1, [pc, #32]	; (8003418 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f7fd f86a 	bl	80004d8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	775a      	strb	r2, [r3, #29]
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b002      	add	sp, #8
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	40010400 	.word	0x40010400
 8003418:	fffffe7f 	.word	0xfffffe7f

0800341c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <HAL_RTC_WaitForSynchro+0x4c>)
 800342e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003430:	f7fd fe8c 	bl	800114c <HAL_GetTick>
 8003434:	0003      	movs	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003438:	e00a      	b.n	8003450 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800343a:	f7fd fe87 	bl	800114c <HAL_GetTick>
 800343e:	0002      	movs	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad2      	subs	r2, r2, r3
 8003444:	23fa      	movs	r3, #250	; 0xfa
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d901      	bls.n	8003450 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e006      	b.n	800345e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	4013      	ands	r3, r2
 800345a:	d0ee      	beq.n	800343a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	00017959 	.word	0x00017959

0800346c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003478:	230f      	movs	r3, #15
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	4013      	ands	r3, r2
 800348a:	d12b      	bne.n	80034e4 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2180      	movs	r1, #128	; 0x80
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800349c:	f7fd fe56 	bl	800114c <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034a4:	e013      	b.n	80034ce <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034a6:	f7fd fe51 	bl	800114c <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	200f      	movs	r0, #15
 80034b2:	183b      	adds	r3, r7, r0
 80034b4:	1839      	adds	r1, r7, r0
 80034b6:	7809      	ldrb	r1, [r1, #0]
 80034b8:	7019      	strb	r1, [r3, #0]
 80034ba:	23fa      	movs	r3, #250	; 0xfa
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	429a      	cmp	r2, r3
 80034c0:	d905      	bls.n	80034ce <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80034c8:	183b      	adds	r3, r7, r0
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	4013      	ands	r3, r2
 80034d8:	d104      	bne.n	80034e4 <RTC_EnterInitMode+0x78>
 80034da:	230f      	movs	r3, #15
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d1e0      	bne.n	80034a6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	781b      	ldrb	r3, [r3, #0]
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034f2:	b590      	push	{r4, r7, lr}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	240f      	movs	r4, #15
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	438a      	bics	r2, r1
 8003510:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2220      	movs	r2, #32
 800351a:	4013      	ands	r3, r2
 800351c:	d10b      	bne.n	8003536 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff7b 	bl	800341c <HAL_RTC_WaitForSynchro>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d005      	beq.n	8003536 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2204      	movs	r2, #4
 800352e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003536:	230f      	movs	r3, #15
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	781b      	ldrb	r3, [r3, #0]
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b005      	add	sp, #20
 8003542:	bd90      	pop	{r4, r7, pc}

08003544 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	0002      	movs	r2, r0
 800354c:	1dfb      	adds	r3, r7, #7
 800354e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003554:	e007      	b.n	8003566 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3301      	adds	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800355c:	1dfb      	adds	r3, r7, #7
 800355e:	1dfa      	adds	r2, r7, #7
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	3a0a      	subs	r2, #10
 8003564:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b09      	cmp	r3, #9
 800356c:	d8f3      	bhi.n	8003556 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	b2da      	uxtb	r2, r3
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	b2db      	uxtb	r3, r3
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}

08003586 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	0002      	movs	r2, r0
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003596:	1dfb      	adds	r3, r7, #7
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	b2db      	uxtb	r3, r3
 800359e:	001a      	movs	r2, r3
 80035a0:	0013      	movs	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	189b      	adds	r3, r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	1dfb      	adds	r3, r7, #7
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	210f      	movs	r1, #15
 80035b4:	400b      	ands	r3, r1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	18d3      	adds	r3, r2, r3
 80035ba:	b2db      	uxtb	r3, r3
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e042      	b.n	800365c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223d      	movs	r2, #61	; 0x3d
 80035da:	5c9b      	ldrb	r3, [r3, r2]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	223c      	movs	r2, #60	; 0x3c
 80035e6:	2100      	movs	r1, #0
 80035e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7fd fbaf 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	223d      	movs	r2, #61	; 0x3d
 80035f6:	2102      	movs	r1, #2
 80035f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	0019      	movs	r1, r3
 8003604:	0010      	movs	r0, r2
 8003606:	f000 fab1 	bl	8003b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2246      	movs	r2, #70	; 0x46
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	223e      	movs	r2, #62	; 0x3e
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	223f      	movs	r2, #63	; 0x3f
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2240      	movs	r2, #64	; 0x40
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2241      	movs	r2, #65	; 0x41
 800362e:	2101      	movs	r1, #1
 8003630:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2242      	movs	r2, #66	; 0x42
 8003636:	2101      	movs	r1, #1
 8003638:	5499      	strb	r1, [r3, r2]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2243      	movs	r2, #67	; 0x43
 800363e:	2101      	movs	r1, #1
 8003640:	5499      	strb	r1, [r3, r2]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2244      	movs	r2, #68	; 0x44
 8003646:	2101      	movs	r1, #1
 8003648:	5499      	strb	r1, [r3, r2]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2245      	movs	r2, #69	; 0x45
 800364e:	2101      	movs	r1, #1
 8003650:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	223d      	movs	r2, #61	; 0x3d
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	223d      	movs	r2, #61	; 0x3d
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d001      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e036      	b.n	80036ea <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	223d      	movs	r2, #61	; 0x3d
 8003680:	2102      	movs	r1, #2
 8003682:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <HAL_TIM_Base_Start_IT+0x90>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00a      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x50>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	05db      	lsls	r3, r3, #23
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0x50>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <HAL_TIM_Base_Start_IT+0x94>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2207      	movs	r2, #7
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d010      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d6:	e007      	b.n	80036e8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40000400 	.word	0x40000400

080036fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2101      	movs	r1, #1
 8003710:	438a      	bics	r2, r1
 8003712:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_TIM_Base_Stop_IT+0x54>)
 800371c:	4013      	ands	r3, r2
 800371e:	d10d      	bne.n	800373c <HAL_TIM_Base_Stop_IT+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_TIM_Base_Stop_IT+0x58>)
 8003728:	4013      	ands	r3, r2
 800372a:	d107      	bne.n	800373c <HAL_TIM_Base_Stop_IT+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	438a      	bics	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	223d      	movs	r2, #61	; 0x3d
 8003740:	2101      	movs	r1, #1
 8003742:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b002      	add	sp, #8
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	00001111 	.word	0x00001111
 8003754:	00000444 	.word	0x00000444

08003758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d124      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2202      	movs	r2, #2
 8003776:	4013      	ands	r3, r2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d11d      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2203      	movs	r2, #3
 8003782:	4252      	negs	r2, r2
 8003784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2203      	movs	r2, #3
 8003794:	4013      	ands	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 f9ce 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80037a0:	e007      	b.n	80037b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 f9c1 	bl	8003b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f9cd 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2204      	movs	r2, #4
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d125      	bne.n	8003812 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2204      	movs	r2, #4
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d11e      	bne.n	8003812 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2205      	movs	r2, #5
 80037da:	4252      	negs	r2, r2
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	23c0      	movs	r3, #192	; 0xc0
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f9a1 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80037fa:	e007      	b.n	800380c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 f994 	bl	8003b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 f9a0 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2208      	movs	r2, #8
 800381a:	4013      	ands	r3, r2
 800381c:	2b08      	cmp	r3, #8
 800381e:	d124      	bne.n	800386a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2208      	movs	r2, #8
 8003828:	4013      	ands	r3, r2
 800382a:	2b08      	cmp	r3, #8
 800382c:	d11d      	bne.n	800386a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2209      	movs	r2, #9
 8003834:	4252      	negs	r2, r2
 8003836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2204      	movs	r2, #4
 800383c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2203      	movs	r2, #3
 8003846:	4013      	ands	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 f975 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 8003852:	e007      	b.n	8003864 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f968 	bl	8003b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f974 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2210      	movs	r2, #16
 8003872:	4013      	ands	r3, r2
 8003874:	2b10      	cmp	r3, #16
 8003876:	d125      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2210      	movs	r2, #16
 8003880:	4013      	ands	r3, r2
 8003882:	2b10      	cmp	r3, #16
 8003884:	d11e      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2211      	movs	r2, #17
 800388c:	4252      	negs	r2, r2
 800388e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2208      	movs	r2, #8
 8003894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	23c0      	movs	r3, #192	; 0xc0
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 f948 	bl	8003b3c <HAL_TIM_IC_CaptureCallback>
 80038ac:	e007      	b.n	80038be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 f93b 	bl	8003b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f947 	bl	8003b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2201      	movs	r2, #1
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10f      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d108      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2202      	movs	r2, #2
 80038e6:	4252      	negs	r2, r2
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7fc fcb7 	bl	8000260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d10f      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	4013      	ands	r3, r2
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d108      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2281      	movs	r2, #129	; 0x81
 8003914:	4252      	negs	r2, r2
 8003916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 fa96 	bl	8003e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2240      	movs	r2, #64	; 0x40
 8003928:	4013      	ands	r3, r2
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d10f      	bne.n	800394e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	4013      	ands	r3, r2
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d108      	bne.n	800394e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2241      	movs	r2, #65	; 0x41
 8003942:	4252      	negs	r2, r2
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0018      	movs	r0, r3
 800394a:	f000 f907 	bl	8003b5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2220      	movs	r2, #32
 8003956:	4013      	ands	r3, r2
 8003958:	2b20      	cmp	r3, #32
 800395a:	d10f      	bne.n	800397c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	4013      	ands	r3, r2
 8003966:	2b20      	cmp	r3, #32
 8003968:	d108      	bne.n	800397c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2221      	movs	r2, #33	; 0x21
 8003970:	4252      	negs	r2, r2
 8003972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fa60 	bl	8003e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	230f      	movs	r3, #15
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	223c      	movs	r2, #60	; 0x3c
 800399a:	5c9b      	ldrb	r3, [r3, r2]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIM_ConfigClockSource+0x20>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0bc      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x19a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	223c      	movs	r2, #60	; 0x3c
 80039a8:	2101      	movs	r1, #1
 80039aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	223d      	movs	r2, #61	; 0x3d
 80039b0:	2102      	movs	r1, #2
 80039b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2277      	movs	r2, #119	; 0x77
 80039c0:	4393      	bics	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_TIM_ConfigClockSource+0x1a4>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	0192      	lsls	r2, r2, #6
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0xde>
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	0192      	lsls	r2, r2, #6
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d900      	bls.n	80039ea <HAL_TIM_ConfigClockSource+0x66>
 80039e8:	e088      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	0152      	lsls	r2, r2, #5
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d100      	bne.n	80039f4 <HAL_TIM_ConfigClockSource+0x70>
 80039f2:	e088      	b.n	8003b06 <HAL_TIM_ConfigClockSource+0x182>
 80039f4:	2280      	movs	r2, #128	; 0x80
 80039f6:	0152      	lsls	r2, r2, #5
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d900      	bls.n	80039fe <HAL_TIM_ConfigClockSource+0x7a>
 80039fc:	e07e      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 80039fe:	2b70      	cmp	r3, #112	; 0x70
 8003a00:	d018      	beq.n	8003a34 <HAL_TIM_ConfigClockSource+0xb0>
 8003a02:	d900      	bls.n	8003a06 <HAL_TIM_ConfigClockSource+0x82>
 8003a04:	e07a      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 8003a06:	2b60      	cmp	r3, #96	; 0x60
 8003a08:	d04f      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x126>
 8003a0a:	d900      	bls.n	8003a0e <HAL_TIM_ConfigClockSource+0x8a>
 8003a0c:	e076      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 8003a0e:	2b50      	cmp	r3, #80	; 0x50
 8003a10:	d03b      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x106>
 8003a12:	d900      	bls.n	8003a16 <HAL_TIM_ConfigClockSource+0x92>
 8003a14:	e072      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d057      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x146>
 8003a1a:	d900      	bls.n	8003a1e <HAL_TIM_ConfigClockSource+0x9a>
 8003a1c:	e06e      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 8003a1e:	2b30      	cmp	r3, #48	; 0x30
 8003a20:	d063      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x166>
 8003a22:	d86b      	bhi.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d060      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x166>
 8003a28:	d868      	bhi.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d05d      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x166>
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d05b      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x166>
 8003a32:	e063      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6899      	ldr	r1, [r3, #8]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f000 f982 	bl	8003d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2277      	movs	r2, #119	; 0x77
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
      break;
 8003a60:	e052      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6899      	ldr	r1, [r3, #8]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f000 f96b 	bl	8003d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	01c9      	lsls	r1, r1, #7
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
      break;
 8003a88:	e03e      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	001a      	movs	r2, r3
 8003a98:	f000 f8de 	bl	8003c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2150      	movs	r1, #80	; 0x50
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 f938 	bl	8003d18 <TIM_ITRx_SetConfig>
      break;
 8003aa8:	e02e      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	f000 f8fc 	bl	8003cb4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2160      	movs	r1, #96	; 0x60
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 f928 	bl	8003d18 <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e01e      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	f000 f8be 	bl	8003c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f918 	bl	8003d18 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e00e      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	0019      	movs	r1, r3
 8003af4:	0010      	movs	r0, r2
 8003af6:	f000 f90f 	bl	8003d18 <TIM_ITRx_SetConfig>
      break;
 8003afa:	e005      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003afc:	230f      	movs	r3, #15
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
      break;
 8003b04:	e000      	b.n	8003b08 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b06:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	223d      	movs	r2, #61	; 0x3d
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	223c      	movs	r2, #60	; 0x3c
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]

  return status;
 8003b18:	230f      	movs	r3, #15
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	781b      	ldrb	r3, [r3, #0]
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b004      	add	sp, #16
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	ffff00ff 	.word	0xffff00ff

08003b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b002      	add	sp, #8
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <TIM_Base_SetConfig+0xd4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d008      	beq.n	8003b96 <TIM_Base_SetConfig+0x2a>
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	05db      	lsls	r3, r3, #23
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d003      	beq.n	8003b96 <TIM_Base_SetConfig+0x2a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <TIM_Base_SetConfig+0xd8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d108      	bne.n	8003ba8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2270      	movs	r2, #112	; 0x70
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <TIM_Base_SetConfig+0xd4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d014      	beq.n	8003bda <TIM_Base_SetConfig+0x6e>
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	05db      	lsls	r3, r3, #23
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d00f      	beq.n	8003bda <TIM_Base_SetConfig+0x6e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <TIM_Base_SetConfig+0xd8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <TIM_Base_SetConfig+0x6e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <TIM_Base_SetConfig+0xdc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <TIM_Base_SetConfig+0x6e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <TIM_Base_SetConfig+0xe0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_Base_SetConfig+0x6e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <TIM_Base_SetConfig+0xe8>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <TIM_Base_SetConfig+0xd4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0xbe>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <TIM_Base_SetConfig+0xe0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0xbe>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d103      	bne.n	8003c32 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	615a      	str	r2, [r3, #20]
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b004      	add	sp, #16
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40002000 	.word	0x40002000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800
 8003c54:	fffffcff 	.word	0xfffffcff

08003c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	4393      	bics	r3, r2
 8003c72:	001a      	movs	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	22f0      	movs	r2, #240	; 0xf0
 8003c82:	4393      	bics	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	220a      	movs	r2, #10
 8003c94:	4393      	bics	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b006      	add	sp, #24
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	4393      	bics	r3, r2
 8003cc8:	001a      	movs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <TIM_TI2_ConfigInputStage+0x60>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	22a0      	movs	r2, #160	; 0xa0
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b006      	add	sp, #24
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	ffff0fff 	.word	0xffff0fff

08003d18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2270      	movs	r2, #112	; 0x70
 8003d2c:	4393      	bics	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	2207      	movs	r2, #7
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b004      	add	sp, #16
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <TIM_ETR_SetConfig+0x3c>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b006      	add	sp, #24
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	ffff00ff 	.word	0xffff00ff

08003d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	223c      	movs	r2, #60	; 0x3c
 8003d9a:	5c9b      	ldrb	r3, [r3, r2]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e042      	b.n	8003e2a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223c      	movs	r2, #60	; 0x3c
 8003da8:	2101      	movs	r1, #1
 8003daa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	223d      	movs	r2, #61	; 0x3d
 8003db0:	2102      	movs	r1, #2
 8003db2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2270      	movs	r2, #112	; 0x70
 8003dc8:	4393      	bics	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00a      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	05db      	lsls	r3, r3, #23
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d004      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10c      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	4393      	bics	r3, r2
 8003e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	223d      	movs	r2, #61	; 0x3d
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	223c      	movs	r2, #60	; 0x3c
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400

08003e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e044      	b.n	8003ef8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2278      	movs	r2, #120	; 0x78
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7fc ffa7 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2224      	movs	r2, #36	; 0x24
 8003e8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2101      	movs	r1, #1
 8003e98:	438a      	bics	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 f8d0 	bl	8004044 <UART_SetConfig>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e024      	b.n	8003ef8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f000 fa03 	bl	80042c4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	490d      	ldr	r1, [pc, #52]	; (8003f00 <HAL_UART_Init+0xa4>)
 8003eca:	400a      	ands	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	212a      	movs	r1, #42	; 0x2a
 8003eda:	438a      	bics	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2101      	movs	r1, #1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 fa9b 	bl	800442c <UART_CheckIdleState>
 8003ef6:	0003      	movs	r3, r0
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b002      	add	sp, #8
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	ffffb7ff 	.word	0xffffb7ff

08003f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	1dbb      	adds	r3, r7, #6
 8003f12:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d000      	beq.n	8003f1e <HAL_UART_Transmit+0x1a>
 8003f1c:	e08d      	b.n	800403a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_UART_Transmit+0x28>
 8003f24:	1dbb      	adds	r3, r7, #6
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e085      	b.n	800403c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	015b      	lsls	r3, r3, #5
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d109      	bne.n	8003f50 <HAL_UART_Transmit+0x4c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2201      	movs	r2, #1
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d001      	beq.n	8003f50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e075      	b.n	800403c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2284      	movs	r2, #132	; 0x84
 8003f54:	2100      	movs	r1, #0
 8003f56:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2221      	movs	r2, #33	; 0x21
 8003f5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f5e:	f7fd f8f5 	bl	800114c <HAL_GetTick>
 8003f62:	0003      	movs	r3, r0
 8003f64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1dba      	adds	r2, r7, #6
 8003f6a:	2150      	movs	r1, #80	; 0x50
 8003f6c:	8812      	ldrh	r2, [r2, #0]
 8003f6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1dba      	adds	r2, r7, #6
 8003f74:	2152      	movs	r1, #82	; 0x52
 8003f76:	8812      	ldrh	r2, [r2, #0]
 8003f78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	015b      	lsls	r3, r3, #5
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d108      	bne.n	8003f98 <HAL_UART_Transmit+0x94>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e003      	b.n	8003fa0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fa0:	e030      	b.n	8004004 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	0013      	movs	r3, r2
 8003fac:	2200      	movs	r2, #0
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	f000 fae4 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e03c      	b.n	800403c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	881a      	ldrh	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	05d2      	lsls	r2, r2, #23
 8003fd2:	0dd2      	lsrs	r2, r2, #23
 8003fd4:	b292      	uxth	r2, r2
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	3302      	adds	r3, #2
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	e008      	b.n	8003ff2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	b292      	uxth	r2, r2
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2252      	movs	r2, #82	; 0x52
 8003ff6:	5a9b      	ldrh	r3, [r3, r2]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b299      	uxth	r1, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2252      	movs	r2, #82	; 0x52
 8004002:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2252      	movs	r2, #82	; 0x52
 8004008:	5a9b      	ldrh	r3, [r3, r2]
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1c8      	bne.n	8003fa2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	0013      	movs	r3, r2
 800401a:	2200      	movs	r2, #0
 800401c:	2140      	movs	r1, #64	; 0x40
 800401e:	f000 faad 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d004      	beq.n	8004030 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e005      	b.n	800403c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b008      	add	sp, #32
 8004042:	bd80      	pop	{r7, pc}

08004044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800404c:	231e      	movs	r3, #30
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a8d      	ldr	r2, [pc, #564]	; (80042a8 <UART_SetConfig+0x264>)
 8004074:	4013      	ands	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a88      	ldr	r2, [pc, #544]	; (80042ac <UART_SetConfig+0x268>)
 800408a:	4013      	ands	r3, r2
 800408c:	0019      	movs	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a7f      	ldr	r2, [pc, #508]	; (80042b0 <UART_SetConfig+0x26c>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	0019      	movs	r1, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	430a      	orrs	r2, r1
 80040be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a7b      	ldr	r2, [pc, #492]	; (80042b4 <UART_SetConfig+0x270>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d127      	bne.n	800411a <UART_SetConfig+0xd6>
 80040ca:	4b7b      	ldr	r3, [pc, #492]	; (80042b8 <UART_SetConfig+0x274>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	2203      	movs	r2, #3
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d00d      	beq.n	80040f2 <UART_SetConfig+0xae>
 80040d6:	d81b      	bhi.n	8004110 <UART_SetConfig+0xcc>
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d014      	beq.n	8004106 <UART_SetConfig+0xc2>
 80040dc:	d818      	bhi.n	8004110 <UART_SetConfig+0xcc>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <UART_SetConfig+0xa4>
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d00a      	beq.n	80040fc <UART_SetConfig+0xb8>
 80040e6:	e013      	b.n	8004110 <UART_SetConfig+0xcc>
 80040e8:	231f      	movs	r3, #31
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e021      	b.n	8004136 <UART_SetConfig+0xf2>
 80040f2:	231f      	movs	r3, #31
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e01c      	b.n	8004136 <UART_SetConfig+0xf2>
 80040fc:	231f      	movs	r3, #31
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2204      	movs	r2, #4
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	e017      	b.n	8004136 <UART_SetConfig+0xf2>
 8004106:	231f      	movs	r3, #31
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	2208      	movs	r2, #8
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e012      	b.n	8004136 <UART_SetConfig+0xf2>
 8004110:	231f      	movs	r3, #31
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	2210      	movs	r2, #16
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e00d      	b.n	8004136 <UART_SetConfig+0xf2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a67      	ldr	r2, [pc, #412]	; (80042bc <UART_SetConfig+0x278>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d104      	bne.n	800412e <UART_SetConfig+0xea>
 8004124:	231f      	movs	r3, #31
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e003      	b.n	8004136 <UART_SetConfig+0xf2>
 800412e:	231f      	movs	r3, #31
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2210      	movs	r2, #16
 8004134:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	429a      	cmp	r2, r3
 8004140:	d15c      	bne.n	80041fc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004142:	231f      	movs	r3, #31
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d015      	beq.n	8004178 <UART_SetConfig+0x134>
 800414c:	dc18      	bgt.n	8004180 <UART_SetConfig+0x13c>
 800414e:	2b04      	cmp	r3, #4
 8004150:	d00d      	beq.n	800416e <UART_SetConfig+0x12a>
 8004152:	dc15      	bgt.n	8004180 <UART_SetConfig+0x13c>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <UART_SetConfig+0x11a>
 8004158:	2b02      	cmp	r3, #2
 800415a:	d005      	beq.n	8004168 <UART_SetConfig+0x124>
 800415c:	e010      	b.n	8004180 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800415e:	f7fe fc55 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 8004162:	0003      	movs	r3, r0
 8004164:	61bb      	str	r3, [r7, #24]
        break;
 8004166:	e012      	b.n	800418e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004168:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <UART_SetConfig+0x27c>)
 800416a:	61bb      	str	r3, [r7, #24]
        break;
 800416c:	e00f      	b.n	800418e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416e:	f7fe fbd1 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8004172:	0003      	movs	r3, r0
 8004174:	61bb      	str	r3, [r7, #24]
        break;
 8004176:	e00a      	b.n	800418e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	61bb      	str	r3, [r7, #24]
        break;
 800417e:	e006      	b.n	800418e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004184:	231e      	movs	r3, #30
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
        break;
 800418c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d100      	bne.n	8004196 <UART_SetConfig+0x152>
 8004194:	e07a      	b.n	800428c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	005a      	lsls	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	18d2      	adds	r2, r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	0019      	movs	r1, r3
 80041a8:	0010      	movs	r0, r2
 80041aa:	f7fb ffb7 	bl	800011c <__udivsi3>
 80041ae:	0003      	movs	r3, r0
 80041b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b0f      	cmp	r3, #15
 80041b6:	d91c      	bls.n	80041f2 <UART_SetConfig+0x1ae>
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	429a      	cmp	r2, r3
 80041c0:	d217      	bcs.n	80041f2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	200e      	movs	r0, #14
 80041c8:	183b      	adds	r3, r7, r0
 80041ca:	210f      	movs	r1, #15
 80041cc:	438a      	bics	r2, r1
 80041ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2207      	movs	r2, #7
 80041d8:	4013      	ands	r3, r2
 80041da:	b299      	uxth	r1, r3
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	183a      	adds	r2, r7, r0
 80041e0:	8812      	ldrh	r2, [r2, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	183a      	adds	r2, r7, r0
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	e04c      	b.n	800428c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80041f2:	231e      	movs	r3, #30
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e047      	b.n	800428c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041fc:	231f      	movs	r3, #31
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d015      	beq.n	8004232 <UART_SetConfig+0x1ee>
 8004206:	dc18      	bgt.n	800423a <UART_SetConfig+0x1f6>
 8004208:	2b04      	cmp	r3, #4
 800420a:	d00d      	beq.n	8004228 <UART_SetConfig+0x1e4>
 800420c:	dc15      	bgt.n	800423a <UART_SetConfig+0x1f6>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <UART_SetConfig+0x1d4>
 8004212:	2b02      	cmp	r3, #2
 8004214:	d005      	beq.n	8004222 <UART_SetConfig+0x1de>
 8004216:	e010      	b.n	800423a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe fbf8 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 800421c:	0003      	movs	r3, r0
 800421e:	61bb      	str	r3, [r7, #24]
        break;
 8004220:	e012      	b.n	8004248 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <UART_SetConfig+0x27c>)
 8004224:	61bb      	str	r3, [r7, #24]
        break;
 8004226:	e00f      	b.n	8004248 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004228:	f7fe fb74 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 800422c:	0003      	movs	r3, r0
 800422e:	61bb      	str	r3, [r7, #24]
        break;
 8004230:	e00a      	b.n	8004248 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	61bb      	str	r3, [r7, #24]
        break;
 8004238:	e006      	b.n	8004248 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800423e:	231e      	movs	r3, #30
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
        break;
 8004246:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01e      	beq.n	800428c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	085a      	lsrs	r2, r3, #1
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	18d2      	adds	r2, r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0019      	movs	r1, r3
 800425e:	0010      	movs	r0, r2
 8004260:	f7fb ff5c 	bl	800011c <__udivsi3>
 8004264:	0003      	movs	r3, r0
 8004266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d90a      	bls.n	8004284 <UART_SetConfig+0x240>
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	025b      	lsls	r3, r3, #9
 8004274:	429a      	cmp	r2, r3
 8004276:	d205      	bcs.n	8004284 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	e003      	b.n	800428c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004284:	231e      	movs	r3, #30
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004298:	231e      	movs	r3, #30
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	781b      	ldrb	r3, [r3, #0]
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b008      	add	sp, #32
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	efff69f3 	.word	0xefff69f3
 80042ac:	ffffcfff 	.word	0xffffcfff
 80042b0:	fffff4ff 	.word	0xfffff4ff
 80042b4:	40013800 	.word	0x40013800
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40004400 	.word	0x40004400
 80042c0:	007a1200 	.word	0x007a1200

080042c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2201      	movs	r2, #1
 80042d2:	4013      	ands	r3, r2
 80042d4:	d00b      	beq.n	80042ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a4a      	ldr	r2, [pc, #296]	; (8004408 <UART_AdvFeatureConfig+0x144>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2202      	movs	r2, #2
 80042f4:	4013      	ands	r3, r2
 80042f6:	d00b      	beq.n	8004310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4a43      	ldr	r2, [pc, #268]	; (800440c <UART_AdvFeatureConfig+0x148>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2204      	movs	r2, #4
 8004316:	4013      	ands	r3, r2
 8004318:	d00b      	beq.n	8004332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a3b      	ldr	r2, [pc, #236]	; (8004410 <UART_AdvFeatureConfig+0x14c>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	2208      	movs	r2, #8
 8004338:	4013      	ands	r3, r2
 800433a:	d00b      	beq.n	8004354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4a34      	ldr	r2, [pc, #208]	; (8004414 <UART_AdvFeatureConfig+0x150>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2210      	movs	r2, #16
 800435a:	4013      	ands	r3, r2
 800435c:	d00b      	beq.n	8004376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a2c      	ldr	r2, [pc, #176]	; (8004418 <UART_AdvFeatureConfig+0x154>)
 8004366:	4013      	ands	r3, r2
 8004368:	0019      	movs	r1, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2220      	movs	r2, #32
 800437c:	4013      	ands	r3, r2
 800437e:	d00b      	beq.n	8004398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4a25      	ldr	r2, [pc, #148]	; (800441c <UART_AdvFeatureConfig+0x158>)
 8004388:	4013      	ands	r3, r2
 800438a:	0019      	movs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2240      	movs	r2, #64	; 0x40
 800439e:	4013      	ands	r3, r2
 80043a0:	d01d      	beq.n	80043de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <UART_AdvFeatureConfig+0x15c>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	0019      	movs	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	035b      	lsls	r3, r3, #13
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d10b      	bne.n	80043de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <UART_AdvFeatureConfig+0x160>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	4013      	ands	r3, r2
 80043e6:	d00b      	beq.n	8004400 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <UART_AdvFeatureConfig+0x164>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	0019      	movs	r1, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }
}
 8004400:	46c0      	nop			; (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}
 8004408:	fffdffff 	.word	0xfffdffff
 800440c:	fffeffff 	.word	0xfffeffff
 8004410:	fffbffff 	.word	0xfffbffff
 8004414:	ffff7fff 	.word	0xffff7fff
 8004418:	ffffefff 	.word	0xffffefff
 800441c:	ffffdfff 	.word	0xffffdfff
 8004420:	ffefffff 	.word	0xffefffff
 8004424:	ff9fffff 	.word	0xff9fffff
 8004428:	fff7ffff 	.word	0xfff7ffff

0800442c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b092      	sub	sp, #72	; 0x48
 8004430:	af02      	add	r7, sp, #8
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2284      	movs	r2, #132	; 0x84
 8004438:	2100      	movs	r1, #0
 800443a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800443c:	f7fc fe86 	bl	800114c <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2208      	movs	r2, #8
 800444c:	4013      	ands	r3, r2
 800444e:	2b08      	cmp	r3, #8
 8004450:	d12c      	bne.n	80044ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	2280      	movs	r2, #128	; 0x80
 8004456:	0391      	lsls	r1, r2, #14
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4a46      	ldr	r2, [pc, #280]	; (8004574 <UART_CheckIdleState+0x148>)
 800445c:	9200      	str	r2, [sp, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	f000 f88c 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d021      	beq.n	80044ac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004468:	f3ef 8310 	mrs	r3, PRIMASK
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
 8004472:	2301      	movs	r3, #1
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	f383 8810 	msr	PRIMASK, r3
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	438a      	bics	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	f383 8810 	msr	PRIMASK, r3
}
 8004498:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2278      	movs	r2, #120	; 0x78
 80044a4:	2100      	movs	r1, #0
 80044a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e05f      	b.n	800456c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2204      	movs	r2, #4
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d146      	bne.n	8004548 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	03d1      	lsls	r1, r2, #15
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <UART_CheckIdleState+0x148>)
 80044c4:	9200      	str	r2, [sp, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f000 f858 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d03b      	beq.n	8004548 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d0:	f3ef 8310 	mrs	r3, PRIMASK
 80044d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80044d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
 80044da:	2301      	movs	r3, #1
 80044dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4921      	ldr	r1, [pc, #132]	; (8004578 <UART_CheckIdleState+0x14c>)
 80044f2:	400a      	ands	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f383 8810 	msr	PRIMASK, r3
}
 8004500:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004502:	f3ef 8310 	mrs	r3, PRIMASK
 8004506:	61bb      	str	r3, [r7, #24]
  return(result);
 8004508:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
 800450c:	2301      	movs	r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	438a      	bics	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f383 8810 	msr	PRIMASK, r3
}
 8004532:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	2120      	movs	r1, #32
 800453a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2278      	movs	r2, #120	; 0x78
 8004540:	2100      	movs	r1, #0
 8004542:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e011      	b.n	800456c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	2120      	movs	r1, #32
 8004554:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2278      	movs	r2, #120	; 0x78
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	b010      	add	sp, #64	; 0x40
 8004572:	bd80      	pop	{r7, pc}
 8004574:	01ffffff 	.word	0x01ffffff
 8004578:	fffffedf 	.word	0xfffffedf

0800457c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	1dfb      	adds	r3, r7, #7
 800458a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458c:	e04b      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3301      	adds	r3, #1
 8004592:	d048      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004594:	f7fc fdda 	bl	800114c <HAL_GetTick>
 8004598:	0002      	movs	r2, r0
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e04b      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2204      	movs	r2, #4
 80045b6:	4013      	ands	r3, r2
 80045b8:	d035      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2208      	movs	r2, #8
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d111      	bne.n	80045ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2208      	movs	r2, #8
 80045ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 f83c 	bl	8004650 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2284      	movs	r2, #132	; 0x84
 80045dc:	2108      	movs	r1, #8
 80045de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2278      	movs	r2, #120	; 0x78
 80045e4:	2100      	movs	r1, #0
 80045e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e02c      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	401a      	ands	r2, r3
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d112      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	0112      	lsls	r2, r2, #4
 8004608:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	0018      	movs	r0, r3
 800460e:	f000 f81f 	bl	8004650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2284      	movs	r2, #132	; 0x84
 8004616:	2120      	movs	r1, #32
 8004618:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2278      	movs	r2, #120	; 0x78
 800461e:	2100      	movs	r1, #0
 8004620:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00f      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	425a      	negs	r2, r3
 8004636:	4153      	adcs	r3, r2
 8004638:	b2db      	uxtb	r3, r3
 800463a:	001a      	movs	r2, r3
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d0a4      	beq.n	800458e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	617b      	str	r3, [r7, #20]
  return(result);
 800465e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
 8004662:	2301      	movs	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4926      	ldr	r1, [pc, #152]	; (8004714 <UART_EndRxTransfer+0xc4>)
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	623b      	str	r3, [r7, #32]
  return(result);
 8004690:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
 8004694:	2301      	movs	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2101      	movs	r1, #1
 80046ac:	438a      	bics	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d118      	bne.n	80046f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ce:	2301      	movs	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2110      	movs	r1, #16
 80046e6:	438a      	bics	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	2120      	movs	r1, #32
 80046fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	669a      	str	r2, [r3, #104]	; 0x68
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b00e      	add	sp, #56	; 0x38
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	fffffedf 	.word	0xfffffedf

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	; (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	2000000c 	.word	0x2000000c

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	2600      	movs	r6, #0
 8004728:	4d0c      	ldr	r5, [pc, #48]	; (800475c <__libc_init_array+0x38>)
 800472a:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472c:	1b64      	subs	r4, r4, r5
 800472e:	10a4      	asrs	r4, r4, #2
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	2600      	movs	r6, #0
 8004736:	f001 fa4b 	bl	8005bd0 <_init>
 800473a:	4d0a      	ldr	r5, [pc, #40]	; (8004764 <__libc_init_array+0x40>)
 800473c:	4c0a      	ldr	r4, [pc, #40]	; (8004768 <__libc_init_array+0x44>)
 800473e:	1b64      	subs	r4, r4, r5
 8004740:	10a4      	asrs	r4, r4, #2
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	00b3      	lsls	r3, r6, #2
 800474a:	58eb      	ldr	r3, [r5, r3]
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	00b3      	lsls	r3, r6, #2
 8004754:	58eb      	ldr	r3, [r5, r3]
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	08005d20 	.word	0x08005d20
 8004760:	08005d20 	.word	0x08005d20
 8004764:	08005d20 	.word	0x08005d20
 8004768:	08005d24 	.word	0x08005d24

0800476c <memset>:
 800476c:	0003      	movs	r3, r0
 800476e:	1882      	adds	r2, r0, r2
 8004770:	4293      	cmp	r3, r2
 8004772:	d100      	bne.n	8004776 <memset+0xa>
 8004774:	4770      	bx	lr
 8004776:	7019      	strb	r1, [r3, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	e7f9      	b.n	8004770 <memset+0x4>

0800477c <iprintf>:
 800477c:	b40f      	push	{r0, r1, r2, r3}
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <iprintf+0x30>)
 8004780:	b513      	push	{r0, r1, r4, lr}
 8004782:	681c      	ldr	r4, [r3, #0]
 8004784:	2c00      	cmp	r4, #0
 8004786:	d005      	beq.n	8004794 <iprintf+0x18>
 8004788:	69a3      	ldr	r3, [r4, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <iprintf+0x18>
 800478e:	0020      	movs	r0, r4
 8004790:	f000 faa6 	bl	8004ce0 <__sinit>
 8004794:	ab05      	add	r3, sp, #20
 8004796:	0020      	movs	r0, r4
 8004798:	9a04      	ldr	r2, [sp, #16]
 800479a:	68a1      	ldr	r1, [r4, #8]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	f000 fe1b 	bl	80053d8 <_vfiprintf_r>
 80047a2:	bc16      	pop	{r1, r2, r4}
 80047a4:	bc08      	pop	{r3}
 80047a6:	b004      	add	sp, #16
 80047a8:	4718      	bx	r3
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	2000000c 	.word	0x2000000c

080047b0 <_puts_r>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	0005      	movs	r5, r0
 80047b4:	000e      	movs	r6, r1
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d004      	beq.n	80047c4 <_puts_r+0x14>
 80047ba:	6983      	ldr	r3, [r0, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <_puts_r+0x14>
 80047c0:	f000 fa8e 	bl	8004ce0 <__sinit>
 80047c4:	69ab      	ldr	r3, [r5, #24]
 80047c6:	68ac      	ldr	r4, [r5, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <_puts_r+0x22>
 80047cc:	0028      	movs	r0, r5
 80047ce:	f000 fa87 	bl	8004ce0 <__sinit>
 80047d2:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <_puts_r+0xd8>)
 80047d4:	429c      	cmp	r4, r3
 80047d6:	d122      	bne.n	800481e <_puts_r+0x6e>
 80047d8:	686c      	ldr	r4, [r5, #4]
 80047da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047dc:	07db      	lsls	r3, r3, #31
 80047de:	d405      	bmi.n	80047ec <_puts_r+0x3c>
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	059b      	lsls	r3, r3, #22
 80047e4:	d402      	bmi.n	80047ec <_puts_r+0x3c>
 80047e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e8:	f000 fb1b 	bl	8004e22 <__retarget_lock_acquire_recursive>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	071b      	lsls	r3, r3, #28
 80047f0:	d502      	bpl.n	80047f8 <_puts_r+0x48>
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d129      	bne.n	800484c <_puts_r+0x9c>
 80047f8:	0021      	movs	r1, r4
 80047fa:	0028      	movs	r0, r5
 80047fc:	f000 f8ca 	bl	8004994 <__swsetup_r>
 8004800:	2800      	cmp	r0, #0
 8004802:	d023      	beq.n	800484c <_puts_r+0x9c>
 8004804:	2501      	movs	r5, #1
 8004806:	426d      	negs	r5, r5
 8004808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800480a:	07db      	lsls	r3, r3, #31
 800480c:	d405      	bmi.n	800481a <_puts_r+0x6a>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	059b      	lsls	r3, r3, #22
 8004812:	d402      	bmi.n	800481a <_puts_r+0x6a>
 8004814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004816:	f000 fb05 	bl	8004e24 <__retarget_lock_release_recursive>
 800481a:	0028      	movs	r0, r5
 800481c:	bd70      	pop	{r4, r5, r6, pc}
 800481e:	4b1b      	ldr	r3, [pc, #108]	; (800488c <_puts_r+0xdc>)
 8004820:	429c      	cmp	r4, r3
 8004822:	d101      	bne.n	8004828 <_puts_r+0x78>
 8004824:	68ac      	ldr	r4, [r5, #8]
 8004826:	e7d8      	b.n	80047da <_puts_r+0x2a>
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <_puts_r+0xe0>)
 800482a:	429c      	cmp	r4, r3
 800482c:	d1d5      	bne.n	80047da <_puts_r+0x2a>
 800482e:	68ec      	ldr	r4, [r5, #12]
 8004830:	e7d3      	b.n	80047da <_puts_r+0x2a>
 8004832:	3601      	adds	r6, #1
 8004834:	60a3      	str	r3, [r4, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	da04      	bge.n	8004844 <_puts_r+0x94>
 800483a:	69a2      	ldr	r2, [r4, #24]
 800483c:	429a      	cmp	r2, r3
 800483e:	dc16      	bgt.n	800486e <_puts_r+0xbe>
 8004840:	290a      	cmp	r1, #10
 8004842:	d014      	beq.n	800486e <_puts_r+0xbe>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	6022      	str	r2, [r4, #0]
 800484a:	7019      	strb	r1, [r3, #0]
 800484c:	68a3      	ldr	r3, [r4, #8]
 800484e:	7831      	ldrb	r1, [r6, #0]
 8004850:	3b01      	subs	r3, #1
 8004852:	2900      	cmp	r1, #0
 8004854:	d1ed      	bne.n	8004832 <_puts_r+0x82>
 8004856:	60a3      	str	r3, [r4, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	da0f      	bge.n	800487c <_puts_r+0xcc>
 800485c:	0028      	movs	r0, r5
 800485e:	0022      	movs	r2, r4
 8004860:	310a      	adds	r1, #10
 8004862:	f000 f841 	bl	80048e8 <__swbuf_r>
 8004866:	250a      	movs	r5, #10
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d1cd      	bne.n	8004808 <_puts_r+0x58>
 800486c:	e7ca      	b.n	8004804 <_puts_r+0x54>
 800486e:	0022      	movs	r2, r4
 8004870:	0028      	movs	r0, r5
 8004872:	f000 f839 	bl	80048e8 <__swbuf_r>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	d1e8      	bne.n	800484c <_puts_r+0x9c>
 800487a:	e7c3      	b.n	8004804 <_puts_r+0x54>
 800487c:	250a      	movs	r5, #10
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	6022      	str	r2, [r4, #0]
 8004884:	701d      	strb	r5, [r3, #0]
 8004886:	e7bf      	b.n	8004808 <_puts_r+0x58>
 8004888:	08005cac 	.word	0x08005cac
 800488c:	08005ccc 	.word	0x08005ccc
 8004890:	08005c8c 	.word	0x08005c8c

08004894 <puts>:
 8004894:	b510      	push	{r4, lr}
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <puts+0x10>)
 8004898:	0001      	movs	r1, r0
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	f7ff ff88 	bl	80047b0 <_puts_r>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	2000000c 	.word	0x2000000c

080048a8 <siprintf>:
 80048a8:	b40e      	push	{r1, r2, r3}
 80048aa:	b500      	push	{lr}
 80048ac:	490b      	ldr	r1, [pc, #44]	; (80048dc <siprintf+0x34>)
 80048ae:	b09c      	sub	sp, #112	; 0x70
 80048b0:	ab1d      	add	r3, sp, #116	; 0x74
 80048b2:	9002      	str	r0, [sp, #8]
 80048b4:	9006      	str	r0, [sp, #24]
 80048b6:	9107      	str	r1, [sp, #28]
 80048b8:	9104      	str	r1, [sp, #16]
 80048ba:	4809      	ldr	r0, [pc, #36]	; (80048e0 <siprintf+0x38>)
 80048bc:	4909      	ldr	r1, [pc, #36]	; (80048e4 <siprintf+0x3c>)
 80048be:	cb04      	ldmia	r3!, {r2}
 80048c0:	9105      	str	r1, [sp, #20]
 80048c2:	6800      	ldr	r0, [r0, #0]
 80048c4:	a902      	add	r1, sp, #8
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	f000 fc5e 	bl	8005188 <_svfiprintf_r>
 80048cc:	2300      	movs	r3, #0
 80048ce:	9a02      	ldr	r2, [sp, #8]
 80048d0:	7013      	strb	r3, [r2, #0]
 80048d2:	b01c      	add	sp, #112	; 0x70
 80048d4:	bc08      	pop	{r3}
 80048d6:	b003      	add	sp, #12
 80048d8:	4718      	bx	r3
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	7fffffff 	.word	0x7fffffff
 80048e0:	2000000c 	.word	0x2000000c
 80048e4:	ffff0208 	.word	0xffff0208

080048e8 <__swbuf_r>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	0005      	movs	r5, r0
 80048ec:	000e      	movs	r6, r1
 80048ee:	0014      	movs	r4, r2
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d004      	beq.n	80048fe <__swbuf_r+0x16>
 80048f4:	6983      	ldr	r3, [r0, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <__swbuf_r+0x16>
 80048fa:	f000 f9f1 	bl	8004ce0 <__sinit>
 80048fe:	4b22      	ldr	r3, [pc, #136]	; (8004988 <__swbuf_r+0xa0>)
 8004900:	429c      	cmp	r4, r3
 8004902:	d12e      	bne.n	8004962 <__swbuf_r+0x7a>
 8004904:	686c      	ldr	r4, [r5, #4]
 8004906:	69a3      	ldr	r3, [r4, #24]
 8004908:	60a3      	str	r3, [r4, #8]
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	d532      	bpl.n	8004976 <__swbuf_r+0x8e>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02f      	beq.n	8004976 <__swbuf_r+0x8e>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	6922      	ldr	r2, [r4, #16]
 800491a:	b2f7      	uxtb	r7, r6
 800491c:	1a98      	subs	r0, r3, r2
 800491e:	6963      	ldr	r3, [r4, #20]
 8004920:	b2f6      	uxtb	r6, r6
 8004922:	4283      	cmp	r3, r0
 8004924:	dc05      	bgt.n	8004932 <__swbuf_r+0x4a>
 8004926:	0021      	movs	r1, r4
 8004928:	0028      	movs	r0, r5
 800492a:	f000 f937 	bl	8004b9c <_fflush_r>
 800492e:	2800      	cmp	r0, #0
 8004930:	d127      	bne.n	8004982 <__swbuf_r+0x9a>
 8004932:	68a3      	ldr	r3, [r4, #8]
 8004934:	3001      	adds	r0, #1
 8004936:	3b01      	subs	r3, #1
 8004938:	60a3      	str	r3, [r4, #8]
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	6022      	str	r2, [r4, #0]
 8004940:	701f      	strb	r7, [r3, #0]
 8004942:	6963      	ldr	r3, [r4, #20]
 8004944:	4283      	cmp	r3, r0
 8004946:	d004      	beq.n	8004952 <__swbuf_r+0x6a>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	07db      	lsls	r3, r3, #31
 800494c:	d507      	bpl.n	800495e <__swbuf_r+0x76>
 800494e:	2e0a      	cmp	r6, #10
 8004950:	d105      	bne.n	800495e <__swbuf_r+0x76>
 8004952:	0021      	movs	r1, r4
 8004954:	0028      	movs	r0, r5
 8004956:	f000 f921 	bl	8004b9c <_fflush_r>
 800495a:	2800      	cmp	r0, #0
 800495c:	d111      	bne.n	8004982 <__swbuf_r+0x9a>
 800495e:	0030      	movs	r0, r6
 8004960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <__swbuf_r+0xa4>)
 8004964:	429c      	cmp	r4, r3
 8004966:	d101      	bne.n	800496c <__swbuf_r+0x84>
 8004968:	68ac      	ldr	r4, [r5, #8]
 800496a:	e7cc      	b.n	8004906 <__swbuf_r+0x1e>
 800496c:	4b08      	ldr	r3, [pc, #32]	; (8004990 <__swbuf_r+0xa8>)
 800496e:	429c      	cmp	r4, r3
 8004970:	d1c9      	bne.n	8004906 <__swbuf_r+0x1e>
 8004972:	68ec      	ldr	r4, [r5, #12]
 8004974:	e7c7      	b.n	8004906 <__swbuf_r+0x1e>
 8004976:	0021      	movs	r1, r4
 8004978:	0028      	movs	r0, r5
 800497a:	f000 f80b 	bl	8004994 <__swsetup_r>
 800497e:	2800      	cmp	r0, #0
 8004980:	d0c9      	beq.n	8004916 <__swbuf_r+0x2e>
 8004982:	2601      	movs	r6, #1
 8004984:	4276      	negs	r6, r6
 8004986:	e7ea      	b.n	800495e <__swbuf_r+0x76>
 8004988:	08005cac 	.word	0x08005cac
 800498c:	08005ccc 	.word	0x08005ccc
 8004990:	08005c8c 	.word	0x08005c8c

08004994 <__swsetup_r>:
 8004994:	4b37      	ldr	r3, [pc, #220]	; (8004a74 <__swsetup_r+0xe0>)
 8004996:	b570      	push	{r4, r5, r6, lr}
 8004998:	681d      	ldr	r5, [r3, #0]
 800499a:	0006      	movs	r6, r0
 800499c:	000c      	movs	r4, r1
 800499e:	2d00      	cmp	r5, #0
 80049a0:	d005      	beq.n	80049ae <__swsetup_r+0x1a>
 80049a2:	69ab      	ldr	r3, [r5, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <__swsetup_r+0x1a>
 80049a8:	0028      	movs	r0, r5
 80049aa:	f000 f999 	bl	8004ce0 <__sinit>
 80049ae:	4b32      	ldr	r3, [pc, #200]	; (8004a78 <__swsetup_r+0xe4>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d10f      	bne.n	80049d4 <__swsetup_r+0x40>
 80049b4:	686c      	ldr	r4, [r5, #4]
 80049b6:	230c      	movs	r3, #12
 80049b8:	5ee2      	ldrsh	r2, [r4, r3]
 80049ba:	b293      	uxth	r3, r2
 80049bc:	0711      	lsls	r1, r2, #28
 80049be:	d42d      	bmi.n	8004a1c <__swsetup_r+0x88>
 80049c0:	06d9      	lsls	r1, r3, #27
 80049c2:	d411      	bmi.n	80049e8 <__swsetup_r+0x54>
 80049c4:	2309      	movs	r3, #9
 80049c6:	2001      	movs	r0, #1
 80049c8:	6033      	str	r3, [r6, #0]
 80049ca:	3337      	adds	r3, #55	; 0x37
 80049cc:	4313      	orrs	r3, r2
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	4240      	negs	r0, r0
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <__swsetup_r+0xe8>)
 80049d6:	429c      	cmp	r4, r3
 80049d8:	d101      	bne.n	80049de <__swsetup_r+0x4a>
 80049da:	68ac      	ldr	r4, [r5, #8]
 80049dc:	e7eb      	b.n	80049b6 <__swsetup_r+0x22>
 80049de:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <__swsetup_r+0xec>)
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d1e8      	bne.n	80049b6 <__swsetup_r+0x22>
 80049e4:	68ec      	ldr	r4, [r5, #12]
 80049e6:	e7e6      	b.n	80049b6 <__swsetup_r+0x22>
 80049e8:	075b      	lsls	r3, r3, #29
 80049ea:	d513      	bpl.n	8004a14 <__swsetup_r+0x80>
 80049ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ee:	2900      	cmp	r1, #0
 80049f0:	d008      	beq.n	8004a04 <__swsetup_r+0x70>
 80049f2:	0023      	movs	r3, r4
 80049f4:	3344      	adds	r3, #68	; 0x44
 80049f6:	4299      	cmp	r1, r3
 80049f8:	d002      	beq.n	8004a00 <__swsetup_r+0x6c>
 80049fa:	0030      	movs	r0, r6
 80049fc:	f000 fa80 	bl	8004f00 <_free_r>
 8004a00:	2300      	movs	r3, #0
 8004a02:	6363      	str	r3, [r4, #52]	; 0x34
 8004a04:	2224      	movs	r2, #36	; 0x24
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	4393      	bics	r3, r2
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	2308      	movs	r3, #8
 8004a16:	89a2      	ldrh	r2, [r4, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <__swsetup_r+0xa6>
 8004a22:	21a0      	movs	r1, #160	; 0xa0
 8004a24:	2280      	movs	r2, #128	; 0x80
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	0089      	lsls	r1, r1, #2
 8004a2a:	0092      	lsls	r2, r2, #2
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <__swsetup_r+0xa6>
 8004a32:	0021      	movs	r1, r4
 8004a34:	0030      	movs	r0, r6
 8004a36:	f000 fa1f 	bl	8004e78 <__smakebuf_r>
 8004a3a:	220c      	movs	r2, #12
 8004a3c:	5ea3      	ldrsh	r3, [r4, r2]
 8004a3e:	2001      	movs	r0, #1
 8004a40:	001a      	movs	r2, r3
 8004a42:	b299      	uxth	r1, r3
 8004a44:	4002      	ands	r2, r0
 8004a46:	4203      	tst	r3, r0
 8004a48:	d00f      	beq.n	8004a6a <__swsetup_r+0xd6>
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	60a2      	str	r2, [r4, #8]
 8004a4e:	6962      	ldr	r2, [r4, #20]
 8004a50:	4252      	negs	r2, r2
 8004a52:	61a2      	str	r2, [r4, #24]
 8004a54:	2000      	movs	r0, #0
 8004a56:	6922      	ldr	r2, [r4, #16]
 8004a58:	4282      	cmp	r2, r0
 8004a5a:	d1ba      	bne.n	80049d2 <__swsetup_r+0x3e>
 8004a5c:	060a      	lsls	r2, r1, #24
 8004a5e:	d5b8      	bpl.n	80049d2 <__swsetup_r+0x3e>
 8004a60:	2240      	movs	r2, #64	; 0x40
 8004a62:	4313      	orrs	r3, r2
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	3801      	subs	r0, #1
 8004a68:	e7b3      	b.n	80049d2 <__swsetup_r+0x3e>
 8004a6a:	0788      	lsls	r0, r1, #30
 8004a6c:	d400      	bmi.n	8004a70 <__swsetup_r+0xdc>
 8004a6e:	6962      	ldr	r2, [r4, #20]
 8004a70:	60a2      	str	r2, [r4, #8]
 8004a72:	e7ef      	b.n	8004a54 <__swsetup_r+0xc0>
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	08005cac 	.word	0x08005cac
 8004a7c:	08005ccc 	.word	0x08005ccc
 8004a80:	08005c8c 	.word	0x08005c8c

08004a84 <__sflush_r>:
 8004a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a86:	898b      	ldrh	r3, [r1, #12]
 8004a88:	0005      	movs	r5, r0
 8004a8a:	000c      	movs	r4, r1
 8004a8c:	071a      	lsls	r2, r3, #28
 8004a8e:	d45f      	bmi.n	8004b50 <__sflush_r+0xcc>
 8004a90:	684a      	ldr	r2, [r1, #4]
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	dc04      	bgt.n	8004aa0 <__sflush_r+0x1c>
 8004a96:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	dc01      	bgt.n	8004aa0 <__sflush_r+0x1c>
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004aa0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	d0fa      	beq.n	8004a9c <__sflush_r+0x18>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	682e      	ldr	r6, [r5, #0]
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	001a      	movs	r2, r3
 8004ab0:	0149      	lsls	r1, r1, #5
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	420b      	tst	r3, r1
 8004ab6:	d034      	beq.n	8004b22 <__sflush_r+0x9e>
 8004ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	075b      	lsls	r3, r3, #29
 8004abe:	d506      	bpl.n	8004ace <__sflush_r+0x4a>
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	1ac0      	subs	r0, r0, r3
 8004ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <__sflush_r+0x4a>
 8004aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004acc:	1ac0      	subs	r0, r0, r3
 8004ace:	0002      	movs	r2, r0
 8004ad0:	6a21      	ldr	r1, [r4, #32]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	0028      	movs	r0, r5
 8004ad6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004ad8:	47b8      	blx	r7
 8004ada:	89a1      	ldrh	r1, [r4, #12]
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d106      	bne.n	8004aee <__sflush_r+0x6a>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	2b1d      	cmp	r3, #29
 8004ae4:	d831      	bhi.n	8004b4a <__sflush_r+0xc6>
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <__sflush_r+0x114>)
 8004ae8:	40da      	lsrs	r2, r3
 8004aea:	07d3      	lsls	r3, r2, #31
 8004aec:	d52d      	bpl.n	8004b4a <__sflush_r+0xc6>
 8004aee:	2300      	movs	r3, #0
 8004af0:	6063      	str	r3, [r4, #4]
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	04cb      	lsls	r3, r1, #19
 8004af8:	d505      	bpl.n	8004b06 <__sflush_r+0x82>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	d102      	bne.n	8004b04 <__sflush_r+0x80>
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d100      	bne.n	8004b06 <__sflush_r+0x82>
 8004b04:	6560      	str	r0, [r4, #84]	; 0x54
 8004b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b08:	602e      	str	r6, [r5, #0]
 8004b0a:	2900      	cmp	r1, #0
 8004b0c:	d0c6      	beq.n	8004a9c <__sflush_r+0x18>
 8004b0e:	0023      	movs	r3, r4
 8004b10:	3344      	adds	r3, #68	; 0x44
 8004b12:	4299      	cmp	r1, r3
 8004b14:	d002      	beq.n	8004b1c <__sflush_r+0x98>
 8004b16:	0028      	movs	r0, r5
 8004b18:	f000 f9f2 	bl	8004f00 <_free_r>
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	6360      	str	r0, [r4, #52]	; 0x34
 8004b20:	e7bd      	b.n	8004a9e <__sflush_r+0x1a>
 8004b22:	2301      	movs	r3, #1
 8004b24:	0028      	movs	r0, r5
 8004b26:	6a21      	ldr	r1, [r4, #32]
 8004b28:	47b8      	blx	r7
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	d1c5      	bne.n	8004aba <__sflush_r+0x36>
 8004b2e:	682b      	ldr	r3, [r5, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0c2      	beq.n	8004aba <__sflush_r+0x36>
 8004b34:	2b1d      	cmp	r3, #29
 8004b36:	d001      	beq.n	8004b3c <__sflush_r+0xb8>
 8004b38:	2b16      	cmp	r3, #22
 8004b3a:	d101      	bne.n	8004b40 <__sflush_r+0xbc>
 8004b3c:	602e      	str	r6, [r5, #0]
 8004b3e:	e7ad      	b.n	8004a9c <__sflush_r+0x18>
 8004b40:	2340      	movs	r3, #64	; 0x40
 8004b42:	89a2      	ldrh	r2, [r4, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	e7a9      	b.n	8004a9e <__sflush_r+0x1a>
 8004b4a:	2340      	movs	r3, #64	; 0x40
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	e7fa      	b.n	8004b46 <__sflush_r+0xc2>
 8004b50:	690f      	ldr	r7, [r1, #16]
 8004b52:	2f00      	cmp	r7, #0
 8004b54:	d0a2      	beq.n	8004a9c <__sflush_r+0x18>
 8004b56:	680a      	ldr	r2, [r1, #0]
 8004b58:	600f      	str	r7, [r1, #0]
 8004b5a:	1bd2      	subs	r2, r2, r7
 8004b5c:	9201      	str	r2, [sp, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	079b      	lsls	r3, r3, #30
 8004b62:	d100      	bne.n	8004b66 <__sflush_r+0xe2>
 8004b64:	694a      	ldr	r2, [r1, #20]
 8004b66:	60a2      	str	r2, [r4, #8]
 8004b68:	9b01      	ldr	r3, [sp, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dc00      	bgt.n	8004b70 <__sflush_r+0xec>
 8004b6e:	e795      	b.n	8004a9c <__sflush_r+0x18>
 8004b70:	003a      	movs	r2, r7
 8004b72:	0028      	movs	r0, r5
 8004b74:	9b01      	ldr	r3, [sp, #4]
 8004b76:	6a21      	ldr	r1, [r4, #32]
 8004b78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b7a:	47b0      	blx	r6
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	dc06      	bgt.n	8004b8e <__sflush_r+0x10a>
 8004b80:	2340      	movs	r3, #64	; 0x40
 8004b82:	2001      	movs	r0, #1
 8004b84:	89a2      	ldrh	r2, [r4, #12]
 8004b86:	4240      	negs	r0, r0
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	e787      	b.n	8004a9e <__sflush_r+0x1a>
 8004b8e:	9b01      	ldr	r3, [sp, #4]
 8004b90:	183f      	adds	r7, r7, r0
 8004b92:	1a1b      	subs	r3, r3, r0
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	e7e7      	b.n	8004b68 <__sflush_r+0xe4>
 8004b98:	20400001 	.word	0x20400001

08004b9c <_fflush_r>:
 8004b9c:	690b      	ldr	r3, [r1, #16]
 8004b9e:	b570      	push	{r4, r5, r6, lr}
 8004ba0:	0005      	movs	r5, r0
 8004ba2:	000c      	movs	r4, r1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <_fflush_r+0x12>
 8004ba8:	2500      	movs	r5, #0
 8004baa:	0028      	movs	r0, r5
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d004      	beq.n	8004bbc <_fflush_r+0x20>
 8004bb2:	6983      	ldr	r3, [r0, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <_fflush_r+0x20>
 8004bb8:	f000 f892 	bl	8004ce0 <__sinit>
 8004bbc:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <_fflush_r+0x74>)
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	d11b      	bne.n	8004bfa <_fflush_r+0x5e>
 8004bc2:	686c      	ldr	r4, [r5, #4]
 8004bc4:	220c      	movs	r2, #12
 8004bc6:	5ea3      	ldrsh	r3, [r4, r2]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ed      	beq.n	8004ba8 <_fflush_r+0xc>
 8004bcc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bce:	07d2      	lsls	r2, r2, #31
 8004bd0:	d404      	bmi.n	8004bdc <_fflush_r+0x40>
 8004bd2:	059b      	lsls	r3, r3, #22
 8004bd4:	d402      	bmi.n	8004bdc <_fflush_r+0x40>
 8004bd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd8:	f000 f923 	bl	8004e22 <__retarget_lock_acquire_recursive>
 8004bdc:	0028      	movs	r0, r5
 8004bde:	0021      	movs	r1, r4
 8004be0:	f7ff ff50 	bl	8004a84 <__sflush_r>
 8004be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004be6:	0005      	movs	r5, r0
 8004be8:	07db      	lsls	r3, r3, #31
 8004bea:	d4de      	bmi.n	8004baa <_fflush_r+0xe>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	059b      	lsls	r3, r3, #22
 8004bf0:	d4db      	bmi.n	8004baa <_fflush_r+0xe>
 8004bf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf4:	f000 f916 	bl	8004e24 <__retarget_lock_release_recursive>
 8004bf8:	e7d7      	b.n	8004baa <_fflush_r+0xe>
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <_fflush_r+0x78>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	d101      	bne.n	8004c04 <_fflush_r+0x68>
 8004c00:	68ac      	ldr	r4, [r5, #8]
 8004c02:	e7df      	b.n	8004bc4 <_fflush_r+0x28>
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <_fflush_r+0x7c>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d1dc      	bne.n	8004bc4 <_fflush_r+0x28>
 8004c0a:	68ec      	ldr	r4, [r5, #12]
 8004c0c:	e7da      	b.n	8004bc4 <_fflush_r+0x28>
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	08005cac 	.word	0x08005cac
 8004c14:	08005ccc 	.word	0x08005ccc
 8004c18:	08005c8c 	.word	0x08005c8c

08004c1c <std>:
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	b510      	push	{r4, lr}
 8004c20:	0004      	movs	r4, r0
 8004c22:	6003      	str	r3, [r0, #0]
 8004c24:	6043      	str	r3, [r0, #4]
 8004c26:	6083      	str	r3, [r0, #8]
 8004c28:	8181      	strh	r1, [r0, #12]
 8004c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	81c2      	strh	r2, [r0, #14]
 8004c30:	6103      	str	r3, [r0, #16]
 8004c32:	6143      	str	r3, [r0, #20]
 8004c34:	6183      	str	r3, [r0, #24]
 8004c36:	2208      	movs	r2, #8
 8004c38:	305c      	adds	r0, #92	; 0x5c
 8004c3a:	f7ff fd97 	bl	800476c <memset>
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <std+0x38>)
 8004c40:	6224      	str	r4, [r4, #32]
 8004c42:	6263      	str	r3, [r4, #36]	; 0x24
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <std+0x3c>)
 8004c46:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <std+0x40>)
 8004c4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <std+0x44>)
 8004c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	08005975 	.word	0x08005975
 8004c58:	0800599d 	.word	0x0800599d
 8004c5c:	080059d5 	.word	0x080059d5
 8004c60:	08005a01 	.word	0x08005a01

08004c64 <_cleanup_r>:
 8004c64:	b510      	push	{r4, lr}
 8004c66:	4902      	ldr	r1, [pc, #8]	; (8004c70 <_cleanup_r+0xc>)
 8004c68:	f000 f8ba 	bl	8004de0 <_fwalk_reent>
 8004c6c:	bd10      	pop	{r4, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	08004b9d 	.word	0x08004b9d

08004c74 <__sfmoreglue>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	2568      	movs	r5, #104	; 0x68
 8004c78:	1e4a      	subs	r2, r1, #1
 8004c7a:	4355      	muls	r5, r2
 8004c7c:	000e      	movs	r6, r1
 8004c7e:	0029      	movs	r1, r5
 8004c80:	3174      	adds	r1, #116	; 0x74
 8004c82:	f000 f9a9 	bl	8004fd8 <_malloc_r>
 8004c86:	1e04      	subs	r4, r0, #0
 8004c88:	d008      	beq.n	8004c9c <__sfmoreglue+0x28>
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	002a      	movs	r2, r5
 8004c8e:	6001      	str	r1, [r0, #0]
 8004c90:	6046      	str	r6, [r0, #4]
 8004c92:	300c      	adds	r0, #12
 8004c94:	60a0      	str	r0, [r4, #8]
 8004c96:	3268      	adds	r2, #104	; 0x68
 8004c98:	f7ff fd68 	bl	800476c <memset>
 8004c9c:	0020      	movs	r0, r4
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}

08004ca0 <__sfp_lock_acquire>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4802      	ldr	r0, [pc, #8]	; (8004cac <__sfp_lock_acquire+0xc>)
 8004ca4:	f000 f8bd 	bl	8004e22 <__retarget_lock_acquire_recursive>
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	200002ad 	.word	0x200002ad

08004cb0 <__sfp_lock_release>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4802      	ldr	r0, [pc, #8]	; (8004cbc <__sfp_lock_release+0xc>)
 8004cb4:	f000 f8b6 	bl	8004e24 <__retarget_lock_release_recursive>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	200002ad 	.word	0x200002ad

08004cc0 <__sinit_lock_acquire>:
 8004cc0:	b510      	push	{r4, lr}
 8004cc2:	4802      	ldr	r0, [pc, #8]	; (8004ccc <__sinit_lock_acquire+0xc>)
 8004cc4:	f000 f8ad 	bl	8004e22 <__retarget_lock_acquire_recursive>
 8004cc8:	bd10      	pop	{r4, pc}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	200002ae 	.word	0x200002ae

08004cd0 <__sinit_lock_release>:
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	4802      	ldr	r0, [pc, #8]	; (8004cdc <__sinit_lock_release+0xc>)
 8004cd4:	f000 f8a6 	bl	8004e24 <__retarget_lock_release_recursive>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	200002ae 	.word	0x200002ae

08004ce0 <__sinit>:
 8004ce0:	b513      	push	{r0, r1, r4, lr}
 8004ce2:	0004      	movs	r4, r0
 8004ce4:	f7ff ffec 	bl	8004cc0 <__sinit_lock_acquire>
 8004ce8:	69a3      	ldr	r3, [r4, #24]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <__sinit+0x14>
 8004cee:	f7ff ffef 	bl	8004cd0 <__sinit_lock_release>
 8004cf2:	bd13      	pop	{r0, r1, r4, pc}
 8004cf4:	64a3      	str	r3, [r4, #72]	; 0x48
 8004cf6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8004cfa:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <__sinit+0x68>)
 8004cfc:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <__sinit+0x6c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	d101      	bne.n	8004d0c <__sinit+0x2c>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	61a3      	str	r3, [r4, #24]
 8004d0c:	0020      	movs	r0, r4
 8004d0e:	f000 f81f 	bl	8004d50 <__sfp>
 8004d12:	6060      	str	r0, [r4, #4]
 8004d14:	0020      	movs	r0, r4
 8004d16:	f000 f81b 	bl	8004d50 <__sfp>
 8004d1a:	60a0      	str	r0, [r4, #8]
 8004d1c:	0020      	movs	r0, r4
 8004d1e:	f000 f817 	bl	8004d50 <__sfp>
 8004d22:	2200      	movs	r2, #0
 8004d24:	2104      	movs	r1, #4
 8004d26:	60e0      	str	r0, [r4, #12]
 8004d28:	6860      	ldr	r0, [r4, #4]
 8004d2a:	f7ff ff77 	bl	8004c1c <std>
 8004d2e:	2201      	movs	r2, #1
 8004d30:	2109      	movs	r1, #9
 8004d32:	68a0      	ldr	r0, [r4, #8]
 8004d34:	f7ff ff72 	bl	8004c1c <std>
 8004d38:	2202      	movs	r2, #2
 8004d3a:	2112      	movs	r1, #18
 8004d3c:	68e0      	ldr	r0, [r4, #12]
 8004d3e:	f7ff ff6d 	bl	8004c1c <std>
 8004d42:	2301      	movs	r3, #1
 8004d44:	61a3      	str	r3, [r4, #24]
 8004d46:	e7d2      	b.n	8004cee <__sinit+0xe>
 8004d48:	08005c88 	.word	0x08005c88
 8004d4c:	08004c65 	.word	0x08004c65

08004d50 <__sfp>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	0007      	movs	r7, r0
 8004d54:	f7ff ffa4 	bl	8004ca0 <__sfp_lock_acquire>
 8004d58:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <__sfp+0x88>)
 8004d5a:	681e      	ldr	r6, [r3, #0]
 8004d5c:	69b3      	ldr	r3, [r6, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <__sfp+0x18>
 8004d62:	0030      	movs	r0, r6
 8004d64:	f7ff ffbc 	bl	8004ce0 <__sinit>
 8004d68:	3648      	adds	r6, #72	; 0x48
 8004d6a:	68b4      	ldr	r4, [r6, #8]
 8004d6c:	6873      	ldr	r3, [r6, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	d504      	bpl.n	8004d7c <__sfp+0x2c>
 8004d72:	6833      	ldr	r3, [r6, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d022      	beq.n	8004dbe <__sfp+0x6e>
 8004d78:	6836      	ldr	r6, [r6, #0]
 8004d7a:	e7f6      	b.n	8004d6a <__sfp+0x1a>
 8004d7c:	220c      	movs	r2, #12
 8004d7e:	5ea5      	ldrsh	r5, [r4, r2]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d11a      	bne.n	8004dba <__sfp+0x6a>
 8004d84:	0020      	movs	r0, r4
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <__sfp+0x8c>)
 8004d88:	3058      	adds	r0, #88	; 0x58
 8004d8a:	60e3      	str	r3, [r4, #12]
 8004d8c:	6665      	str	r5, [r4, #100]	; 0x64
 8004d8e:	f000 f847 	bl	8004e20 <__retarget_lock_init_recursive>
 8004d92:	f7ff ff8d 	bl	8004cb0 <__sfp_lock_release>
 8004d96:	0020      	movs	r0, r4
 8004d98:	2208      	movs	r2, #8
 8004d9a:	0029      	movs	r1, r5
 8004d9c:	6025      	str	r5, [r4, #0]
 8004d9e:	60a5      	str	r5, [r4, #8]
 8004da0:	6065      	str	r5, [r4, #4]
 8004da2:	6125      	str	r5, [r4, #16]
 8004da4:	6165      	str	r5, [r4, #20]
 8004da6:	61a5      	str	r5, [r4, #24]
 8004da8:	305c      	adds	r0, #92	; 0x5c
 8004daa:	f7ff fcdf 	bl	800476c <memset>
 8004dae:	6365      	str	r5, [r4, #52]	; 0x34
 8004db0:	63a5      	str	r5, [r4, #56]	; 0x38
 8004db2:	64a5      	str	r5, [r4, #72]	; 0x48
 8004db4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004db6:	0020      	movs	r0, r4
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dba:	3468      	adds	r4, #104	; 0x68
 8004dbc:	e7d7      	b.n	8004d6e <__sfp+0x1e>
 8004dbe:	2104      	movs	r1, #4
 8004dc0:	0038      	movs	r0, r7
 8004dc2:	f7ff ff57 	bl	8004c74 <__sfmoreglue>
 8004dc6:	1e04      	subs	r4, r0, #0
 8004dc8:	6030      	str	r0, [r6, #0]
 8004dca:	d1d5      	bne.n	8004d78 <__sfp+0x28>
 8004dcc:	f7ff ff70 	bl	8004cb0 <__sfp_lock_release>
 8004dd0:	230c      	movs	r3, #12
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	e7ef      	b.n	8004db6 <__sfp+0x66>
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	08005c88 	.word	0x08005c88
 8004ddc:	ffff0001 	.word	0xffff0001

08004de0 <_fwalk_reent>:
 8004de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de2:	0004      	movs	r4, r0
 8004de4:	0006      	movs	r6, r0
 8004de6:	2700      	movs	r7, #0
 8004de8:	9101      	str	r1, [sp, #4]
 8004dea:	3448      	adds	r4, #72	; 0x48
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	68a5      	ldr	r5, [r4, #8]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	9b00      	ldr	r3, [sp, #0]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	d504      	bpl.n	8004e04 <_fwalk_reent+0x24>
 8004dfa:	6824      	ldr	r4, [r4, #0]
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	d1f5      	bne.n	8004dec <_fwalk_reent+0xc>
 8004e00:	0038      	movs	r0, r7
 8004e02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e04:	89ab      	ldrh	r3, [r5, #12]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d908      	bls.n	8004e1c <_fwalk_reent+0x3c>
 8004e0a:	220e      	movs	r2, #14
 8004e0c:	5eab      	ldrsh	r3, [r5, r2]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	d004      	beq.n	8004e1c <_fwalk_reent+0x3c>
 8004e12:	0029      	movs	r1, r5
 8004e14:	0030      	movs	r0, r6
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	4798      	blx	r3
 8004e1a:	4307      	orrs	r7, r0
 8004e1c:	3568      	adds	r5, #104	; 0x68
 8004e1e:	e7e8      	b.n	8004df2 <_fwalk_reent+0x12>

08004e20 <__retarget_lock_init_recursive>:
 8004e20:	4770      	bx	lr

08004e22 <__retarget_lock_acquire_recursive>:
 8004e22:	4770      	bx	lr

08004e24 <__retarget_lock_release_recursive>:
 8004e24:	4770      	bx	lr
	...

08004e28 <__swhatbuf_r>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	000e      	movs	r6, r1
 8004e2c:	001d      	movs	r5, r3
 8004e2e:	230e      	movs	r3, #14
 8004e30:	5ec9      	ldrsh	r1, [r1, r3]
 8004e32:	0014      	movs	r4, r2
 8004e34:	b096      	sub	sp, #88	; 0x58
 8004e36:	2900      	cmp	r1, #0
 8004e38:	da08      	bge.n	8004e4c <__swhatbuf_r+0x24>
 8004e3a:	220c      	movs	r2, #12
 8004e3c:	5eb3      	ldrsh	r3, [r6, r2]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	602a      	str	r2, [r5, #0]
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	d411      	bmi.n	8004e6a <__swhatbuf_r+0x42>
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	e00f      	b.n	8004e6c <__swhatbuf_r+0x44>
 8004e4c:	466a      	mov	r2, sp
 8004e4e:	f000 fe03 	bl	8005a58 <_fstat_r>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	dbf1      	blt.n	8004e3a <__swhatbuf_r+0x12>
 8004e56:	23f0      	movs	r3, #240	; 0xf0
 8004e58:	9901      	ldr	r1, [sp, #4]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	4019      	ands	r1, r3
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <__swhatbuf_r+0x4c>)
 8004e60:	18c9      	adds	r1, r1, r3
 8004e62:	424b      	negs	r3, r1
 8004e64:	4159      	adcs	r1, r3
 8004e66:	6029      	str	r1, [r5, #0]
 8004e68:	e7ed      	b.n	8004e46 <__swhatbuf_r+0x1e>
 8004e6a:	2340      	movs	r3, #64	; 0x40
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	b016      	add	sp, #88	; 0x58
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	ffffe000 	.word	0xffffe000

08004e78 <__smakebuf_r>:
 8004e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e7a:	2602      	movs	r6, #2
 8004e7c:	898b      	ldrh	r3, [r1, #12]
 8004e7e:	0005      	movs	r5, r0
 8004e80:	000c      	movs	r4, r1
 8004e82:	4233      	tst	r3, r6
 8004e84:	d006      	beq.n	8004e94 <__smakebuf_r+0x1c>
 8004e86:	0023      	movs	r3, r4
 8004e88:	3347      	adds	r3, #71	; 0x47
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	2301      	movs	r3, #1
 8004e90:	6163      	str	r3, [r4, #20]
 8004e92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004e94:	466a      	mov	r2, sp
 8004e96:	ab01      	add	r3, sp, #4
 8004e98:	f7ff ffc6 	bl	8004e28 <__swhatbuf_r>
 8004e9c:	9900      	ldr	r1, [sp, #0]
 8004e9e:	0007      	movs	r7, r0
 8004ea0:	0028      	movs	r0, r5
 8004ea2:	f000 f899 	bl	8004fd8 <_malloc_r>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d108      	bne.n	8004ebc <__smakebuf_r+0x44>
 8004eaa:	220c      	movs	r2, #12
 8004eac:	5ea3      	ldrsh	r3, [r4, r2]
 8004eae:	059a      	lsls	r2, r3, #22
 8004eb0:	d4ef      	bmi.n	8004e92 <__smakebuf_r+0x1a>
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	431e      	orrs	r6, r3
 8004eb8:	81a6      	strh	r6, [r4, #12]
 8004eba:	e7e4      	b.n	8004e86 <__smakebuf_r+0xe>
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <__smakebuf_r+0x84>)
 8004ebe:	62ab      	str	r3, [r5, #40]	; 0x28
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	89a2      	ldrh	r2, [r4, #12]
 8004ec4:	6020      	str	r0, [r4, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	81a3      	strh	r3, [r4, #12]
 8004eca:	9b00      	ldr	r3, [sp, #0]
 8004ecc:	6120      	str	r0, [r4, #16]
 8004ece:	6163      	str	r3, [r4, #20]
 8004ed0:	9b01      	ldr	r3, [sp, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00d      	beq.n	8004ef2 <__smakebuf_r+0x7a>
 8004ed6:	0028      	movs	r0, r5
 8004ed8:	230e      	movs	r3, #14
 8004eda:	5ee1      	ldrsh	r1, [r4, r3]
 8004edc:	f000 fdce 	bl	8005a7c <_isatty_r>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d006      	beq.n	8004ef2 <__smakebuf_r+0x7a>
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	4393      	bics	r3, r2
 8004eea:	001a      	movs	r2, r3
 8004eec:	2301      	movs	r3, #1
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	89a0      	ldrh	r0, [r4, #12]
 8004ef4:	4307      	orrs	r7, r0
 8004ef6:	81a7      	strh	r7, [r4, #12]
 8004ef8:	e7cb      	b.n	8004e92 <__smakebuf_r+0x1a>
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	08004c65 	.word	0x08004c65

08004f00 <_free_r>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	0005      	movs	r5, r0
 8004f04:	2900      	cmp	r1, #0
 8004f06:	d010      	beq.n	8004f2a <_free_r+0x2a>
 8004f08:	1f0c      	subs	r4, r1, #4
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	da00      	bge.n	8004f12 <_free_r+0x12>
 8004f10:	18e4      	adds	r4, r4, r3
 8004f12:	0028      	movs	r0, r5
 8004f14:	f000 fe00 	bl	8005b18 <__malloc_lock>
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <_free_r+0x90>)
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <_free_r+0x2c>
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	6014      	str	r4, [r2, #0]
 8004f24:	0028      	movs	r0, r5
 8004f26:	f000 fdff 	bl	8005b28 <__malloc_unlock>
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
 8004f2c:	42a3      	cmp	r3, r4
 8004f2e:	d908      	bls.n	8004f42 <_free_r+0x42>
 8004f30:	6821      	ldr	r1, [r4, #0]
 8004f32:	1860      	adds	r0, r4, r1
 8004f34:	4283      	cmp	r3, r0
 8004f36:	d1f3      	bne.n	8004f20 <_free_r+0x20>
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	1841      	adds	r1, r0, r1
 8004f3e:	6021      	str	r1, [r4, #0]
 8004f40:	e7ee      	b.n	8004f20 <_free_r+0x20>
 8004f42:	001a      	movs	r2, r3
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <_free_r+0x4e>
 8004f4a:	42a3      	cmp	r3, r4
 8004f4c:	d9f9      	bls.n	8004f42 <_free_r+0x42>
 8004f4e:	6811      	ldr	r1, [r2, #0]
 8004f50:	1850      	adds	r0, r2, r1
 8004f52:	42a0      	cmp	r0, r4
 8004f54:	d10b      	bne.n	8004f6e <_free_r+0x6e>
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	1809      	adds	r1, r1, r0
 8004f5a:	1850      	adds	r0, r2, r1
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	4283      	cmp	r3, r0
 8004f60:	d1e0      	bne.n	8004f24 <_free_r+0x24>
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	1841      	adds	r1, r0, r1
 8004f68:	6011      	str	r1, [r2, #0]
 8004f6a:	6053      	str	r3, [r2, #4]
 8004f6c:	e7da      	b.n	8004f24 <_free_r+0x24>
 8004f6e:	42a0      	cmp	r0, r4
 8004f70:	d902      	bls.n	8004f78 <_free_r+0x78>
 8004f72:	230c      	movs	r3, #12
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	e7d5      	b.n	8004f24 <_free_r+0x24>
 8004f78:	6821      	ldr	r1, [r4, #0]
 8004f7a:	1860      	adds	r0, r4, r1
 8004f7c:	4283      	cmp	r3, r0
 8004f7e:	d103      	bne.n	8004f88 <_free_r+0x88>
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	1841      	adds	r1, r0, r1
 8004f86:	6021      	str	r1, [r4, #0]
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	6054      	str	r4, [r2, #4]
 8004f8c:	e7ca      	b.n	8004f24 <_free_r+0x24>
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	200002b0 	.word	0x200002b0

08004f94 <sbrk_aligned>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4e0f      	ldr	r6, [pc, #60]	; (8004fd4 <sbrk_aligned+0x40>)
 8004f98:	000d      	movs	r5, r1
 8004f9a:	6831      	ldr	r1, [r6, #0]
 8004f9c:	0004      	movs	r4, r0
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	d102      	bne.n	8004fa8 <sbrk_aligned+0x14>
 8004fa2:	f000 fcd5 	bl	8005950 <_sbrk_r>
 8004fa6:	6030      	str	r0, [r6, #0]
 8004fa8:	0029      	movs	r1, r5
 8004faa:	0020      	movs	r0, r4
 8004fac:	f000 fcd0 	bl	8005950 <_sbrk_r>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d00a      	beq.n	8004fca <sbrk_aligned+0x36>
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	1cc5      	adds	r5, r0, #3
 8004fb8:	439d      	bics	r5, r3
 8004fba:	42a8      	cmp	r0, r5
 8004fbc:	d007      	beq.n	8004fce <sbrk_aligned+0x3a>
 8004fbe:	1a29      	subs	r1, r5, r0
 8004fc0:	0020      	movs	r0, r4
 8004fc2:	f000 fcc5 	bl	8005950 <_sbrk_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d101      	bne.n	8004fce <sbrk_aligned+0x3a>
 8004fca:	2501      	movs	r5, #1
 8004fcc:	426d      	negs	r5, r5
 8004fce:	0028      	movs	r0, r5
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	200002b4 	.word	0x200002b4

08004fd8 <_malloc_r>:
 8004fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fda:	2203      	movs	r2, #3
 8004fdc:	1ccb      	adds	r3, r1, #3
 8004fde:	4393      	bics	r3, r2
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	0006      	movs	r6, r0
 8004fe4:	001f      	movs	r7, r3
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d232      	bcs.n	8005050 <_malloc_r+0x78>
 8004fea:	270c      	movs	r7, #12
 8004fec:	42b9      	cmp	r1, r7
 8004fee:	d831      	bhi.n	8005054 <_malloc_r+0x7c>
 8004ff0:	0030      	movs	r0, r6
 8004ff2:	f000 fd91 	bl	8005b18 <__malloc_lock>
 8004ff6:	4d32      	ldr	r5, [pc, #200]	; (80050c0 <_malloc_r+0xe8>)
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	001c      	movs	r4, r3
 8004ffc:	2c00      	cmp	r4, #0
 8004ffe:	d12e      	bne.n	800505e <_malloc_r+0x86>
 8005000:	0039      	movs	r1, r7
 8005002:	0030      	movs	r0, r6
 8005004:	f7ff ffc6 	bl	8004f94 <sbrk_aligned>
 8005008:	0004      	movs	r4, r0
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	d11e      	bne.n	800504c <_malloc_r+0x74>
 800500e:	682c      	ldr	r4, [r5, #0]
 8005010:	0025      	movs	r5, r4
 8005012:	2d00      	cmp	r5, #0
 8005014:	d14a      	bne.n	80050ac <_malloc_r+0xd4>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	0029      	movs	r1, r5
 800501a:	18e3      	adds	r3, r4, r3
 800501c:	0030      	movs	r0, r6
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	f000 fc96 	bl	8005950 <_sbrk_r>
 8005024:	9b01      	ldr	r3, [sp, #4]
 8005026:	4283      	cmp	r3, r0
 8005028:	d143      	bne.n	80050b2 <_malloc_r+0xda>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	3703      	adds	r7, #3
 800502e:	1aff      	subs	r7, r7, r3
 8005030:	2303      	movs	r3, #3
 8005032:	439f      	bics	r7, r3
 8005034:	3708      	adds	r7, #8
 8005036:	2f0c      	cmp	r7, #12
 8005038:	d200      	bcs.n	800503c <_malloc_r+0x64>
 800503a:	270c      	movs	r7, #12
 800503c:	0039      	movs	r1, r7
 800503e:	0030      	movs	r0, r6
 8005040:	f7ff ffa8 	bl	8004f94 <sbrk_aligned>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d034      	beq.n	80050b2 <_malloc_r+0xda>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	19df      	adds	r7, r3, r7
 800504c:	6027      	str	r7, [r4, #0]
 800504e:	e013      	b.n	8005078 <_malloc_r+0xa0>
 8005050:	2b00      	cmp	r3, #0
 8005052:	dacb      	bge.n	8004fec <_malloc_r+0x14>
 8005054:	230c      	movs	r3, #12
 8005056:	2500      	movs	r5, #0
 8005058:	6033      	str	r3, [r6, #0]
 800505a:	0028      	movs	r0, r5
 800505c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	1bd1      	subs	r1, r2, r7
 8005062:	d420      	bmi.n	80050a6 <_malloc_r+0xce>
 8005064:	290b      	cmp	r1, #11
 8005066:	d917      	bls.n	8005098 <_malloc_r+0xc0>
 8005068:	19e2      	adds	r2, r4, r7
 800506a:	6027      	str	r7, [r4, #0]
 800506c:	42a3      	cmp	r3, r4
 800506e:	d111      	bne.n	8005094 <_malloc_r+0xbc>
 8005070:	602a      	str	r2, [r5, #0]
 8005072:	6863      	ldr	r3, [r4, #4]
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	6053      	str	r3, [r2, #4]
 8005078:	0030      	movs	r0, r6
 800507a:	0025      	movs	r5, r4
 800507c:	f000 fd54 	bl	8005b28 <__malloc_unlock>
 8005080:	2207      	movs	r2, #7
 8005082:	350b      	adds	r5, #11
 8005084:	1d23      	adds	r3, r4, #4
 8005086:	4395      	bics	r5, r2
 8005088:	1aea      	subs	r2, r5, r3
 800508a:	429d      	cmp	r5, r3
 800508c:	d0e5      	beq.n	800505a <_malloc_r+0x82>
 800508e:	1b5b      	subs	r3, r3, r5
 8005090:	50a3      	str	r3, [r4, r2]
 8005092:	e7e2      	b.n	800505a <_malloc_r+0x82>
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	e7ec      	b.n	8005072 <_malloc_r+0x9a>
 8005098:	6862      	ldr	r2, [r4, #4]
 800509a:	42a3      	cmp	r3, r4
 800509c:	d101      	bne.n	80050a2 <_malloc_r+0xca>
 800509e:	602a      	str	r2, [r5, #0]
 80050a0:	e7ea      	b.n	8005078 <_malloc_r+0xa0>
 80050a2:	605a      	str	r2, [r3, #4]
 80050a4:	e7e8      	b.n	8005078 <_malloc_r+0xa0>
 80050a6:	0023      	movs	r3, r4
 80050a8:	6864      	ldr	r4, [r4, #4]
 80050aa:	e7a7      	b.n	8004ffc <_malloc_r+0x24>
 80050ac:	002c      	movs	r4, r5
 80050ae:	686d      	ldr	r5, [r5, #4]
 80050b0:	e7af      	b.n	8005012 <_malloc_r+0x3a>
 80050b2:	230c      	movs	r3, #12
 80050b4:	0030      	movs	r0, r6
 80050b6:	6033      	str	r3, [r6, #0]
 80050b8:	f000 fd36 	bl	8005b28 <__malloc_unlock>
 80050bc:	e7cd      	b.n	800505a <_malloc_r+0x82>
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	200002b0 	.word	0x200002b0

080050c4 <__ssputs_r>:
 80050c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c6:	688e      	ldr	r6, [r1, #8]
 80050c8:	b085      	sub	sp, #20
 80050ca:	0007      	movs	r7, r0
 80050cc:	000c      	movs	r4, r1
 80050ce:	9203      	str	r2, [sp, #12]
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	429e      	cmp	r6, r3
 80050d4:	d83c      	bhi.n	8005150 <__ssputs_r+0x8c>
 80050d6:	2390      	movs	r3, #144	; 0x90
 80050d8:	898a      	ldrh	r2, [r1, #12]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	421a      	tst	r2, r3
 80050de:	d034      	beq.n	800514a <__ssputs_r+0x86>
 80050e0:	6909      	ldr	r1, [r1, #16]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	6960      	ldr	r0, [r4, #20]
 80050e6:	1a5b      	subs	r3, r3, r1
 80050e8:	9302      	str	r3, [sp, #8]
 80050ea:	2303      	movs	r3, #3
 80050ec:	4343      	muls	r3, r0
 80050ee:	0fdd      	lsrs	r5, r3, #31
 80050f0:	18ed      	adds	r5, r5, r3
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	9802      	ldr	r0, [sp, #8]
 80050f6:	3301      	adds	r3, #1
 80050f8:	181b      	adds	r3, r3, r0
 80050fa:	106d      	asrs	r5, r5, #1
 80050fc:	42ab      	cmp	r3, r5
 80050fe:	d900      	bls.n	8005102 <__ssputs_r+0x3e>
 8005100:	001d      	movs	r5, r3
 8005102:	0553      	lsls	r3, r2, #21
 8005104:	d532      	bpl.n	800516c <__ssputs_r+0xa8>
 8005106:	0029      	movs	r1, r5
 8005108:	0038      	movs	r0, r7
 800510a:	f7ff ff65 	bl	8004fd8 <_malloc_r>
 800510e:	1e06      	subs	r6, r0, #0
 8005110:	d109      	bne.n	8005126 <__ssputs_r+0x62>
 8005112:	230c      	movs	r3, #12
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	2340      	movs	r3, #64	; 0x40
 8005118:	2001      	movs	r0, #1
 800511a:	89a2      	ldrh	r2, [r4, #12]
 800511c:	4240      	negs	r0, r0
 800511e:	4313      	orrs	r3, r2
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	b005      	add	sp, #20
 8005124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005126:	9a02      	ldr	r2, [sp, #8]
 8005128:	6921      	ldr	r1, [r4, #16]
 800512a:	f000 fcd8 	bl	8005ade <memcpy>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <__ssputs_r+0xc0>)
 8005132:	401a      	ands	r2, r3
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	4313      	orrs	r3, r2
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	9b02      	ldr	r3, [sp, #8]
 800513c:	6126      	str	r6, [r4, #16]
 800513e:	18f6      	adds	r6, r6, r3
 8005140:	6026      	str	r6, [r4, #0]
 8005142:	6165      	str	r5, [r4, #20]
 8005144:	9e01      	ldr	r6, [sp, #4]
 8005146:	1aed      	subs	r5, r5, r3
 8005148:	60a5      	str	r5, [r4, #8]
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	429e      	cmp	r6, r3
 800514e:	d900      	bls.n	8005152 <__ssputs_r+0x8e>
 8005150:	9e01      	ldr	r6, [sp, #4]
 8005152:	0032      	movs	r2, r6
 8005154:	9903      	ldr	r1, [sp, #12]
 8005156:	6820      	ldr	r0, [r4, #0]
 8005158:	f000 fcca 	bl	8005af0 <memmove>
 800515c:	68a3      	ldr	r3, [r4, #8]
 800515e:	2000      	movs	r0, #0
 8005160:	1b9b      	subs	r3, r3, r6
 8005162:	60a3      	str	r3, [r4, #8]
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	199e      	adds	r6, r3, r6
 8005168:	6026      	str	r6, [r4, #0]
 800516a:	e7da      	b.n	8005122 <__ssputs_r+0x5e>
 800516c:	002a      	movs	r2, r5
 800516e:	0038      	movs	r0, r7
 8005170:	f000 fce2 	bl	8005b38 <_realloc_r>
 8005174:	1e06      	subs	r6, r0, #0
 8005176:	d1e0      	bne.n	800513a <__ssputs_r+0x76>
 8005178:	0038      	movs	r0, r7
 800517a:	6921      	ldr	r1, [r4, #16]
 800517c:	f7ff fec0 	bl	8004f00 <_free_r>
 8005180:	e7c7      	b.n	8005112 <__ssputs_r+0x4e>
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	fffffb7f 	.word	0xfffffb7f

08005188 <_svfiprintf_r>:
 8005188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800518a:	b0a1      	sub	sp, #132	; 0x84
 800518c:	9003      	str	r0, [sp, #12]
 800518e:	001d      	movs	r5, r3
 8005190:	898b      	ldrh	r3, [r1, #12]
 8005192:	000f      	movs	r7, r1
 8005194:	0016      	movs	r6, r2
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	d511      	bpl.n	80051be <_svfiprintf_r+0x36>
 800519a:	690b      	ldr	r3, [r1, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10e      	bne.n	80051be <_svfiprintf_r+0x36>
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	f7ff ff19 	bl	8004fd8 <_malloc_r>
 80051a6:	6038      	str	r0, [r7, #0]
 80051a8:	6138      	str	r0, [r7, #16]
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d105      	bne.n	80051ba <_svfiprintf_r+0x32>
 80051ae:	230c      	movs	r3, #12
 80051b0:	9a03      	ldr	r2, [sp, #12]
 80051b2:	3801      	subs	r0, #1
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	b021      	add	sp, #132	; 0x84
 80051b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ba:	2340      	movs	r3, #64	; 0x40
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	2300      	movs	r3, #0
 80051c0:	ac08      	add	r4, sp, #32
 80051c2:	6163      	str	r3, [r4, #20]
 80051c4:	3320      	adds	r3, #32
 80051c6:	7663      	strb	r3, [r4, #25]
 80051c8:	3310      	adds	r3, #16
 80051ca:	76a3      	strb	r3, [r4, #26]
 80051cc:	9507      	str	r5, [sp, #28]
 80051ce:	0035      	movs	r5, r6
 80051d0:	782b      	ldrb	r3, [r5, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <_svfiprintf_r+0x52>
 80051d6:	2b25      	cmp	r3, #37	; 0x25
 80051d8:	d147      	bne.n	800526a <_svfiprintf_r+0xe2>
 80051da:	1bab      	subs	r3, r5, r6
 80051dc:	9305      	str	r3, [sp, #20]
 80051de:	42b5      	cmp	r5, r6
 80051e0:	d00c      	beq.n	80051fc <_svfiprintf_r+0x74>
 80051e2:	0032      	movs	r2, r6
 80051e4:	0039      	movs	r1, r7
 80051e6:	9803      	ldr	r0, [sp, #12]
 80051e8:	f7ff ff6c 	bl	80050c4 <__ssputs_r>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d100      	bne.n	80051f2 <_svfiprintf_r+0x6a>
 80051f0:	e0ae      	b.n	8005350 <_svfiprintf_r+0x1c8>
 80051f2:	6962      	ldr	r2, [r4, #20]
 80051f4:	9b05      	ldr	r3, [sp, #20]
 80051f6:	4694      	mov	ip, r2
 80051f8:	4463      	add	r3, ip
 80051fa:	6163      	str	r3, [r4, #20]
 80051fc:	782b      	ldrb	r3, [r5, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d100      	bne.n	8005204 <_svfiprintf_r+0x7c>
 8005202:	e0a5      	b.n	8005350 <_svfiprintf_r+0x1c8>
 8005204:	2201      	movs	r2, #1
 8005206:	2300      	movs	r3, #0
 8005208:	4252      	negs	r2, r2
 800520a:	6062      	str	r2, [r4, #4]
 800520c:	a904      	add	r1, sp, #16
 800520e:	3254      	adds	r2, #84	; 0x54
 8005210:	1852      	adds	r2, r2, r1
 8005212:	1c6e      	adds	r6, r5, #1
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	60e3      	str	r3, [r4, #12]
 8005218:	60a3      	str	r3, [r4, #8]
 800521a:	7013      	strb	r3, [r2, #0]
 800521c:	65a3      	str	r3, [r4, #88]	; 0x58
 800521e:	2205      	movs	r2, #5
 8005220:	7831      	ldrb	r1, [r6, #0]
 8005222:	4854      	ldr	r0, [pc, #336]	; (8005374 <_svfiprintf_r+0x1ec>)
 8005224:	f000 fc50 	bl	8005ac8 <memchr>
 8005228:	1c75      	adds	r5, r6, #1
 800522a:	2800      	cmp	r0, #0
 800522c:	d11f      	bne.n	800526e <_svfiprintf_r+0xe6>
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	06d3      	lsls	r3, r2, #27
 8005232:	d504      	bpl.n	800523e <_svfiprintf_r+0xb6>
 8005234:	2353      	movs	r3, #83	; 0x53
 8005236:	a904      	add	r1, sp, #16
 8005238:	185b      	adds	r3, r3, r1
 800523a:	2120      	movs	r1, #32
 800523c:	7019      	strb	r1, [r3, #0]
 800523e:	0713      	lsls	r3, r2, #28
 8005240:	d504      	bpl.n	800524c <_svfiprintf_r+0xc4>
 8005242:	2353      	movs	r3, #83	; 0x53
 8005244:	a904      	add	r1, sp, #16
 8005246:	185b      	adds	r3, r3, r1
 8005248:	212b      	movs	r1, #43	; 0x2b
 800524a:	7019      	strb	r1, [r3, #0]
 800524c:	7833      	ldrb	r3, [r6, #0]
 800524e:	2b2a      	cmp	r3, #42	; 0x2a
 8005250:	d016      	beq.n	8005280 <_svfiprintf_r+0xf8>
 8005252:	0035      	movs	r5, r6
 8005254:	2100      	movs	r1, #0
 8005256:	200a      	movs	r0, #10
 8005258:	68e3      	ldr	r3, [r4, #12]
 800525a:	782a      	ldrb	r2, [r5, #0]
 800525c:	1c6e      	adds	r6, r5, #1
 800525e:	3a30      	subs	r2, #48	; 0x30
 8005260:	2a09      	cmp	r2, #9
 8005262:	d94e      	bls.n	8005302 <_svfiprintf_r+0x17a>
 8005264:	2900      	cmp	r1, #0
 8005266:	d111      	bne.n	800528c <_svfiprintf_r+0x104>
 8005268:	e017      	b.n	800529a <_svfiprintf_r+0x112>
 800526a:	3501      	adds	r5, #1
 800526c:	e7b0      	b.n	80051d0 <_svfiprintf_r+0x48>
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <_svfiprintf_r+0x1ec>)
 8005270:	6822      	ldr	r2, [r4, #0]
 8005272:	1ac0      	subs	r0, r0, r3
 8005274:	2301      	movs	r3, #1
 8005276:	4083      	lsls	r3, r0
 8005278:	4313      	orrs	r3, r2
 800527a:	002e      	movs	r6, r5
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	e7ce      	b.n	800521e <_svfiprintf_r+0x96>
 8005280:	9b07      	ldr	r3, [sp, #28]
 8005282:	1d19      	adds	r1, r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	9107      	str	r1, [sp, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	db01      	blt.n	8005290 <_svfiprintf_r+0x108>
 800528c:	930b      	str	r3, [sp, #44]	; 0x2c
 800528e:	e004      	b.n	800529a <_svfiprintf_r+0x112>
 8005290:	425b      	negs	r3, r3
 8005292:	60e3      	str	r3, [r4, #12]
 8005294:	2302      	movs	r3, #2
 8005296:	4313      	orrs	r3, r2
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	782b      	ldrb	r3, [r5, #0]
 800529c:	2b2e      	cmp	r3, #46	; 0x2e
 800529e:	d10a      	bne.n	80052b6 <_svfiprintf_r+0x12e>
 80052a0:	786b      	ldrb	r3, [r5, #1]
 80052a2:	2b2a      	cmp	r3, #42	; 0x2a
 80052a4:	d135      	bne.n	8005312 <_svfiprintf_r+0x18a>
 80052a6:	9b07      	ldr	r3, [sp, #28]
 80052a8:	3502      	adds	r5, #2
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	9207      	str	r2, [sp, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	db2b      	blt.n	800530c <_svfiprintf_r+0x184>
 80052b4:	9309      	str	r3, [sp, #36]	; 0x24
 80052b6:	4e30      	ldr	r6, [pc, #192]	; (8005378 <_svfiprintf_r+0x1f0>)
 80052b8:	2203      	movs	r2, #3
 80052ba:	0030      	movs	r0, r6
 80052bc:	7829      	ldrb	r1, [r5, #0]
 80052be:	f000 fc03 	bl	8005ac8 <memchr>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d006      	beq.n	80052d4 <_svfiprintf_r+0x14c>
 80052c6:	2340      	movs	r3, #64	; 0x40
 80052c8:	1b80      	subs	r0, r0, r6
 80052ca:	4083      	lsls	r3, r0
 80052cc:	6822      	ldr	r2, [r4, #0]
 80052ce:	3501      	adds	r5, #1
 80052d0:	4313      	orrs	r3, r2
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	7829      	ldrb	r1, [r5, #0]
 80052d6:	2206      	movs	r2, #6
 80052d8:	4828      	ldr	r0, [pc, #160]	; (800537c <_svfiprintf_r+0x1f4>)
 80052da:	1c6e      	adds	r6, r5, #1
 80052dc:	7621      	strb	r1, [r4, #24]
 80052de:	f000 fbf3 	bl	8005ac8 <memchr>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d03c      	beq.n	8005360 <_svfiprintf_r+0x1d8>
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <_svfiprintf_r+0x1f8>)
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d125      	bne.n	8005338 <_svfiprintf_r+0x1b0>
 80052ec:	2207      	movs	r2, #7
 80052ee:	9b07      	ldr	r3, [sp, #28]
 80052f0:	3307      	adds	r3, #7
 80052f2:	4393      	bics	r3, r2
 80052f4:	3308      	adds	r3, #8
 80052f6:	9307      	str	r3, [sp, #28]
 80052f8:	6963      	ldr	r3, [r4, #20]
 80052fa:	9a04      	ldr	r2, [sp, #16]
 80052fc:	189b      	adds	r3, r3, r2
 80052fe:	6163      	str	r3, [r4, #20]
 8005300:	e765      	b.n	80051ce <_svfiprintf_r+0x46>
 8005302:	4343      	muls	r3, r0
 8005304:	0035      	movs	r5, r6
 8005306:	2101      	movs	r1, #1
 8005308:	189b      	adds	r3, r3, r2
 800530a:	e7a6      	b.n	800525a <_svfiprintf_r+0xd2>
 800530c:	2301      	movs	r3, #1
 800530e:	425b      	negs	r3, r3
 8005310:	e7d0      	b.n	80052b4 <_svfiprintf_r+0x12c>
 8005312:	2300      	movs	r3, #0
 8005314:	200a      	movs	r0, #10
 8005316:	001a      	movs	r2, r3
 8005318:	3501      	adds	r5, #1
 800531a:	6063      	str	r3, [r4, #4]
 800531c:	7829      	ldrb	r1, [r5, #0]
 800531e:	1c6e      	adds	r6, r5, #1
 8005320:	3930      	subs	r1, #48	; 0x30
 8005322:	2909      	cmp	r1, #9
 8005324:	d903      	bls.n	800532e <_svfiprintf_r+0x1a6>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0c5      	beq.n	80052b6 <_svfiprintf_r+0x12e>
 800532a:	9209      	str	r2, [sp, #36]	; 0x24
 800532c:	e7c3      	b.n	80052b6 <_svfiprintf_r+0x12e>
 800532e:	4342      	muls	r2, r0
 8005330:	0035      	movs	r5, r6
 8005332:	2301      	movs	r3, #1
 8005334:	1852      	adds	r2, r2, r1
 8005336:	e7f1      	b.n	800531c <_svfiprintf_r+0x194>
 8005338:	ab07      	add	r3, sp, #28
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	003a      	movs	r2, r7
 800533e:	0021      	movs	r1, r4
 8005340:	4b10      	ldr	r3, [pc, #64]	; (8005384 <_svfiprintf_r+0x1fc>)
 8005342:	9803      	ldr	r0, [sp, #12]
 8005344:	e000      	b.n	8005348 <_svfiprintf_r+0x1c0>
 8005346:	bf00      	nop
 8005348:	9004      	str	r0, [sp, #16]
 800534a:	9b04      	ldr	r3, [sp, #16]
 800534c:	3301      	adds	r3, #1
 800534e:	d1d3      	bne.n	80052f8 <_svfiprintf_r+0x170>
 8005350:	89bb      	ldrh	r3, [r7, #12]
 8005352:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005354:	065b      	lsls	r3, r3, #25
 8005356:	d400      	bmi.n	800535a <_svfiprintf_r+0x1d2>
 8005358:	e72d      	b.n	80051b6 <_svfiprintf_r+0x2e>
 800535a:	2001      	movs	r0, #1
 800535c:	4240      	negs	r0, r0
 800535e:	e72a      	b.n	80051b6 <_svfiprintf_r+0x2e>
 8005360:	ab07      	add	r3, sp, #28
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	003a      	movs	r2, r7
 8005366:	0021      	movs	r1, r4
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <_svfiprintf_r+0x1fc>)
 800536a:	9803      	ldr	r0, [sp, #12]
 800536c:	f000 f9de 	bl	800572c <_printf_i>
 8005370:	e7ea      	b.n	8005348 <_svfiprintf_r+0x1c0>
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	08005cec 	.word	0x08005cec
 8005378:	08005cf2 	.word	0x08005cf2
 800537c:	08005cf6 	.word	0x08005cf6
 8005380:	00000000 	.word	0x00000000
 8005384:	080050c5 	.word	0x080050c5

08005388 <__sfputc_r>:
 8005388:	6893      	ldr	r3, [r2, #8]
 800538a:	b510      	push	{r4, lr}
 800538c:	3b01      	subs	r3, #1
 800538e:	6093      	str	r3, [r2, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	da04      	bge.n	800539e <__sfputc_r+0x16>
 8005394:	6994      	ldr	r4, [r2, #24]
 8005396:	42a3      	cmp	r3, r4
 8005398:	db07      	blt.n	80053aa <__sfputc_r+0x22>
 800539a:	290a      	cmp	r1, #10
 800539c:	d005      	beq.n	80053aa <__sfputc_r+0x22>
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	1c58      	adds	r0, r3, #1
 80053a2:	6010      	str	r0, [r2, #0]
 80053a4:	7019      	strb	r1, [r3, #0]
 80053a6:	0008      	movs	r0, r1
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	f7ff fa9d 	bl	80048e8 <__swbuf_r>
 80053ae:	0001      	movs	r1, r0
 80053b0:	e7f9      	b.n	80053a6 <__sfputc_r+0x1e>

080053b2 <__sfputs_r>:
 80053b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b4:	0006      	movs	r6, r0
 80053b6:	000f      	movs	r7, r1
 80053b8:	0014      	movs	r4, r2
 80053ba:	18d5      	adds	r5, r2, r3
 80053bc:	42ac      	cmp	r4, r5
 80053be:	d101      	bne.n	80053c4 <__sfputs_r+0x12>
 80053c0:	2000      	movs	r0, #0
 80053c2:	e007      	b.n	80053d4 <__sfputs_r+0x22>
 80053c4:	7821      	ldrb	r1, [r4, #0]
 80053c6:	003a      	movs	r2, r7
 80053c8:	0030      	movs	r0, r6
 80053ca:	f7ff ffdd 	bl	8005388 <__sfputc_r>
 80053ce:	3401      	adds	r4, #1
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d1f3      	bne.n	80053bc <__sfputs_r+0xa>
 80053d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053d8 <_vfiprintf_r>:
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053da:	b0a1      	sub	sp, #132	; 0x84
 80053dc:	0006      	movs	r6, r0
 80053de:	000c      	movs	r4, r1
 80053e0:	001f      	movs	r7, r3
 80053e2:	9203      	str	r2, [sp, #12]
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d004      	beq.n	80053f2 <_vfiprintf_r+0x1a>
 80053e8:	6983      	ldr	r3, [r0, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <_vfiprintf_r+0x1a>
 80053ee:	f7ff fc77 	bl	8004ce0 <__sinit>
 80053f2:	4b8e      	ldr	r3, [pc, #568]	; (800562c <_vfiprintf_r+0x254>)
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d11c      	bne.n	8005432 <_vfiprintf_r+0x5a>
 80053f8:	6874      	ldr	r4, [r6, #4]
 80053fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053fc:	07db      	lsls	r3, r3, #31
 80053fe:	d405      	bmi.n	800540c <_vfiprintf_r+0x34>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	059b      	lsls	r3, r3, #22
 8005404:	d402      	bmi.n	800540c <_vfiprintf_r+0x34>
 8005406:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005408:	f7ff fd0b 	bl	8004e22 <__retarget_lock_acquire_recursive>
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	071b      	lsls	r3, r3, #28
 8005410:	d502      	bpl.n	8005418 <_vfiprintf_r+0x40>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11d      	bne.n	8005454 <_vfiprintf_r+0x7c>
 8005418:	0021      	movs	r1, r4
 800541a:	0030      	movs	r0, r6
 800541c:	f7ff faba 	bl	8004994 <__swsetup_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	d017      	beq.n	8005454 <_vfiprintf_r+0x7c>
 8005424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005426:	07db      	lsls	r3, r3, #31
 8005428:	d50d      	bpl.n	8005446 <_vfiprintf_r+0x6e>
 800542a:	2001      	movs	r0, #1
 800542c:	4240      	negs	r0, r0
 800542e:	b021      	add	sp, #132	; 0x84
 8005430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005432:	4b7f      	ldr	r3, [pc, #508]	; (8005630 <_vfiprintf_r+0x258>)
 8005434:	429c      	cmp	r4, r3
 8005436:	d101      	bne.n	800543c <_vfiprintf_r+0x64>
 8005438:	68b4      	ldr	r4, [r6, #8]
 800543a:	e7de      	b.n	80053fa <_vfiprintf_r+0x22>
 800543c:	4b7d      	ldr	r3, [pc, #500]	; (8005634 <_vfiprintf_r+0x25c>)
 800543e:	429c      	cmp	r4, r3
 8005440:	d1db      	bne.n	80053fa <_vfiprintf_r+0x22>
 8005442:	68f4      	ldr	r4, [r6, #12]
 8005444:	e7d9      	b.n	80053fa <_vfiprintf_r+0x22>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	059b      	lsls	r3, r3, #22
 800544a:	d4ee      	bmi.n	800542a <_vfiprintf_r+0x52>
 800544c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800544e:	f7ff fce9 	bl	8004e24 <__retarget_lock_release_recursive>
 8005452:	e7ea      	b.n	800542a <_vfiprintf_r+0x52>
 8005454:	2300      	movs	r3, #0
 8005456:	ad08      	add	r5, sp, #32
 8005458:	616b      	str	r3, [r5, #20]
 800545a:	3320      	adds	r3, #32
 800545c:	766b      	strb	r3, [r5, #25]
 800545e:	3310      	adds	r3, #16
 8005460:	76ab      	strb	r3, [r5, #26]
 8005462:	9707      	str	r7, [sp, #28]
 8005464:	9f03      	ldr	r7, [sp, #12]
 8005466:	783b      	ldrb	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <_vfiprintf_r+0x98>
 800546c:	2b25      	cmp	r3, #37	; 0x25
 800546e:	d14e      	bne.n	800550e <_vfiprintf_r+0x136>
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	1afb      	subs	r3, r7, r3
 8005474:	9305      	str	r3, [sp, #20]
 8005476:	9b03      	ldr	r3, [sp, #12]
 8005478:	429f      	cmp	r7, r3
 800547a:	d00d      	beq.n	8005498 <_vfiprintf_r+0xc0>
 800547c:	9b05      	ldr	r3, [sp, #20]
 800547e:	0021      	movs	r1, r4
 8005480:	0030      	movs	r0, r6
 8005482:	9a03      	ldr	r2, [sp, #12]
 8005484:	f7ff ff95 	bl	80053b2 <__sfputs_r>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d100      	bne.n	800548e <_vfiprintf_r+0xb6>
 800548c:	e0b5      	b.n	80055fa <_vfiprintf_r+0x222>
 800548e:	696a      	ldr	r2, [r5, #20]
 8005490:	9b05      	ldr	r3, [sp, #20]
 8005492:	4694      	mov	ip, r2
 8005494:	4463      	add	r3, ip
 8005496:	616b      	str	r3, [r5, #20]
 8005498:	783b      	ldrb	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d100      	bne.n	80054a0 <_vfiprintf_r+0xc8>
 800549e:	e0ac      	b.n	80055fa <_vfiprintf_r+0x222>
 80054a0:	2201      	movs	r2, #1
 80054a2:	1c7b      	adds	r3, r7, #1
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	2300      	movs	r3, #0
 80054a8:	4252      	negs	r2, r2
 80054aa:	606a      	str	r2, [r5, #4]
 80054ac:	a904      	add	r1, sp, #16
 80054ae:	3254      	adds	r2, #84	; 0x54
 80054b0:	1852      	adds	r2, r2, r1
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	60eb      	str	r3, [r5, #12]
 80054b6:	60ab      	str	r3, [r5, #8]
 80054b8:	7013      	strb	r3, [r2, #0]
 80054ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	2205      	movs	r2, #5
 80054c0:	7819      	ldrb	r1, [r3, #0]
 80054c2:	485d      	ldr	r0, [pc, #372]	; (8005638 <_vfiprintf_r+0x260>)
 80054c4:	f000 fb00 	bl	8005ac8 <memchr>
 80054c8:	9b03      	ldr	r3, [sp, #12]
 80054ca:	1c5f      	adds	r7, r3, #1
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d120      	bne.n	8005512 <_vfiprintf_r+0x13a>
 80054d0:	682a      	ldr	r2, [r5, #0]
 80054d2:	06d3      	lsls	r3, r2, #27
 80054d4:	d504      	bpl.n	80054e0 <_vfiprintf_r+0x108>
 80054d6:	2353      	movs	r3, #83	; 0x53
 80054d8:	a904      	add	r1, sp, #16
 80054da:	185b      	adds	r3, r3, r1
 80054dc:	2120      	movs	r1, #32
 80054de:	7019      	strb	r1, [r3, #0]
 80054e0:	0713      	lsls	r3, r2, #28
 80054e2:	d504      	bpl.n	80054ee <_vfiprintf_r+0x116>
 80054e4:	2353      	movs	r3, #83	; 0x53
 80054e6:	a904      	add	r1, sp, #16
 80054e8:	185b      	adds	r3, r3, r1
 80054ea:	212b      	movs	r1, #43	; 0x2b
 80054ec:	7019      	strb	r1, [r3, #0]
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b2a      	cmp	r3, #42	; 0x2a
 80054f4:	d016      	beq.n	8005524 <_vfiprintf_r+0x14c>
 80054f6:	2100      	movs	r1, #0
 80054f8:	68eb      	ldr	r3, [r5, #12]
 80054fa:	9f03      	ldr	r7, [sp, #12]
 80054fc:	783a      	ldrb	r2, [r7, #0]
 80054fe:	1c78      	adds	r0, r7, #1
 8005500:	3a30      	subs	r2, #48	; 0x30
 8005502:	4684      	mov	ip, r0
 8005504:	2a09      	cmp	r2, #9
 8005506:	d94f      	bls.n	80055a8 <_vfiprintf_r+0x1d0>
 8005508:	2900      	cmp	r1, #0
 800550a:	d111      	bne.n	8005530 <_vfiprintf_r+0x158>
 800550c:	e017      	b.n	800553e <_vfiprintf_r+0x166>
 800550e:	3701      	adds	r7, #1
 8005510:	e7a9      	b.n	8005466 <_vfiprintf_r+0x8e>
 8005512:	4b49      	ldr	r3, [pc, #292]	; (8005638 <_vfiprintf_r+0x260>)
 8005514:	682a      	ldr	r2, [r5, #0]
 8005516:	1ac0      	subs	r0, r0, r3
 8005518:	2301      	movs	r3, #1
 800551a:	4083      	lsls	r3, r0
 800551c:	4313      	orrs	r3, r2
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	9703      	str	r7, [sp, #12]
 8005522:	e7cb      	b.n	80054bc <_vfiprintf_r+0xe4>
 8005524:	9b07      	ldr	r3, [sp, #28]
 8005526:	1d19      	adds	r1, r3, #4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	9107      	str	r1, [sp, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db01      	blt.n	8005534 <_vfiprintf_r+0x15c>
 8005530:	930b      	str	r3, [sp, #44]	; 0x2c
 8005532:	e004      	b.n	800553e <_vfiprintf_r+0x166>
 8005534:	425b      	negs	r3, r3
 8005536:	60eb      	str	r3, [r5, #12]
 8005538:	2302      	movs	r3, #2
 800553a:	4313      	orrs	r3, r2
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	783b      	ldrb	r3, [r7, #0]
 8005540:	2b2e      	cmp	r3, #46	; 0x2e
 8005542:	d10a      	bne.n	800555a <_vfiprintf_r+0x182>
 8005544:	787b      	ldrb	r3, [r7, #1]
 8005546:	2b2a      	cmp	r3, #42	; 0x2a
 8005548:	d137      	bne.n	80055ba <_vfiprintf_r+0x1e2>
 800554a:	9b07      	ldr	r3, [sp, #28]
 800554c:	3702      	adds	r7, #2
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	9207      	str	r2, [sp, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	db2d      	blt.n	80055b4 <_vfiprintf_r+0x1dc>
 8005558:	9309      	str	r3, [sp, #36]	; 0x24
 800555a:	2203      	movs	r2, #3
 800555c:	7839      	ldrb	r1, [r7, #0]
 800555e:	4837      	ldr	r0, [pc, #220]	; (800563c <_vfiprintf_r+0x264>)
 8005560:	f000 fab2 	bl	8005ac8 <memchr>
 8005564:	2800      	cmp	r0, #0
 8005566:	d007      	beq.n	8005578 <_vfiprintf_r+0x1a0>
 8005568:	4b34      	ldr	r3, [pc, #208]	; (800563c <_vfiprintf_r+0x264>)
 800556a:	682a      	ldr	r2, [r5, #0]
 800556c:	1ac0      	subs	r0, r0, r3
 800556e:	2340      	movs	r3, #64	; 0x40
 8005570:	4083      	lsls	r3, r0
 8005572:	4313      	orrs	r3, r2
 8005574:	3701      	adds	r7, #1
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	7839      	ldrb	r1, [r7, #0]
 800557a:	1c7b      	adds	r3, r7, #1
 800557c:	2206      	movs	r2, #6
 800557e:	4830      	ldr	r0, [pc, #192]	; (8005640 <_vfiprintf_r+0x268>)
 8005580:	9303      	str	r3, [sp, #12]
 8005582:	7629      	strb	r1, [r5, #24]
 8005584:	f000 faa0 	bl	8005ac8 <memchr>
 8005588:	2800      	cmp	r0, #0
 800558a:	d045      	beq.n	8005618 <_vfiprintf_r+0x240>
 800558c:	4b2d      	ldr	r3, [pc, #180]	; (8005644 <_vfiprintf_r+0x26c>)
 800558e:	2b00      	cmp	r3, #0
 8005590:	d127      	bne.n	80055e2 <_vfiprintf_r+0x20a>
 8005592:	2207      	movs	r2, #7
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	3307      	adds	r3, #7
 8005598:	4393      	bics	r3, r2
 800559a:	3308      	adds	r3, #8
 800559c:	9307      	str	r3, [sp, #28]
 800559e:	696b      	ldr	r3, [r5, #20]
 80055a0:	9a04      	ldr	r2, [sp, #16]
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	616b      	str	r3, [r5, #20]
 80055a6:	e75d      	b.n	8005464 <_vfiprintf_r+0x8c>
 80055a8:	210a      	movs	r1, #10
 80055aa:	434b      	muls	r3, r1
 80055ac:	4667      	mov	r7, ip
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	3909      	subs	r1, #9
 80055b2:	e7a3      	b.n	80054fc <_vfiprintf_r+0x124>
 80055b4:	2301      	movs	r3, #1
 80055b6:	425b      	negs	r3, r3
 80055b8:	e7ce      	b.n	8005558 <_vfiprintf_r+0x180>
 80055ba:	2300      	movs	r3, #0
 80055bc:	001a      	movs	r2, r3
 80055be:	3701      	adds	r7, #1
 80055c0:	606b      	str	r3, [r5, #4]
 80055c2:	7839      	ldrb	r1, [r7, #0]
 80055c4:	1c78      	adds	r0, r7, #1
 80055c6:	3930      	subs	r1, #48	; 0x30
 80055c8:	4684      	mov	ip, r0
 80055ca:	2909      	cmp	r1, #9
 80055cc:	d903      	bls.n	80055d6 <_vfiprintf_r+0x1fe>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0c3      	beq.n	800555a <_vfiprintf_r+0x182>
 80055d2:	9209      	str	r2, [sp, #36]	; 0x24
 80055d4:	e7c1      	b.n	800555a <_vfiprintf_r+0x182>
 80055d6:	230a      	movs	r3, #10
 80055d8:	435a      	muls	r2, r3
 80055da:	4667      	mov	r7, ip
 80055dc:	1852      	adds	r2, r2, r1
 80055de:	3b09      	subs	r3, #9
 80055e0:	e7ef      	b.n	80055c2 <_vfiprintf_r+0x1ea>
 80055e2:	ab07      	add	r3, sp, #28
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	0022      	movs	r2, r4
 80055e8:	0029      	movs	r1, r5
 80055ea:	0030      	movs	r0, r6
 80055ec:	4b16      	ldr	r3, [pc, #88]	; (8005648 <_vfiprintf_r+0x270>)
 80055ee:	e000      	b.n	80055f2 <_vfiprintf_r+0x21a>
 80055f0:	bf00      	nop
 80055f2:	9004      	str	r0, [sp, #16]
 80055f4:	9b04      	ldr	r3, [sp, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	d1d1      	bne.n	800559e <_vfiprintf_r+0x1c6>
 80055fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055fc:	07db      	lsls	r3, r3, #31
 80055fe:	d405      	bmi.n	800560c <_vfiprintf_r+0x234>
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	059b      	lsls	r3, r3, #22
 8005604:	d402      	bmi.n	800560c <_vfiprintf_r+0x234>
 8005606:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005608:	f7ff fc0c 	bl	8004e24 <__retarget_lock_release_recursive>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	065b      	lsls	r3, r3, #25
 8005610:	d500      	bpl.n	8005614 <_vfiprintf_r+0x23c>
 8005612:	e70a      	b.n	800542a <_vfiprintf_r+0x52>
 8005614:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005616:	e70a      	b.n	800542e <_vfiprintf_r+0x56>
 8005618:	ab07      	add	r3, sp, #28
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	0022      	movs	r2, r4
 800561e:	0029      	movs	r1, r5
 8005620:	0030      	movs	r0, r6
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <_vfiprintf_r+0x270>)
 8005624:	f000 f882 	bl	800572c <_printf_i>
 8005628:	e7e3      	b.n	80055f2 <_vfiprintf_r+0x21a>
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	08005cac 	.word	0x08005cac
 8005630:	08005ccc 	.word	0x08005ccc
 8005634:	08005c8c 	.word	0x08005c8c
 8005638:	08005cec 	.word	0x08005cec
 800563c:	08005cf2 	.word	0x08005cf2
 8005640:	08005cf6 	.word	0x08005cf6
 8005644:	00000000 	.word	0x00000000
 8005648:	080053b3 	.word	0x080053b3

0800564c <_printf_common>:
 800564c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800564e:	0015      	movs	r5, r2
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	688a      	ldr	r2, [r1, #8]
 8005654:	690b      	ldr	r3, [r1, #16]
 8005656:	000c      	movs	r4, r1
 8005658:	9000      	str	r0, [sp, #0]
 800565a:	4293      	cmp	r3, r2
 800565c:	da00      	bge.n	8005660 <_printf_common+0x14>
 800565e:	0013      	movs	r3, r2
 8005660:	0022      	movs	r2, r4
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	3243      	adds	r2, #67	; 0x43
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	2a00      	cmp	r2, #0
 800566a:	d001      	beq.n	8005670 <_printf_common+0x24>
 800566c:	3301      	adds	r3, #1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	069b      	lsls	r3, r3, #26
 8005674:	d502      	bpl.n	800567c <_printf_common+0x30>
 8005676:	682b      	ldr	r3, [r5, #0]
 8005678:	3302      	adds	r3, #2
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	6822      	ldr	r2, [r4, #0]
 800567e:	2306      	movs	r3, #6
 8005680:	0017      	movs	r7, r2
 8005682:	401f      	ands	r7, r3
 8005684:	421a      	tst	r2, r3
 8005686:	d027      	beq.n	80056d8 <_printf_common+0x8c>
 8005688:	0023      	movs	r3, r4
 800568a:	3343      	adds	r3, #67	; 0x43
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	1e5a      	subs	r2, r3, #1
 8005690:	4193      	sbcs	r3, r2
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	0692      	lsls	r2, r2, #26
 8005696:	d430      	bmi.n	80056fa <_printf_common+0xae>
 8005698:	0022      	movs	r2, r4
 800569a:	9901      	ldr	r1, [sp, #4]
 800569c:	9800      	ldr	r0, [sp, #0]
 800569e:	9e08      	ldr	r6, [sp, #32]
 80056a0:	3243      	adds	r2, #67	; 0x43
 80056a2:	47b0      	blx	r6
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d025      	beq.n	80056f4 <_printf_common+0xa8>
 80056a8:	2306      	movs	r3, #6
 80056aa:	6820      	ldr	r0, [r4, #0]
 80056ac:	682a      	ldr	r2, [r5, #0]
 80056ae:	68e1      	ldr	r1, [r4, #12]
 80056b0:	2500      	movs	r5, #0
 80056b2:	4003      	ands	r3, r0
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d103      	bne.n	80056c0 <_printf_common+0x74>
 80056b8:	1a8d      	subs	r5, r1, r2
 80056ba:	43eb      	mvns	r3, r5
 80056bc:	17db      	asrs	r3, r3, #31
 80056be:	401d      	ands	r5, r3
 80056c0:	68a3      	ldr	r3, [r4, #8]
 80056c2:	6922      	ldr	r2, [r4, #16]
 80056c4:	4293      	cmp	r3, r2
 80056c6:	dd01      	ble.n	80056cc <_printf_common+0x80>
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	18ed      	adds	r5, r5, r3
 80056cc:	2700      	movs	r7, #0
 80056ce:	42bd      	cmp	r5, r7
 80056d0:	d120      	bne.n	8005714 <_printf_common+0xc8>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e010      	b.n	80056f8 <_printf_common+0xac>
 80056d6:	3701      	adds	r7, #1
 80056d8:	68e3      	ldr	r3, [r4, #12]
 80056da:	682a      	ldr	r2, [r5, #0]
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	42bb      	cmp	r3, r7
 80056e0:	ddd2      	ble.n	8005688 <_printf_common+0x3c>
 80056e2:	0022      	movs	r2, r4
 80056e4:	2301      	movs	r3, #1
 80056e6:	9901      	ldr	r1, [sp, #4]
 80056e8:	9800      	ldr	r0, [sp, #0]
 80056ea:	9e08      	ldr	r6, [sp, #32]
 80056ec:	3219      	adds	r2, #25
 80056ee:	47b0      	blx	r6
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d1f0      	bne.n	80056d6 <_printf_common+0x8a>
 80056f4:	2001      	movs	r0, #1
 80056f6:	4240      	negs	r0, r0
 80056f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056fa:	2030      	movs	r0, #48	; 0x30
 80056fc:	18e1      	adds	r1, r4, r3
 80056fe:	3143      	adds	r1, #67	; 0x43
 8005700:	7008      	strb	r0, [r1, #0]
 8005702:	0021      	movs	r1, r4
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	3145      	adds	r1, #69	; 0x45
 8005708:	7809      	ldrb	r1, [r1, #0]
 800570a:	18a2      	adds	r2, r4, r2
 800570c:	3243      	adds	r2, #67	; 0x43
 800570e:	3302      	adds	r3, #2
 8005710:	7011      	strb	r1, [r2, #0]
 8005712:	e7c1      	b.n	8005698 <_printf_common+0x4c>
 8005714:	0022      	movs	r2, r4
 8005716:	2301      	movs	r3, #1
 8005718:	9901      	ldr	r1, [sp, #4]
 800571a:	9800      	ldr	r0, [sp, #0]
 800571c:	9e08      	ldr	r6, [sp, #32]
 800571e:	321a      	adds	r2, #26
 8005720:	47b0      	blx	r6
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d0e6      	beq.n	80056f4 <_printf_common+0xa8>
 8005726:	3701      	adds	r7, #1
 8005728:	e7d1      	b.n	80056ce <_printf_common+0x82>
	...

0800572c <_printf_i>:
 800572c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572e:	b08b      	sub	sp, #44	; 0x2c
 8005730:	9206      	str	r2, [sp, #24]
 8005732:	000a      	movs	r2, r1
 8005734:	3243      	adds	r2, #67	; 0x43
 8005736:	9307      	str	r3, [sp, #28]
 8005738:	9005      	str	r0, [sp, #20]
 800573a:	9204      	str	r2, [sp, #16]
 800573c:	7e0a      	ldrb	r2, [r1, #24]
 800573e:	000c      	movs	r4, r1
 8005740:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005742:	2a78      	cmp	r2, #120	; 0x78
 8005744:	d807      	bhi.n	8005756 <_printf_i+0x2a>
 8005746:	2a62      	cmp	r2, #98	; 0x62
 8005748:	d809      	bhi.n	800575e <_printf_i+0x32>
 800574a:	2a00      	cmp	r2, #0
 800574c:	d100      	bne.n	8005750 <_printf_i+0x24>
 800574e:	e0c1      	b.n	80058d4 <_printf_i+0x1a8>
 8005750:	2a58      	cmp	r2, #88	; 0x58
 8005752:	d100      	bne.n	8005756 <_printf_i+0x2a>
 8005754:	e08c      	b.n	8005870 <_printf_i+0x144>
 8005756:	0026      	movs	r6, r4
 8005758:	3642      	adds	r6, #66	; 0x42
 800575a:	7032      	strb	r2, [r6, #0]
 800575c:	e022      	b.n	80057a4 <_printf_i+0x78>
 800575e:	0010      	movs	r0, r2
 8005760:	3863      	subs	r0, #99	; 0x63
 8005762:	2815      	cmp	r0, #21
 8005764:	d8f7      	bhi.n	8005756 <_printf_i+0x2a>
 8005766:	f7fa fccf 	bl	8000108 <__gnu_thumb1_case_shi>
 800576a:	0016      	.short	0x0016
 800576c:	fff6001f 	.word	0xfff6001f
 8005770:	fff6fff6 	.word	0xfff6fff6
 8005774:	001ffff6 	.word	0x001ffff6
 8005778:	fff6fff6 	.word	0xfff6fff6
 800577c:	fff6fff6 	.word	0xfff6fff6
 8005780:	003600a8 	.word	0x003600a8
 8005784:	fff6009a 	.word	0xfff6009a
 8005788:	00b9fff6 	.word	0x00b9fff6
 800578c:	0036fff6 	.word	0x0036fff6
 8005790:	fff6fff6 	.word	0xfff6fff6
 8005794:	009e      	.short	0x009e
 8005796:	0026      	movs	r6, r4
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	3642      	adds	r6, #66	; 0x42
 800579c:	1d11      	adds	r1, r2, #4
 800579e:	6019      	str	r1, [r3, #0]
 80057a0:	6813      	ldr	r3, [r2, #0]
 80057a2:	7033      	strb	r3, [r6, #0]
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0a7      	b.n	80058f8 <_printf_i+0x1cc>
 80057a8:	6808      	ldr	r0, [r1, #0]
 80057aa:	6819      	ldr	r1, [r3, #0]
 80057ac:	1d0a      	adds	r2, r1, #4
 80057ae:	0605      	lsls	r5, r0, #24
 80057b0:	d50b      	bpl.n	80057ca <_printf_i+0x9e>
 80057b2:	680d      	ldr	r5, [r1, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	da03      	bge.n	80057c2 <_printf_i+0x96>
 80057ba:	232d      	movs	r3, #45	; 0x2d
 80057bc:	9a04      	ldr	r2, [sp, #16]
 80057be:	426d      	negs	r5, r5
 80057c0:	7013      	strb	r3, [r2, #0]
 80057c2:	4b61      	ldr	r3, [pc, #388]	; (8005948 <_printf_i+0x21c>)
 80057c4:	270a      	movs	r7, #10
 80057c6:	9303      	str	r3, [sp, #12]
 80057c8:	e01b      	b.n	8005802 <_printf_i+0xd6>
 80057ca:	680d      	ldr	r5, [r1, #0]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	0641      	lsls	r1, r0, #25
 80057d0:	d5f1      	bpl.n	80057b6 <_printf_i+0x8a>
 80057d2:	b22d      	sxth	r5, r5
 80057d4:	e7ef      	b.n	80057b6 <_printf_i+0x8a>
 80057d6:	680d      	ldr	r5, [r1, #0]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	1d08      	adds	r0, r1, #4
 80057dc:	6018      	str	r0, [r3, #0]
 80057de:	062e      	lsls	r6, r5, #24
 80057e0:	d501      	bpl.n	80057e6 <_printf_i+0xba>
 80057e2:	680d      	ldr	r5, [r1, #0]
 80057e4:	e003      	b.n	80057ee <_printf_i+0xc2>
 80057e6:	066d      	lsls	r5, r5, #25
 80057e8:	d5fb      	bpl.n	80057e2 <_printf_i+0xb6>
 80057ea:	680d      	ldr	r5, [r1, #0]
 80057ec:	b2ad      	uxth	r5, r5
 80057ee:	4b56      	ldr	r3, [pc, #344]	; (8005948 <_printf_i+0x21c>)
 80057f0:	2708      	movs	r7, #8
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	2a6f      	cmp	r2, #111	; 0x6f
 80057f6:	d000      	beq.n	80057fa <_printf_i+0xce>
 80057f8:	3702      	adds	r7, #2
 80057fa:	0023      	movs	r3, r4
 80057fc:	2200      	movs	r2, #0
 80057fe:	3343      	adds	r3, #67	; 0x43
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	6863      	ldr	r3, [r4, #4]
 8005804:	60a3      	str	r3, [r4, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	db03      	blt.n	8005812 <_printf_i+0xe6>
 800580a:	2204      	movs	r2, #4
 800580c:	6821      	ldr	r1, [r4, #0]
 800580e:	4391      	bics	r1, r2
 8005810:	6021      	str	r1, [r4, #0]
 8005812:	2d00      	cmp	r5, #0
 8005814:	d102      	bne.n	800581c <_printf_i+0xf0>
 8005816:	9e04      	ldr	r6, [sp, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <_printf_i+0x10a>
 800581c:	9e04      	ldr	r6, [sp, #16]
 800581e:	0028      	movs	r0, r5
 8005820:	0039      	movs	r1, r7
 8005822:	f7fa fd01 	bl	8000228 <__aeabi_uidivmod>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	3e01      	subs	r6, #1
 800582a:	5c5b      	ldrb	r3, [r3, r1]
 800582c:	7033      	strb	r3, [r6, #0]
 800582e:	002b      	movs	r3, r5
 8005830:	0005      	movs	r5, r0
 8005832:	429f      	cmp	r7, r3
 8005834:	d9f3      	bls.n	800581e <_printf_i+0xf2>
 8005836:	2f08      	cmp	r7, #8
 8005838:	d109      	bne.n	800584e <_printf_i+0x122>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	07db      	lsls	r3, r3, #31
 800583e:	d506      	bpl.n	800584e <_printf_i+0x122>
 8005840:	6863      	ldr	r3, [r4, #4]
 8005842:	6922      	ldr	r2, [r4, #16]
 8005844:	4293      	cmp	r3, r2
 8005846:	dc02      	bgt.n	800584e <_printf_i+0x122>
 8005848:	2330      	movs	r3, #48	; 0x30
 800584a:	3e01      	subs	r6, #1
 800584c:	7033      	strb	r3, [r6, #0]
 800584e:	9b04      	ldr	r3, [sp, #16]
 8005850:	1b9b      	subs	r3, r3, r6
 8005852:	6123      	str	r3, [r4, #16]
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	0021      	movs	r1, r4
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	9805      	ldr	r0, [sp, #20]
 800585c:	9b06      	ldr	r3, [sp, #24]
 800585e:	aa09      	add	r2, sp, #36	; 0x24
 8005860:	f7ff fef4 	bl	800564c <_printf_common>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d14c      	bne.n	8005902 <_printf_i+0x1d6>
 8005868:	2001      	movs	r0, #1
 800586a:	4240      	negs	r0, r0
 800586c:	b00b      	add	sp, #44	; 0x2c
 800586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005870:	3145      	adds	r1, #69	; 0x45
 8005872:	700a      	strb	r2, [r1, #0]
 8005874:	4a34      	ldr	r2, [pc, #208]	; (8005948 <_printf_i+0x21c>)
 8005876:	9203      	str	r2, [sp, #12]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	6821      	ldr	r1, [r4, #0]
 800587c:	ca20      	ldmia	r2!, {r5}
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	0608      	lsls	r0, r1, #24
 8005882:	d516      	bpl.n	80058b2 <_printf_i+0x186>
 8005884:	07cb      	lsls	r3, r1, #31
 8005886:	d502      	bpl.n	800588e <_printf_i+0x162>
 8005888:	2320      	movs	r3, #32
 800588a:	4319      	orrs	r1, r3
 800588c:	6021      	str	r1, [r4, #0]
 800588e:	2710      	movs	r7, #16
 8005890:	2d00      	cmp	r5, #0
 8005892:	d1b2      	bne.n	80057fa <_printf_i+0xce>
 8005894:	2320      	movs	r3, #32
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	439a      	bics	r2, r3
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	e7ad      	b.n	80057fa <_printf_i+0xce>
 800589e:	2220      	movs	r2, #32
 80058a0:	6809      	ldr	r1, [r1, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	0022      	movs	r2, r4
 80058a8:	2178      	movs	r1, #120	; 0x78
 80058aa:	3245      	adds	r2, #69	; 0x45
 80058ac:	7011      	strb	r1, [r2, #0]
 80058ae:	4a27      	ldr	r2, [pc, #156]	; (800594c <_printf_i+0x220>)
 80058b0:	e7e1      	b.n	8005876 <_printf_i+0x14a>
 80058b2:	0648      	lsls	r0, r1, #25
 80058b4:	d5e6      	bpl.n	8005884 <_printf_i+0x158>
 80058b6:	b2ad      	uxth	r5, r5
 80058b8:	e7e4      	b.n	8005884 <_printf_i+0x158>
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	680d      	ldr	r5, [r1, #0]
 80058be:	1d10      	adds	r0, r2, #4
 80058c0:	6949      	ldr	r1, [r1, #20]
 80058c2:	6018      	str	r0, [r3, #0]
 80058c4:	6813      	ldr	r3, [r2, #0]
 80058c6:	062e      	lsls	r6, r5, #24
 80058c8:	d501      	bpl.n	80058ce <_printf_i+0x1a2>
 80058ca:	6019      	str	r1, [r3, #0]
 80058cc:	e002      	b.n	80058d4 <_printf_i+0x1a8>
 80058ce:	066d      	lsls	r5, r5, #25
 80058d0:	d5fb      	bpl.n	80058ca <_printf_i+0x19e>
 80058d2:	8019      	strh	r1, [r3, #0]
 80058d4:	2300      	movs	r3, #0
 80058d6:	9e04      	ldr	r6, [sp, #16]
 80058d8:	6123      	str	r3, [r4, #16]
 80058da:	e7bb      	b.n	8005854 <_printf_i+0x128>
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	1d11      	adds	r1, r2, #4
 80058e0:	6019      	str	r1, [r3, #0]
 80058e2:	6816      	ldr	r6, [r2, #0]
 80058e4:	2100      	movs	r1, #0
 80058e6:	0030      	movs	r0, r6
 80058e8:	6862      	ldr	r2, [r4, #4]
 80058ea:	f000 f8ed 	bl	8005ac8 <memchr>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d001      	beq.n	80058f6 <_printf_i+0x1ca>
 80058f2:	1b80      	subs	r0, r0, r6
 80058f4:	6060      	str	r0, [r4, #4]
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9a04      	ldr	r2, [sp, #16]
 80058fe:	7013      	strb	r3, [r2, #0]
 8005900:	e7a8      	b.n	8005854 <_printf_i+0x128>
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	0032      	movs	r2, r6
 8005906:	9906      	ldr	r1, [sp, #24]
 8005908:	9805      	ldr	r0, [sp, #20]
 800590a:	9d07      	ldr	r5, [sp, #28]
 800590c:	47a8      	blx	r5
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d0aa      	beq.n	8005868 <_printf_i+0x13c>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	079b      	lsls	r3, r3, #30
 8005916:	d415      	bmi.n	8005944 <_printf_i+0x218>
 8005918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591a:	68e0      	ldr	r0, [r4, #12]
 800591c:	4298      	cmp	r0, r3
 800591e:	daa5      	bge.n	800586c <_printf_i+0x140>
 8005920:	0018      	movs	r0, r3
 8005922:	e7a3      	b.n	800586c <_printf_i+0x140>
 8005924:	0022      	movs	r2, r4
 8005926:	2301      	movs	r3, #1
 8005928:	9906      	ldr	r1, [sp, #24]
 800592a:	9805      	ldr	r0, [sp, #20]
 800592c:	9e07      	ldr	r6, [sp, #28]
 800592e:	3219      	adds	r2, #25
 8005930:	47b0      	blx	r6
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	d098      	beq.n	8005868 <_printf_i+0x13c>
 8005936:	3501      	adds	r5, #1
 8005938:	68e3      	ldr	r3, [r4, #12]
 800593a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	42ab      	cmp	r3, r5
 8005940:	dcf0      	bgt.n	8005924 <_printf_i+0x1f8>
 8005942:	e7e9      	b.n	8005918 <_printf_i+0x1ec>
 8005944:	2500      	movs	r5, #0
 8005946:	e7f7      	b.n	8005938 <_printf_i+0x20c>
 8005948:	08005cfd 	.word	0x08005cfd
 800594c:	08005d0e 	.word	0x08005d0e

08005950 <_sbrk_r>:
 8005950:	2300      	movs	r3, #0
 8005952:	b570      	push	{r4, r5, r6, lr}
 8005954:	4d06      	ldr	r5, [pc, #24]	; (8005970 <_sbrk_r+0x20>)
 8005956:	0004      	movs	r4, r0
 8005958:	0008      	movs	r0, r1
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	f7fb fb1e 	bl	8000f9c <_sbrk>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d103      	bne.n	800596c <_sbrk_r+0x1c>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d000      	beq.n	800596c <_sbrk_r+0x1c>
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	bd70      	pop	{r4, r5, r6, pc}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	200002b8 	.word	0x200002b8

08005974 <__sread>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	000c      	movs	r4, r1
 8005978:	250e      	movs	r5, #14
 800597a:	5f49      	ldrsh	r1, [r1, r5]
 800597c:	f000 f90c 	bl	8005b98 <_read_r>
 8005980:	2800      	cmp	r0, #0
 8005982:	db03      	blt.n	800598c <__sread+0x18>
 8005984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005986:	181b      	adds	r3, r3, r0
 8005988:	6563      	str	r3, [r4, #84]	; 0x54
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	4a02      	ldr	r2, [pc, #8]	; (8005998 <__sread+0x24>)
 8005990:	4013      	ands	r3, r2
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	e7f9      	b.n	800598a <__sread+0x16>
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	ffffefff 	.word	0xffffefff

0800599c <__swrite>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	001f      	movs	r7, r3
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	0005      	movs	r5, r0
 80059a4:	000c      	movs	r4, r1
 80059a6:	0016      	movs	r6, r2
 80059a8:	05db      	lsls	r3, r3, #23
 80059aa:	d505      	bpl.n	80059b8 <__swrite+0x1c>
 80059ac:	230e      	movs	r3, #14
 80059ae:	5ec9      	ldrsh	r1, [r1, r3]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2302      	movs	r3, #2
 80059b4:	f000 f874 	bl	8005aa0 <_lseek_r>
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <__swrite+0x34>)
 80059bc:	0028      	movs	r0, r5
 80059be:	4013      	ands	r3, r2
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	0032      	movs	r2, r6
 80059c4:	230e      	movs	r3, #14
 80059c6:	5ee1      	ldrsh	r1, [r4, r3]
 80059c8:	003b      	movs	r3, r7
 80059ca:	f000 f81f 	bl	8005a0c <_write_r>
 80059ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d0:	ffffefff 	.word	0xffffefff

080059d4 <__sseek>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	000c      	movs	r4, r1
 80059d8:	250e      	movs	r5, #14
 80059da:	5f49      	ldrsh	r1, [r1, r5]
 80059dc:	f000 f860 	bl	8005aa0 <_lseek_r>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	1c42      	adds	r2, r0, #1
 80059e4:	d103      	bne.n	80059ee <__sseek+0x1a>
 80059e6:	4a05      	ldr	r2, [pc, #20]	; (80059fc <__sseek+0x28>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	0152      	lsls	r2, r2, #5
 80059f2:	4313      	orrs	r3, r2
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	6560      	str	r0, [r4, #84]	; 0x54
 80059f8:	e7f8      	b.n	80059ec <__sseek+0x18>
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	ffffefff 	.word	0xffffefff

08005a00 <__sclose>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	230e      	movs	r3, #14
 8005a04:	5ec9      	ldrsh	r1, [r1, r3]
 8005a06:	f000 f815 	bl	8005a34 <_close_r>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <_write_r>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	0004      	movs	r4, r0
 8005a10:	0008      	movs	r0, r1
 8005a12:	0011      	movs	r1, r2
 8005a14:	001a      	movs	r2, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	4d05      	ldr	r5, [pc, #20]	; (8005a30 <_write_r+0x24>)
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fa fc0a 	bl	8000234 <_write>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d103      	bne.n	8005a2c <_write_r+0x20>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d000      	beq.n	8005a2c <_write_r+0x20>
 8005a2a:	6023      	str	r3, [r4, #0]
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	200002b8 	.word	0x200002b8

08005a34 <_close_r>:
 8005a34:	2300      	movs	r3, #0
 8005a36:	b570      	push	{r4, r5, r6, lr}
 8005a38:	4d06      	ldr	r5, [pc, #24]	; (8005a54 <_close_r+0x20>)
 8005a3a:	0004      	movs	r4, r0
 8005a3c:	0008      	movs	r0, r1
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	f7fb fa7f 	bl	8000f42 <_close>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d103      	bne.n	8005a50 <_close_r+0x1c>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d000      	beq.n	8005a50 <_close_r+0x1c>
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	200002b8 	.word	0x200002b8

08005a58 <_fstat_r>:
 8005a58:	2300      	movs	r3, #0
 8005a5a:	b570      	push	{r4, r5, r6, lr}
 8005a5c:	4d06      	ldr	r5, [pc, #24]	; (8005a78 <_fstat_r+0x20>)
 8005a5e:	0004      	movs	r4, r0
 8005a60:	0008      	movs	r0, r1
 8005a62:	0011      	movs	r1, r2
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	f7fb fa76 	bl	8000f56 <_fstat>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d103      	bne.n	8005a76 <_fstat_r+0x1e>
 8005a6e:	682b      	ldr	r3, [r5, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d000      	beq.n	8005a76 <_fstat_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	200002b8 	.word	0x200002b8

08005a7c <_isatty_r>:
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	b570      	push	{r4, r5, r6, lr}
 8005a80:	4d06      	ldr	r5, [pc, #24]	; (8005a9c <_isatty_r+0x20>)
 8005a82:	0004      	movs	r4, r0
 8005a84:	0008      	movs	r0, r1
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	f7fb fa73 	bl	8000f72 <_isatty>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d103      	bne.n	8005a98 <_isatty_r+0x1c>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d000      	beq.n	8005a98 <_isatty_r+0x1c>
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	200002b8 	.word	0x200002b8

08005aa0 <_lseek_r>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	0004      	movs	r4, r0
 8005aa4:	0008      	movs	r0, r1
 8005aa6:	0011      	movs	r1, r2
 8005aa8:	001a      	movs	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4d05      	ldr	r5, [pc, #20]	; (8005ac4 <_lseek_r+0x24>)
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fb fa68 	bl	8000f84 <_lseek>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d103      	bne.n	8005ac0 <_lseek_r+0x20>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d000      	beq.n	8005ac0 <_lseek_r+0x20>
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	200002b8 	.word	0x200002b8

08005ac8 <memchr>:
 8005ac8:	b2c9      	uxtb	r1, r1
 8005aca:	1882      	adds	r2, r0, r2
 8005acc:	4290      	cmp	r0, r2
 8005ace:	d101      	bne.n	8005ad4 <memchr+0xc>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	4770      	bx	lr
 8005ad4:	7803      	ldrb	r3, [r0, #0]
 8005ad6:	428b      	cmp	r3, r1
 8005ad8:	d0fb      	beq.n	8005ad2 <memchr+0xa>
 8005ada:	3001      	adds	r0, #1
 8005adc:	e7f6      	b.n	8005acc <memchr+0x4>

08005ade <memcpy>:
 8005ade:	2300      	movs	r3, #0
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d100      	bne.n	8005ae8 <memcpy+0xa>
 8005ae6:	bd10      	pop	{r4, pc}
 8005ae8:	5ccc      	ldrb	r4, [r1, r3]
 8005aea:	54c4      	strb	r4, [r0, r3]
 8005aec:	3301      	adds	r3, #1
 8005aee:	e7f8      	b.n	8005ae2 <memcpy+0x4>

08005af0 <memmove>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4288      	cmp	r0, r1
 8005af4:	d902      	bls.n	8005afc <memmove+0xc>
 8005af6:	188b      	adds	r3, r1, r2
 8005af8:	4298      	cmp	r0, r3
 8005afa:	d303      	bcc.n	8005b04 <memmove+0x14>
 8005afc:	2300      	movs	r3, #0
 8005afe:	e007      	b.n	8005b10 <memmove+0x20>
 8005b00:	5c8b      	ldrb	r3, [r1, r2]
 8005b02:	5483      	strb	r3, [r0, r2]
 8005b04:	3a01      	subs	r2, #1
 8005b06:	d2fb      	bcs.n	8005b00 <memmove+0x10>
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	5ccc      	ldrb	r4, [r1, r3]
 8005b0c:	54c4      	strb	r4, [r0, r3]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d1fa      	bne.n	8005b0a <memmove+0x1a>
 8005b14:	e7f8      	b.n	8005b08 <memmove+0x18>
	...

08005b18 <__malloc_lock>:
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	4802      	ldr	r0, [pc, #8]	; (8005b24 <__malloc_lock+0xc>)
 8005b1c:	f7ff f981 	bl	8004e22 <__retarget_lock_acquire_recursive>
 8005b20:	bd10      	pop	{r4, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	200002ac 	.word	0x200002ac

08005b28 <__malloc_unlock>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	4802      	ldr	r0, [pc, #8]	; (8005b34 <__malloc_unlock+0xc>)
 8005b2c:	f7ff f97a 	bl	8004e24 <__retarget_lock_release_recursive>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	200002ac 	.word	0x200002ac

08005b38 <_realloc_r>:
 8005b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b3a:	0007      	movs	r7, r0
 8005b3c:	000e      	movs	r6, r1
 8005b3e:	0014      	movs	r4, r2
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d105      	bne.n	8005b50 <_realloc_r+0x18>
 8005b44:	0011      	movs	r1, r2
 8005b46:	f7ff fa47 	bl	8004fd8 <_malloc_r>
 8005b4a:	0005      	movs	r5, r0
 8005b4c:	0028      	movs	r0, r5
 8005b4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	d103      	bne.n	8005b5c <_realloc_r+0x24>
 8005b54:	f7ff f9d4 	bl	8004f00 <_free_r>
 8005b58:	0025      	movs	r5, r4
 8005b5a:	e7f7      	b.n	8005b4c <_realloc_r+0x14>
 8005b5c:	f000 f830 	bl	8005bc0 <_malloc_usable_size_r>
 8005b60:	9001      	str	r0, [sp, #4]
 8005b62:	4284      	cmp	r4, r0
 8005b64:	d803      	bhi.n	8005b6e <_realloc_r+0x36>
 8005b66:	0035      	movs	r5, r6
 8005b68:	0843      	lsrs	r3, r0, #1
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d3ee      	bcc.n	8005b4c <_realloc_r+0x14>
 8005b6e:	0021      	movs	r1, r4
 8005b70:	0038      	movs	r0, r7
 8005b72:	f7ff fa31 	bl	8004fd8 <_malloc_r>
 8005b76:	1e05      	subs	r5, r0, #0
 8005b78:	d0e8      	beq.n	8005b4c <_realloc_r+0x14>
 8005b7a:	9b01      	ldr	r3, [sp, #4]
 8005b7c:	0022      	movs	r2, r4
 8005b7e:	429c      	cmp	r4, r3
 8005b80:	d900      	bls.n	8005b84 <_realloc_r+0x4c>
 8005b82:	001a      	movs	r2, r3
 8005b84:	0031      	movs	r1, r6
 8005b86:	0028      	movs	r0, r5
 8005b88:	f7ff ffa9 	bl	8005ade <memcpy>
 8005b8c:	0031      	movs	r1, r6
 8005b8e:	0038      	movs	r0, r7
 8005b90:	f7ff f9b6 	bl	8004f00 <_free_r>
 8005b94:	e7da      	b.n	8005b4c <_realloc_r+0x14>
	...

08005b98 <_read_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	0004      	movs	r4, r0
 8005b9c:	0008      	movs	r0, r1
 8005b9e:	0011      	movs	r1, r2
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	4d05      	ldr	r5, [pc, #20]	; (8005bbc <_read_r+0x24>)
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fb f9ae 	bl	8000f08 <_read>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_read_r+0x20>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d000      	beq.n	8005bb8 <_read_r+0x20>
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	200002b8 	.word	0x200002b8

08005bc0 <_malloc_usable_size_r>:
 8005bc0:	1f0b      	subs	r3, r1, #4
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	1f18      	subs	r0, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da01      	bge.n	8005bce <_malloc_usable_size_r+0xe>
 8005bca:	580b      	ldr	r3, [r1, r0]
 8005bcc:	18c0      	adds	r0, r0, r3
 8005bce:	4770      	bx	lr

08005bd0 <_init>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr

08005bdc <_fini>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr
